**** BEGIN LOGGING AT Sun Dec 10 08:26:20 2023

Dec 10 08:26:19 *	Now talking on #bash
Dec 10 08:26:19 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 08:26:19 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 10 08:30:25 *	pi1 has quit (Ping timeout: 256 seconds)
Dec 10 08:34:55 *	ano has quit (Ping timeout: 240 seconds)
Dec 10 08:35:40 *	ano (~ano@user/ano) has joined
Dec 10 08:38:15 *	wpa (uid568065@id-568065.helmsley.irccloud.com) has joined
**** ENDING LOGGING AT Sun Dec 10 08:40:12 2023

**** BEGIN LOGGING AT Sun Dec 10 08:40:12 2023

Dec 10 08:40:34 *	Disconnected ()
**** ENDING LOGGING AT Sun Dec 10 08:40:34 2023

**** BEGIN LOGGING AT Sun Dec 10 08:41:01 2023

Dec 10 08:41:01 *	Now talking on #bash
Dec 10 08:41:01 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 08:41:01 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 10 08:41:35 *	bitoff (~bitoff@109.186.198.206) has joined
**** ENDING LOGGING AT Sun Dec 10 08:42:24 2023

**** BEGIN LOGGING AT Sun Dec 10 08:42:24 2023

Dec 10 08:43:16 *	dacd has quit (Ping timeout: 245 seconds)
Dec 10 08:46:33 *	igemnace has quit (Quit: WeeChat 4.1.2)
Dec 10 08:46:41 *	clarkk has quit (Quit: Leaving)
Dec 10 08:53:59 *	birdynam (~birdynam@lfbn-ren-1-471-182.w2-10.abo.wanadoo.fr) has joined
Dec 10 08:58:34 *	yustin (~yustin@user/yustin) has joined
Dec 10 09:00:00 *	cjdg has quit (Quit: ZNC 1.8.2+deb3.1 - https://znc.in)
**** ENDING LOGGING AT Sun Dec 10 09:00:31 2023

**** BEGIN LOGGING AT Sun Dec 10 09:00:31 2023

**** ENDING LOGGING AT Sun Dec 10 09:00:42 2023

**** BEGIN LOGGING AT Sun Dec 10 09:01:29 2023

Dec 10 09:01:29 *	Now talking on #bash
Dec 10 09:01:29 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 09:01:29 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 10 09:02:10 *	cjdg (~cjdg@198.199.92.37) has joined
Dec 10 09:02:27 *	sandb0y (~pirate@user/sandb0y) has joined
**** ENDING LOGGING AT Sun Dec 10 09:03:11 2023

**** BEGIN LOGGING AT Sun Dec 10 09:03:11 2023

**** ENDING LOGGING AT Sun Dec 10 09:03:53 2023

**** BEGIN LOGGING AT Sun Dec 10 09:03:53 2023

Dec 10 09:04:18 *	bilegeek has quit (Quit: Leaving)
**** ENDING LOGGING AT Sun Dec 10 09:06:12 2023

**** BEGIN LOGGING AT Sun Dec 10 09:06:12 2023

**** ENDING LOGGING AT Sun Dec 10 09:11:36 2023

**** BEGIN LOGGING AT Sun Dec 10 09:11:36 2023

Dec 10 09:23:14 <Nintendo>	Amen.  Thank you for the followup.
Dec 10 09:23:50 <wryish>	k# for ((;)); do break; done
Dec 10 09:23:52 <shbot>	wryish: /init: line 39:    44 Segmentation fault      setsid ksh -l
Dec 10 09:23:52 <shbot>	wryish: (shell exited with 139)
Dec 10 09:24:27 <Nintendo>	By the way, you do not need the quotes for assignment of command substitution.  In other words, this is OK:  output=$(grep  [0-9]{G,} "$@")
Dec 10 10:03:13 *	Disconnected ()
**** ENDING LOGGING AT Sun Dec 10 10:03:13 2023

**** BEGIN LOGGING AT Sun Dec 10 10:42:46 2023

Dec 10 10:42:46 *	Now talking on #bash
Dec 10 10:42:46 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 10:42:46 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 10 11:44:43 <nasmConnoisseur>	Hello everyone, I'd like to learn bash scripting
Dec 10 11:45:41 <selckin>	!guide
Dec 10 11:45:41 <greybot>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
Dec 10 11:46:52 <nasmConnoisseur>	Thx! selckin
**** ENDING LOGGING AT Sun Dec 10 12:03:10 2023

**** BEGIN LOGGING AT Sun Dec 10 12:42:20 2023

Dec 10 12:42:20 *	Now talking on #bash
Dec 10 12:42:20 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 12:42:20 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 10 14:20:34 *	Disconnected ()
**** ENDING LOGGING AT Sun Dec 10 14:20:34 2023

**** BEGIN LOGGING AT Sun Dec 10 14:23:35 2023

Dec 10 14:23:34 *	Now talking on #bash
Dec 10 14:23:34 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 14:23:34 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 10 15:50:34 *	Disconnected ()
**** ENDING LOGGING AT Sun Dec 10 15:50:34 2023

**** BEGIN LOGGING AT Sun Dec 10 15:51:30 2023

Dec 10 15:51:29 *	Now talking on #bash
Dec 10 15:51:29 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 15:51:29 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 10 16:02:04 *	Disconnected ()
**** ENDING LOGGING AT Sun Dec 10 16:02:04 2023

**** BEGIN LOGGING AT Sun Dec 10 16:02:53 2023

Dec 10 16:02:51 *	Now talking on #bash
Dec 10 16:02:51 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 10 16:02:51 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
**** ENDING LOGGING AT Sun Dec 10 16:03:39 2023

**** BEGIN LOGGING AT Mon Dec 11 09:04:48 2023

Dec 11 09:04:47 *	Now talking on #bash
Dec 11 09:04:47 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 11 09:04:47 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 11 09:10:36 *	Disconnected ()
**** ENDING LOGGING AT Mon Dec 11 09:10:36 2023

**** BEGIN LOGGING AT Mon Dec 11 09:10:52 2023

Dec 11 09:10:51 *	Now talking on #bash
Dec 11 09:10:51 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 11 09:10:51 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 11 09:11:02 *	Disconnected ()
**** ENDING LOGGING AT Mon Dec 11 09:11:02 2023

**** BEGIN LOGGING AT Mon Dec 11 09:11:23 2023

Dec 11 09:11:22 *	Now talking on #bash
Dec 11 09:11:22 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 11 09:11:22 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 11 10:06:01 *	Disconnected ()
**** ENDING LOGGING AT Mon Dec 11 10:06:01 2023

**** BEGIN LOGGING AT Mon Dec 11 18:09:39 2023

Dec 11 18:09:37 *	Now talking on #bash
Dec 11 18:09:37 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 11 18:09:37 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 11 18:11:39 <hwrd>	Soliton sorry, my connection was spotty.
Dec 11 18:12:24 <hwrd>	which conclusion?
Dec 11 18:12:43 <Soliton>	"turns out it is interactive"
Dec 11 18:13:23 <hwrd>	bash -l -c 'echo $-', I see *i*
Dec 11 18:14:02 <Soliton>	is bash an alias or something?
**** ENDING LOGGING AT Mon Dec 11 18:14:11 2023

**** BEGIN LOGGING AT Mon Dec 11 18:14:11 2023

Dec 11 18:16:47 <hwrd>	Soliton: nope, points to /opt/homebrew/bin/bash, which is GNU bash, version 5.2.21(1)-release (aarch64-apple-darwin22.6.0)
Dec 11 18:17:34 <hwrd>	oh wait
Dec 11 18:19:42 <hwrd>	it's probably because it's spawned thru `wezterm start "bash -l -c"` cuz if I just `bash -l -c` in an existing shell, it's not interactive...
Dec 11 18:20:17 <hwrd>	I'm probably not quoting or escaping something correctly.
Dec 11 18:22:45 <pac1>	Is it possible to use a variable to provide the pattern when using parameter substitution in bash?
Dec 11 18:29:03 <aesthetics>	# string="hello world"; foo=hello; bar=bye; echo "${string/$foo/$bar}"
Dec 11 18:29:04 <shbot>	aesthetics: bye world
Dec 11 18:29:07 <aesthetics>	like this ?
Dec 11 18:34:04 <pac1>	yes, but the syntax you provided didn't work for me in ${x&&$y}.  I also tried ${x&&${y})  both got "bash: : bad substitutione
Dec 11 18:34:21 <Soliton>	what is that supposed to do?
Dec 11 18:35:04 <Soliton>	that's clearly not the syntax that aesthetics showed.
Dec 11 18:36:24 <pac1>	no.  but it's another form of parameter substitution.  Maybe I've forgotten the correct syntax.  I though && would replace text at the beginning of the value
Dec 11 18:36:47 <Soliton>	no idea where you got that from.
Dec 11 18:36:57 <Soliton>	perhaps you meant ##
Dec 11 18:37:02 <pac1>	## not &&
Dec 11 18:37:20 <pac1>	Helps if you don't code a bug.
Dec 11 18:38:55 <pac1>	I'm just a confused bash coder.  sorry.
Dec 11 18:41:58 <iconoclast_hero>	in regex, if I want to match a space or a period after a space and single digit:  \ [[:digit:]](\.|\ )
Dec 11 18:42:15 <iconoclast_hero>	not 100% on if () is correct around \.|\
Dec 11 18:48:21 <Uqbar>	iconoclast_hero: [. ]
Dec 11 18:50:06 <Uqbar>	not that groups be wrong, but [. ] is probably more readable
Dec 11 18:52:09 <osse>	iconoclast_hero: you need ( ) around it to limit the "reach" of the |
Dec 11 18:52:20 <osse>	but yeah a [ ] reads better
Dec 11 18:52:23 <iconoclast_hero>	oh [. ] = (\.\ )
Dec 11 18:52:27 <iconoclast_hero>	oh [. ] = (\.|\ )
Dec 11 18:53:01 <iconoclast_hero>	yeah, i didn't want a capture group.
Dec 11 18:53:10 <iconoclast_hero>	thanks.
Dec 11 19:00:21 <iconoclast_hero>	so does that need to be something like [.\ ] instead?
Dec 11 19:02:01 <iconoclast_hero>	without out, i get $for m4afile in *m4a; do [[ "$m4afile" =~ .*\ --\ Part\ [[:digit:]]{2}:\ Chapter\ [[:digit:]][. ] ]] && echo "${m4afile/Chapter /Chapter 0}"; done
Dec 11 19:02:01 <iconoclast_hero>	bash: syntax error in conditional expression   /   bash: syntax error near `]
Dec 11 19:02:56 <osse>	iconoclast_hero: You need to escape the space like you did with the group
Dec 11 19:03:13 <iconoclast_hero>	ok
Dec 11 19:03:18 <iconoclast_hero>	not the .?
Dec 11 19:03:27 <osse>	Best is to put it in a variable
Dec 11 19:03:34 <osse>	No
Dec 11 19:09:44 <iconoclast_hero>	put the whole regex in a variable?
Dec 11 19:10:57 <iconoclast_hero>	regexexp='.*\ --\ Part\ [[:digit:]]{2}:\ Chapter\ [[:digit:]][.\ ]'; [[ "$m4afile" =~ "$regexexp" ]] && echo "yes"
Dec 11 19:10:58 <iconoclast_hero>	?
Dec 11 19:14:10 <iconoclast_hero>	or do i not quote "$regexexp"
Dec 11 19:19:48 <osse>	iconoclast_hero: no quote inside [[ ]]
Dec 11 19:20:25 <iconoclast_hero>	thanks
Dec 11 19:21:45 <osse>	iconoclast_hero: also then you don't escape spaces in the variable assignment :p
Dec 11 19:22:39 <iconoclast_hero>	regexexp='.* -- Part [[:digit:]]{2}: Chapter [[:digit:]][. ]'; [[ $m4afile =~ $regexexp ]] && echo "yes"
Dec 11 19:22:40 <iconoclast_hero>	?
Dec 11 19:36:32 <iconoclast_hero>	this one works: $ for m4afile in *m4a; do; [[ "$m4afile" =~ .*\ --\ Part\ [[:digit:]]{2}:\ Chapter\ [[:digit:]][\.\ ] ]] && mv "$m4afile" "${m4afile/Chapter /Chapter 0}"; done
Dec 11 19:36:36 <iconoclast_hero>	this one does not: $ rexexexp='.*\ --\ Part\ [[:digit:]]{2}:\ Chapter\ [[:digit:]][\ |\.]'
Dec 11 19:36:36 <iconoclast_hero>	$ for m4afile in *m4a; do [[ $m4afila =~ $regexexp ]] && mv "$m4afile" "${m4afile/Chapter /Chapter 0}"; done
Dec 11 19:36:44 <iconoclast_hero>	am I missing something?
Dec 11 20:22:52 *	Disconnected ()
**** ENDING LOGGING AT Mon Dec 11 20:22:52 2023

**** BEGIN LOGGING AT Mon Dec 11 20:27:35 2023

Dec 11 20:27:32 *	Now talking on #bash
Dec 11 20:27:32 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 11 20:27:32 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
**** ENDING LOGGING AT Mon Dec 11 21:00:19 2023

**** BEGIN LOGGING AT Sun Dec 17 12:33:17 2023

Dec 17 12:33:17 *	Now talking on #bash
Dec 17 12:33:17 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Dec 17 12:33:17 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
Dec 17 12:51:01 <xx>	I'd like to scan all files for chunks of 128kb of null bytes. How would I script this?
Dec 17 12:51:21 <xx>	bash running on freebsd, so no gnu coreutils
Dec 17 13:05:59 <bm>	Apparently, grep hangs if you feed it a 128K file of null bytes as fixed pattern
Dec 17 13:08:06 <phogg>	xx: with or without installing specialized tools?
Dec 17 13:08:41 <xx>	preferably without, but if there's no way then I'll have to install tools
Dec 17 13:14:26 <phogg>	xx: look at bbe and bgrep either of which should make this easy. Perl would also be an obvious choice if you already have that.
Dec 17 13:15:46 <xx>	perl is available, but I don't know perl
Dec 17 13:24:47 <Earnestly>	It would be funny if it were possible to do: dd if=/dev/zero of=pattern bs=128k count=1; grep -Ff pattern files
Dec 17 13:25:42 <bm>	Earnestly: why isn't it, even with -a switch?
Dec 17 13:26:29 <bm>	why does the program hang?
Dec 17 13:27:59 <Earnestly>	It doesn't hang, it's working quite hard, and then fails to match anyway
Dec 17 13:29:16 <Earnestly>	And there appears to be something pathological about the workload as other tools also struggle
Dec 17 13:30:17 <Earnestly>	What's the best it can do? Find the first NUL, check if there is a NUL 128k bytes in. Then scan the entire range to make sure they're all NUL - this bit could be parallised
Dec 17 13:30:23 <Earnestly>	parallelised*
Dec 17 13:39:19 <bm>	Earnestly: python's .find() on mmap'ed file does just fine, finishes instantly
Dec 17 13:50:44 <bm>	python3 -c "import sys, mmap ; print(mmap.mmap(open(sys.argv[1], 'r+b').fileno(), 0).find(b'\x00' * 128 * 1024))" file_name
Dec 17 13:52:11 <bm>	I wonder what these "other tools" are
Dec 17 14:07:02 <wonderer>	hi all
Dec 17 14:07:13 <ano>	xx: does grep -E '\x00{131072}' work for bsd grep? curious how slow it's
Dec 17 14:07:17 <wonderer>	when setting an openssl connection in bash script
Dec 17 14:07:28 <wonderer>	using the likes of
Dec 17 14:07:29 <wonderer>	openssl s_client -connect irc.libera.chat:6697 -cert /path/to/libera.pem
Dec 17 14:07:58 <wonderer>	to set nick / pass what should i do?
Dec 17 14:09:22 <xx>	ano: will test
Dec 17 14:10:04 <wonderer>	xx
Dec 17 14:10:16 <wonderer>	where do i download the libera.pem ?
Dec 17 14:10:27 <wonderer>	Can't open /path/to/libera.pem for reading, No such file or directory
Dec 17 14:10:54 <ano>	wonderer: what are u trying to do?
Dec 17 14:11:09 <wonderer>	inniate a sasl connection via bash script
Dec 17 14:11:12 <xx>	ano: "grep: Regular expression too big" even on a gnu grep
Dec 17 14:11:17 <wonderer>	with regegd bot nickname
Dec 17 14:11:21 <wonderer>	reged*
Dec 17 14:11:35 <wonderer>	looking in https://libera.chat/guides/sasl
Dec 17 14:12:00 <bm>	wonderer: https://libera.chat/guides/certfp
Dec 17 14:12:03 FiSHLiM plugin unloaded
**** ENDING LOGGING AT Sun Dec 17 14:12:03 2023

**** BEGIN LOGGING AT Wed Jan 17 16:45:04 2024

janv. 17 16:45:04 *	Now talking on #bash
janv. 17 16:45:04 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 17 16:45:04 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
**** ENDING LOGGING AT Wed Jan 17 16:46:04 2024

**** BEGIN LOGGING AT Wed Jan 17 21:56:11 2024

janv. 17 21:56:10 *	Now talking on #bash
janv. 17 21:56:10 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 17 21:56:10 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
**** BEGIN LOGGING AT Wed Jan 17 22:05:35 2024

janv. 17 22:05:35 *	Now talking on #bash
janv. 17 22:05:35 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 17 22:05:35 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
**** ENDING LOGGING AT Wed Jan 17 22:07:05 2024

**** BEGIN LOGGING AT Wed Jan 17 22:07:05 2024

**** ENDING LOGGING AT Wed Jan 17 22:07:11 2024

**** BEGIN LOGGING AT Wed Jan 17 22:07:27 2024

janv. 17 22:07:27 *	Now talking on #bash
janv. 17 22:07:27 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 17 22:07:27 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
**** ENDING LOGGING AT Wed Jan 17 22:07:51 2024

**** BEGIN LOGGING AT Wed Jan 17 22:09:27 2024

janv. 17 22:09:27 *	Now talking on #bash
janv. 17 22:09:27 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 17 22:09:27 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
janv. 17 22:15:08 <BSaboia>	Is there a way to avoid the creation of variable `foo` here? `echo 'bar' | IFS='' read -d '' -r foo; printf 'foo: %s' ${foo%x}`
janv. 17 22:16:31 <BSaboia>	I tried to use "$()" but that didn't work.
janv. 17 22:16:45 <phogg>	what's this supposed to do?
janv. 17 22:17:13 <lopid>	# echo foo:
janv. 17 22:17:15 <shbot>	lopid: foo:
janv. 17 22:17:17 <phogg>	strip a trailing x from a line from stdin without allocating any variables?
**** BEGIN LOGGING AT Wed Jan 17 22:25:37 2024

janv. 17 22:25:37 *	Now talking on #bash
janv. 17 22:25:37 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 17 22:25:37 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
janv. 17 22:28:10 <Angels>	Hey there!
janv. 17 22:28:23 <Angels>	There's a script passed to Bash like: bash < './script';
janv. 17 22:28:44 <Angels>	How would you store the file in the file inside the script assuming it's not possible to change command itself?
janv. 17 22:29:35 <phogg>	the file in the file?
janv. 17 22:29:38 <Angels>	In other words, is it possible to send the script passed to bash like that inside the script itself? Like save itself.
janv. 17 22:29:51 <Angels>	to save*
janv. 17 22:30:01 <lopid>	cp script file
janv. 17 22:30:23 <phogg>	Angels: you want, from within the bash process, to produce a file containing the contents of stdin?
janv. 17 22:30:51 <phogg>	you can, but it would have to be something the script in the file ./script was written to do
janv. 17 22:30:52 <Angels>	phogg, sounds exactly like this.
janv. 17 22:31:17 <Angels>	The ./script can be modified however.
janv. 17 22:31:31 <lopid>	then exec it to a tee
janv. 17 22:31:35 <Angels>	Only the 'bash < ./script' is constant.
janv. 17 22:32:06 <phogg>	lopid: I assume some other effects from the script are desired
janv. 17 22:33:50 <Angels>	Absolutely! If possible, the script should save itself but continue executing. I thought of 'cat "$0" > /saved.sh' but would work for the script passed as the first argument.
janv. 17 22:34:21 <Angels>	'cat /dev/stdin > /saved.sh'?
janv. 17 22:36:07 <phogg>	it's too late by then, your script has no stdin (only bash has your script on stdin)
janv. 17 22:36:13 <Angels>	Bash reads each 512 bytes of the script, correct? Does it apply to /dev/stdin? Would it continue executing if the whole /dev/stdin would be read via this 'cat'? So many questions!
janv. 17 22:36:14 <phogg>	now I am not so sure it can be done
janv. 17 22:36:17 <Owner>	Oraly
janv. 17 22:36:35 <Angels>	phogg, oh.
janv. 17 22:37:17 <lopid>	it won't be perfect but precede with 'set -x' or set up !debugging to send that to a file
**** ENDING LOGGING AT Wed Jan 17 22:37:34 2024

**** BEGIN LOGGING AT Thu Jan 18 07:26:22 2024

janv. 18 07:26:22 *	Now talking on #bash
janv. 18 07:26:22 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 18 07:26:22 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
janv. 18 07:26:32 <tirnanog>	I see.
janv. 18 07:26:44 <tirnanog>	why do you think read is working incorrectly?
janv. 18 07:26:52 <tirnanog>	what are you expecting to happen?
janv. 18 07:27:10 <sphertext_>	i guess it works correctly, but it doesn't display what you're typing
janv. 18 07:27:39 <sphertext_>	i've tested it and yeah it reads the input. it just doesn't display
janv. 18 07:27:43 <tirnanog>	because w3m has turned off echo mode on the tty
janv. 18 07:27:52 <sphertext_>	interesting
janv. 18 07:27:55 <tirnanog>	indeed, it's probably gone a lot further than that.
janv. 18 07:28:00 <sphertext_>	and what does fzf use instad?
janv. 18 07:28:30 <tirnanog>	I haven't looked but it probably applies its own settings. and w3m probably has the good sense to restore its own once the child process finishes.
janv. 18 07:28:40 <tirnanog>	using the termios interface.
janv. 18 07:29:01 <tirnanog>	all read does is try to read from stdin. it's quite basic compared to something like fzf.
janv. 18 07:29:24 <tirnanog>	read won't try to faff around with the terminal settings.
janv. 18 07:29:30 <sphertext_>	uhh that's over my head. any chance i can undo the w3m settings so i can read what i'm typing to read? or use a different utility that fixes this for me?
janv. 18 07:29:42 <tirnanog>	well, bash read -e might.
janv. 18 07:29:45 <sphertext_>	it's the same issue with cat
janv. 18 07:32:32 <sphertext_>	no it doesn't really work
janv. 18 07:32:52 <tirnanog>	stty echo; read
janv. 18 07:33:26 <tirnanog>	perhaps w3m has a more idiomatic way of going about all of this but I can't advise on that.
janv. 18 07:33:42 <sphertext_>	:D that does work
janv. 18 07:33:54 <sphertext_>	but it's sorcery that i don't really understand
janv. 18 07:34:03 <tirnanog>	well
janv. 18 07:34:14 <tirnanog>	your terminal isn't dumb
janv. 18 07:34:19 <tirnanog>	it's actually pretty complicated.
janv. 18 07:34:46 <tirnanog>	all that did was re-enable the echo mode and, as I correctly guessed, w3m restores the settings thereafter
janv. 18 07:34:50 <sphertext_>	tirnanog yeah it does. the `SHELL` command. but the problem is with that one you need to hit an extra <CR> when the bash process ends... `READ_SHELL` is a hacky way to avoid that. `READ_SHELL` is meant to be used for loading the stdout of the shell command into a new w3m buffer right away
janv. 18 07:35:16 <tirnanog>	echo mode would make no sense in an app like w3m, obviously (just imagine it)
janv. 18 07:35:34 <sphertext_>	it works normally with `SHELL` instead of `READ_SHELL`
janv. 18 07:35:54 <tirnanog>	indeed
janv. 18 07:36:12 <sphertext_>	but there's that pesky "[Hit any key]" at the end
janv. 18 07:39:57 <tirnanog>	well, yeah. it leaves the alternate screen. if it didn't wait before returning to the alternate screen, you wouldn't be able to see anything.
janv. 18 07:40:36 <sphertext_>	but it could check when the subprocess quits, no?
janv. 18 07:40:42 <tirnanog>	at least, not until exiting w3m.
janv. 18 07:42:02 <tirnanog>	immediately returning to the alternate screen would frustrate those that want to see the output of the command they just issued.
janv. 18 07:42:17 <tirnanog>	(if any)
janv. 18 07:42:29 <sphertext_>	ah yes
janv. 18 07:42:31 <sphertext_>	i agree with that
janv. 18 07:42:49 <sphertext_>	well
janv. 18 07:42:56 <sphertext_>	so idk then how to do it
janv. 18 07:43:09 <sphertext_>	resetting the echo option seems the only way
janv. 18 07:43:18 <tirnanog>	READ_SHELL is a different beast as it clearly reads STDOUT and renders that 'in' w3m.
janv. 18 07:43:31 <sphertext_>	yes, that's the goal of READ_SHELL
janv. 18 07:43:40 <tirnanog>	I don't have any other suggestions.
janv. 18 07:43:57 <sphertext_>	that's okay, you've taught me a lot, thank you
janv. 18 07:45:42 <tirnanog>	you could make your own read wrapper, I suppose.
janv. 18 07:46:52 <sphertext_>	i can deal with stty echo. just had to add another hacky thing to make sure the buffer is cleared before the echoing from the read command is displayed
janv. 18 07:47:02 <sphertext_>	with that it works exactly as i need it to
janv. 18 07:58:46 <rkta>	sphertext_: What do you need that READ_SHELL read for?
janv. 18 07:58:56 <sphertext_>	ohhh :D
janv. 18 07:59:03 <sphertext_>	welcome to my ted talk
janv. 18 08:00:41 <sphertext_>	tldr is.. uhm. basically, I hit C-r in w3m, and i get a fzf menu of scripts; i select the script for running a search on a search engine; it then asks me for the search query; i type it, then bam, straight to search results :D
janv. 18 08:01:17 <sphertext_>	I could have done it with SHELL too, but i wanted to skip the extra <CR> after typing the search query
janv. 18 08:03:46 <rkta>	Interesting. I would have used cgi for this, but this doesn't work with fzf I guess.
janv. 18 08:03:55 <sphertext_>	i am
janv. 18 08:04:34 <sphertext_>	i'm using uhm.. 2 bash scripts and 2 CGI scripts in total
janv. 18 08:04:39 <sphertext_>	to achieve this particular functionality
janv. 18 08:04:49 <rkta>	sphertext_: Do you have published your setup somewhere?
janv. 18 08:05:00 <sphertext_>	it's a reaaaally convoluted setup, but it's the only way to get it done
janv. 18 08:05:15 <sphertext_>	rkta not yet, i've been working on it the past few days
janv. 18 08:05:43 <sphertext_>	i wrote a local document with all of the undocumented functionality i discovered along the way
janv. 18 08:05:55 <sphertext_>	which is publishable
janv. 18 08:06:01 <sphertext_>	or shareable at least
janv. 18 08:06:15 <sphertext_>	but it's generic, it doesn't explain the exact setup i'm using
janv. 18 08:06:27 <sphertext_>	i could add that tho
janv. 18 08:08:12 <sphertext_>	you could watch this in the mean time: https://www.youtube.com/watch?v=drzMQuLE4BM . i have a slightly different setup from which doesn't need tmux anymore
janv. 18 08:09:01 <sphertext_>	i just used that for inspiration
janv. 18 08:11:45 <sphertext_>	i am also working on setting up a server + website where i could publish what i've done. i can ping you again in a few days when it's ready
janv. 18 08:12:22 <rkta>	I'd love to see that document with undocumented stuff. and yes, please ping me.
janv. 18 08:26:07 *	Disconnected ()
**** ENDING LOGGING AT Thu Jan 18 08:26:07 2024

**** BEGIN LOGGING AT Thu Jan 18 08:26:31 2024

janv. 18 08:26:31 *	Now talking on #bash
janv. 18 08:26:31 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 18 08:26:31 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
janv. 18 08:27:46 <sphertext_>	rkta here's the current draft https://bundles.cc/90b781bfb
janv. 18 08:28:03 <sphertext_>	i struggled a bit with the markdown formatting
janv. 18 08:34:59 <rkta>	sphertext_: thanks, have you thought about updating the manual?
janv. 18 08:36:24 <sphertext_>	rkta if you mean submitting a pull request, i haven't actually learned git yet. but i will get to it eventually
janv. 18 08:37:40 <Blondie101010>	doing that 2 minute operation would be one step forward in learning git
janv. 18 08:39:15 <sphertext_>	well, that's not how i learn something. i have a couple of good git tutorials that i want to read through
janv. 18 08:40:20 <sphertext_>	i've learned my lesson in the past and i don't want to learn just a couple of commands. because in the long term it just makes me more confused. i want to actually master the basics.
janv. 18 08:41:03 <sphertext_>	i think git is a good example because lots of ppl say they find it baffling, while others reply "it's because you don't understand the underlying data structure"
janv. 18 08:41:52 <sphertext_>	the downside of this is that it's paralysing until i actually get to it
janv. 18 08:45:00 <TommyC>	So are you trying to learn shell or specifically git?
janv. 18 08:46:58 <sphertext_>	i have a list of things i want to learn and git is on it
janv. 18 08:47:14 <Blondie101010>	submitting a PR is proposing change
janv. 18 08:47:32 <sphertext_>	im still learning shell, but i finished reading the wooledge guide a while ago
janv. 18 08:47:53 <TommyC>	sphertext_: ok, so what OS are currently learning from?
janv. 18 08:48:10 <sphertext_>	 now im learning by doing, because i understand the basics
janv. 18 08:48:41 <sphertext_>	TommyC what's the relevance of the OS?
janv. 18 08:50:05 <TommyC>	sphertext_: our familiarity with it, e.g.: I know nothing about how to use cygwin on Windows, or even that "git shell" program they have for it
janv. 18 08:50:38 <sphertext_>	but i'm not asking for help at the moment
janv. 18 08:51:24 <sphertext_>	i just mentioned i haven't learned git yet. i want to, and i have a couple of good resources to use
janv. 18 08:52:01 <rkta>	sphertext_: If you need help with the w3m docu, feel free to ask. You also find me in #w3m.
janv. 18 08:53:15 <sphertext_>	rkta thanks
**** ENDING LOGGING AT Thu Jan 18 09:20:36 2024

**** BEGIN LOGGING AT Thu Jan 18 09:57:29 2024

janv. 18 09:57:29 *	Now talking on #bash
janv. 18 09:57:29 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
janv. 18 09:57:29 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
janv. 18 09:58:05 <geirha>	right, so easy fix is to not use unreliable features like set -e in the first place
janv. 18 10:06:53 <mi6x3m>	yeah :/
janv. 18 10:07:06 <mi6x3m>	and portable <4.0 way to get the next file descriptor?
janv. 18 10:07:36 <selckin>	next?
janv. 18 10:07:47 <mi6x3m>	yeah, the next index
janv. 18 10:09:10 <geirha>	just keep track of the ones you have opened
janv. 18 10:41:46 <stemid>	is there some trick to use a heredoc as file argument for a command that does not accept - to read from stdin?
janv. 18 10:42:30 <geirha>	you can use <(cmd) if it handles the file being a (named) pipe
janv. 18 10:43:09 <geirha>	though if it doesn't accept -, it's probably because it needs to seek in the file
janv. 18 10:46:31 <sphertext_>	 you could use $(cat file) as an argument to the command
janv. 18 10:47:48 <stemid>	that worked!
janv. 18 10:48:24 <stemid>	I did ansible-playbook <(cat <<EOF) and it handled it just like a file argument
janv. 18 10:50:47 <geirha>	on linux, you could also do something like   ansible-playbook /dev/fd/3 3<< EOF
janv. 18 10:54:44 <stemid>	cool
janv. 18 10:59:44 <osse>	/dev/stdin works too I guess
janv. 18 11:01:06 <Filystyn>	guys
janv. 18 11:01:08 <Filystyn>	is this ok:     &>/dev/null ????
janv. 18 11:01:27 <geirha>	in bash, it's the same as >/dev/null 2>&1
janv. 18 11:01:41 <Filystyn>	ahm
janv. 18 11:01:45 <geirha>	I recommend using the longer version though
janv. 18 11:01:49 <Filystyn>	that is what I was affraid of ;-)
janv. 18 11:01:54 <Filystyn>	yeah
janv. 18 11:01:57 <geirha>	because it happens to also be valid sh syntax, but has different meaning in sh
janv. 18 11:02:02 <Filystyn>	Im definatly going for the longer version
janv. 18 11:02:09 <Filystyn>	thank you
janv. 18 11:05:06 <Filystyn>	one last thing
janv. 18 11:05:15 <Filystyn>	0<&-
janv. 18 11:05:22 <Filystyn>	what does this do ?
janv. 18 11:06:03 <Soliton>	close stdin.
janv. 18 11:07:04 <geirha>	# exec 0<&- ; read -r var ; printf '$? = %s\n' "$?"
janv. 18 11:07:07 <shbot>	geirha: bash: read: read error: 0: Bad file descriptor
janv. 18 11:07:07 <shbot>	geirha: $? = 1
janv. 18 11:07:48 <geirha>	in general, it's better to do </dev/null instead
janv. 18 11:08:11 <Filystyn>	i see
janv. 18 11:09:01 <Filystyn>	yeah closed stdin could flip the program
janv. 18 11:10:12 <Filystyn>	thank you for your help people ;-)
janv. 18 12:52:52 <uuidNuniq>	when using pipe '|', people writes " command | \ " and the second pipl to the next line. people also write "command | " without the '\'
janv. 18 12:53:35 <uuidNuniq>	why is it possible that '|' can write like that without the '\'
janv. 18 12:53:59 <uuidNuniq>	e.g. : cmd |
janv. 18 12:54:00 <uuidNuniq>	cmd2
janv. 18 12:54:05 <Soliton>	because the grammar allows it.
janv. 18 12:54:06 <uuidNuniq>	cmd | \
janv. 18 12:54:08 <uuidNuniq>	cmd2
janv. 18 12:55:14 <uuidNuniq>	other operators like '||' '&&' can also write like that
janv. 18 12:56:06 <uuidNuniq>	what else? is there man page words about this behavior?
janv. 18 12:57:25 <Soliton>	there is no behavior change. it's just different ways to write the same thing.
janv. 18 13:03:28 <Earnestly>	uuidNuniq: If you end a line with | then there is no need to use \
janv. 18 13:04:39 <Earnestly>	(Although I still use cmd \ | cmd making it visually obvious that the following line is a continuation of a pipeline)
janv. 18 13:05:47 <uuuuu>	How come when I do ln -s file dir/file the symbolic that I get too many levels of symbolic links
**** BEGIN LOGGING AT Mon Feb 12 13:07:12 2024

févr. 12 13:07:12 *	Now talking on #bash
févr. 12 13:07:12 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
févr. 12 13:07:12 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
févr. 12 13:07:17 <igemnace>	right
févr. 12 13:12:26 <ormaaj>	# files=({a..f}); set -- "${!files[@]}"; n=0; printf '%s ' "${@/*/-v${files[n0]}=&}"{,}; echo
févr. 12 13:12:28 <shbot>	ormaaj: -va=0 -va=1 -va=2 -va=3 -va=4 -va=5 -va=0 -va=1 -va=2 -va=3 -va=4 -va=5
févr. 12 13:12:39 <ormaaj>	# files=({a..f}); set -- "${!files[@]}"; n=0; printf '%s ' "${@/*/-v${files[n++]}=&}"{,}; echo
févr. 12 13:12:40 <shbot>	ormaaj: -va=0 -va=1 -va=2 -va=3 -va=4 -va=5 -vb=0 -vb=1 -vb=2 -vb=3 -vb=4 -vb=5
févr. 12 13:12:55 <ormaaj>	:O
févr. 12 13:13:25 <Riviera>	thanks ormaaj
févr. 12 13:13:45 <Riviera>	zxd: see this shitty code? ormaaj graciously provided an example to prove my point
févr. 12 13:15:56 <ormaaj>	k# files=({a..f}); set -- "${!files[@]}"; n=0; printf "%s " "${@/*/-v${files[n++%${#files[@]}]}=\0}"; echo
févr. 12 13:15:58 <shbot>	ormaaj: -va=0 -va=1 -va=2 -va=3 -va=4 -va=5
févr. 12 13:16:25 <ormaaj>	 ~ $ ksh -c 'files=({a..f}); set -- "${!files[@]}"; n=0; printf "%s " "${@/*/-v${files[n++%${#files[@]}]}=\0}"; echo'
févr. 12 13:16:25 <ormaaj>	-va=0 -vb=1 -vc=2 -vd=3 -ve=4 -vf=5
févr. 12 13:17:26 <emanuele6>	>:(
févr. 12 13:17:31 <ormaaj>	>:(
févr. 12 13:17:45 <igemnace>	<:o
févr. 12 13:35:52 <meator>	Hi. I'd like to write a bash completion script. Where should I begin?
févr. 12 13:40:25 <geirha>	I'd start with the Programmable Completion section of man bash
févr. 12 13:43:45 <ormaaj>	the info page also
févr. 12 13:44:18 <zxd>	ormaaj: what is the & in files=({a..f}); set -- "${!files[@]}"; n=0; printf '%s ' "${@/*/-v${files[n++]}=&}"{,}; echo    and  {,}
févr. 12 13:44:37 <zxd>	and =\0  in  files=({a..f}); set -- "${!files[@]}"; n=0; printf "%s " "${@/*/-v${files[n++%${#files[@]}]}=\0}";
févr. 12 13:45:18 <ormaaj>	that would be the patsub_replacement
févr. 12 13:45:25 <emanuele6>	it is the value matches by the pattern; like in sed/ed/vim
févr. 12 13:45:32 <emanuele6>	ksh uses \0 instead of &
févr. 12 13:46:33 <emanuele6>	# <<<'foo @bar@ baz hello hi @zzzz@ @aaaaaaa@ hey' sed 's/@[^@]*@/<&>/g'
févr. 12 13:46:34 <shbot>	emanuele6: foo <@bar@> baz hello hi <@zzzz@> <@aaaaaaa@> hey
**** BEGIN LOGGING AT Mon Feb 12 14:01:08 2024

févr. 12 14:01:08 *	Now talking on #bash
févr. 12 14:01:08 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
févr. 12 14:01:08 *	Topic for #bash set by twkm (Sun May  7 20:58:26 2023)
févr. 12 14:01:56 <geirha>	# shopt -u patsub_replacement; var=foo ; printf '%s -> %s\n' "$var" "${var/*/&}"
févr. 12 14:01:57 <shbot>	geirha: foo -> &
févr. 12 14:02:00 <geirha>	# shopt -s patsub_replacement; var=foo ; printf '%s -> %s\n' "$var" "${var/*/&}"
févr. 12 14:02:01 <shbot>	geirha: foo -> foo
févr. 12 14:02:22 <ormaaj>	k# typeset -T A=(typeset _ .; function create { eval -- "${@_}" _=\(.\); }); A a
févr. 12 14:02:29 <shbot>	ormaaj: ksh: A: .sh.type.A.create[1]: eval[1]: .sh.type.A.create: line 1: .sh.type.A.create: recursion too deep
févr. 12 14:02:29 <shbot>	ormaaj: ksh: A: .sh.type.A.create[1]: eval[1]: A: .sh.type.A.create[1]: eval[1]: .sh.type.A.create: line 1: .sh.type.A.create: recursion too deep
févr. 12 14:02:29 <shbot>	ormaaj: etc... ( http://paste.wooledge.org/28424 )
févr. 12 14:02:40 <geirha>	gesundheit
févr. 12 14:04:54 <meator>	Ok, thanks! It doesn't look very straightforward, but I'll try to whip something up.
févr. 12 15:40:57 *	ChanServ gives voice to greybot
**** BEGIN LOGGING AT Sat Feb 17 17:08:29 2024

Feb 17 17:08:29 *	Now talking on #bash
Feb 17 17:08:29 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 17 17:08:29 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Tue Feb 20 15:07:42 2024

Feb 20 15:07:42 *	Now talking on #bash
Feb 20 15:07:42 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 20 15:07:42 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Tue Feb 20 15:32:26 2024

Feb 20 15:32:26 *	Now talking on #bash
Feb 20 15:32:26 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 20 15:32:26 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Tue Feb 20 15:37:56 2024

Feb 20 15:37:56 *	Now talking on #bash
Feb 20 15:37:56 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 20 15:37:56 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 20 16:24:20 <OMGOMG>	what's the most elegant way to replace the word splitting that occurs when you write foo{bar,baz} with some other separator (to get e.g. foobar+foobaz)
Feb 20 16:30:34 <Soliton>	no word splitting is involved, brace expansion generates multiple strings.
Feb 20 16:30:46 <tirnanog>	# printf -v joined %s, foo{bar,baz}; echo "${joined%,}"
Feb 20 16:30:48 <shbot>	tirnanog: foobar,foobaz
Feb 20 16:31:01 <tirnanog>	or %s+ in your case
Feb 20 16:31:07 <tirnanog>	not sure what the use case it.
Feb 20 16:31:09 <tirnanog>	is
Feb 20 16:32:22 <Soliton>	# printf -v joined foo%s+ bar baz; echo "${joined%+}"
Feb 20 16:32:24 <shbot>	Soliton: foobar+foobaz
Feb 20 16:32:35 <Soliton>	!join
Feb 20 16:32:35 <greybot>	You can "join" an array (write it with a single character of your choice between elements) using: IFS='|'; echo "${array[*]}"; unset IFS
Feb 20 16:33:23 <kurahaupo>	Soliton: I prefer your version to greybot's
Feb 20 16:34:29 <tirnanog>	the bot isn't solving the same problem.
Feb 20 16:34:53 <Soliton>	# join() { local IFS=+; printf %s "$*"; }; join foo{bar,baz}
Feb 20 16:34:54 <shbot>	Soliton: foobar+foobaz
Feb 20 16:34:55 <tirnanog>	though it could be adapted.
Feb 20 16:35:05 <tirnanog>	high-energy Soliton saving me the trouble.
Feb 20 16:35:17 <kurahaupo>	# printf -v O •%s {A..C}{1..4} ; O=${O#•?} ; echo "$O"
Feb 20 16:35:18 <shbot>	kurahaupo: 1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:35:36 <kurahaupo>	Huh!!?
Feb 20 16:35:43 <kurahaupo>	# printf -v O •%s {A..C}{1..4} ; O=${O?} ; echo "$O"
Feb 20 16:35:45 <shbot>	kurahaupo: •A1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:35:52 <kurahaupo>	# printf -v O •%s {A..C}{1..4} ; O=${O#?} ; echo "$O"
Feb 20 16:35:53 <shbot>	kurahaupo: ��A1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:35:59 <tirnanog>	# LC_ALL=en_US.UTF-8; printf -v O •%s {A..C}{1..4} ; O=${O#•?} ; echo "$O"
Feb 20 16:36:01 <shbot>	tirnanog: 1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:36:03 <tirnanog>	hmm.
Feb 20 16:36:12 <OMGOMG>	Soliton: ah yeah, $* was what i was looking for, thanks
Feb 20 16:36:34 <kurahaupo>	# LC_ALL=C.UTF-8; printf -v O •%s {A..C}{1..4} ; O=${O#?} ; echo "$O"
Feb 20 16:36:35 <shbot>	kurahaupo: bash: warning: setlocale: LC_ALL: cannot change locale (C.UTF-8): No such file or directory
Feb 20 16:36:35 <shbot>	kurahaupo: ��A1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:36:50 <tirnanog>	too old for that :(
Feb 20 16:37:03 <kurahaupo>	# LC_ALL=en_US.UTF-8; printf -v O •%s {A..C}{1..4} ; O=${O#?} ; echo "$O"
Feb 20 16:37:04 <shbot>	kurahaupo: A1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:37:09 <kurahaupo>	Yay!
Feb 20 16:38:32 <tirnanog>	oh.
Feb 20 16:38:38 <tirnanog>	# LC_ALL=en_US.UTF-8; printf -v O •%s {A..C}{1..4} ; O=${O#•} ; echo "$O"
Feb 20 16:38:40 <shbot>	tirnanog: A1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:38:52 <tirnanog>	not sure why you had ? there.
Feb 20 16:40:51 <tirnanog>	I mean, before. O=${O#•?} would consume the bullet, then ? the A.
Feb 20 16:41:59 <kurahaupo>	# set -- {A..C}{1..4} ; IFS=•; echo "$*"
Feb 20 16:42:01 <shbot>	kurahaupo: A1�A2�A3�A4�B1�B2�B3�B4�C1�C2�C3�C4
Feb 20 16:42:10 <kurahaupo>	tirnanog: accidental typo
Feb 20 16:42:21 <kurahaupo>	# LC_ALL=en_US.UTF-8; set -- {A..C}{1..4} ; IFS=•; echo "$*"
Feb 20 16:42:22 <shbot>	kurahaupo: A1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:42:23 <tirnanog>	that was a hell of a lot of bot poking to get there :(
Feb 20 16:42:33 <tirnanog>	anyway, yeah.
Feb 20 16:42:53 <kurahaupo>	I'm mildly surprised that that last one works
Feb 20 16:43:03 <tirnanog>	why?
Feb 20 16:43:13 <tirnanog>	it's quite correct.
Feb 20 16:43:46 <tirnanog>	oh, were you expecting IFS to choke on unicode? nah, it's fine.
Feb 20 16:44:19 <tirnanog>	Chet gets some things right, it turns out.
Feb 20 16:47:53 <kurahaupo>	2# LC_ALL=en_US.UTF-8; set -- {A..C}{1..4} ; IFS=•; echo "$*"
Feb 20 16:47:55 <shbot>	kurahaupo: bash: syntax error near unexpected token `;'
Feb 20 16:49:09 <kurahaupo>	3# LC_ALL=en_US.UTF-8; set -- {A..C}{1..4} ; IFS=•; echo "$*"
Feb 20 16:49:10 <shbot>	kurahaupo: A1•A2•A3•A4•B1•B2•B3•B4•C1•C2•C3•C4
Feb 20 16:49:25 <kurahaupo>	Gosh, it's been right for ages!
Feb 20 17:07:55 <kurahaupo>	Kinda a shame that the bot doesn't support LC_ALL=C.UTF-8
Feb 20 17:11:28 <tirnanog>	it's environment hasn't been updated in some time.
Feb 20 17:11:32 <tirnanog>	its, sorry.
Feb 20 17:12:06 <tirnanog>	if it ever gets overhauled, it wouldn't hurt to default to C.UTF-8 either (probably).
Feb 20 17:13:42 <tirnanog>	# getconf GNU_LIBC_VERSION
Feb 20 17:13:44 <shbot>	tirnanog: glibc 2.27
Feb 20 17:13:59 <tirnanog>	officially, it's part of 2.35, though I think debian patched it in sooner.
Feb 20 17:20:02 <Artfaith>	# readlink -fn -- '}'
Feb 20 17:20:04 <shbot>	Artfaith: bash: readlink: command not found
Feb 20 17:20:17 <Artfaith>	>:P
Feb 20 17:45:34 <ormaaj>	some things right \o/
Feb 20 17:47:09 <ormaaj>	Only because stephanne tested and reported a lot of bugs.
Feb 20 17:49:12 <tirnanog>	Stephane is an asset, that is for sure.
Feb 20 17:53:16 <ormaaj>	+# set {a..c}{1..4}; printf '%s\n' "${| typeset IFS=$'\U2022'; printf -v REPLY %s "$*"; }"
Feb 20 17:53:17 <shbot>	ormaaj: a1\a2\a3\a4\b1\b2\b3\b4\c1\c2\c3\c4
Feb 20 17:53:30 <ormaaj>	:o
Feb 20 17:57:05 <tirnanog>	wrong locale. again. :p
Feb 20 17:57:47 <ormaaj>	+# set -- {a..c}{1..4}; ${| typeset LC_CTYPE=en_US.UTF-8 IFS=$'\U2022'; print -r -- "$*"; }
Feb 20 17:57:50 <shbot>	ormaaj: bash: print: command not found
Feb 20 17:58:07 <ormaaj>	+# enable print; set -- {a..c}{1..4}; ${| typeset LC_CTYPE=en_US.UTF-8 IFS=$'\U2022'; print -r -- "$*"; }
Feb 20 17:58:09 <shbot>	ormaaj: a1\a2\a3\a4\b1\b2\b3\b4\c1\c2\c3\c4
Feb 20 17:58:35 <ormaaj>	oh that's nasty
Feb 20 17:58:45 <ormaaj>	+# enable print; set -- {a..c}{1..4}; ${| typeset LC_CTYPE=en_US.UTF-8; typeset IFS=$'\U2022'; print -r -- "$*"; }
Feb 20 17:58:46 <shbot>	ormaaj: a1\a2\a3\a4\b1\b2\b3\b4\c1\c2\c3\c4
Feb 20 17:58:52 <ormaaj>	wat
Feb 20 17:59:14 <tirnanog>	hmm.
Feb 20 17:59:33 <tirnanog>	I don't understand. can't reproduce that locally.
Feb 20 17:59:37 <ormaaj>	2022 is bullet according to app-text/unicode
Feb 20 17:59:40 <tirnanog>	oh wait.
Feb 20 17:59:48 <tirnanog>	yeah, I can.
Feb 20 18:00:21 <tirnanog>	that's bad.
Feb 20 18:11:13 <tirnanog>	# LC_ALL=en_US.UTF-8; set {a..c}{1..4}; IFS=$'\u2022'; echo "$*"
Feb 20 18:11:14 <shbot>	tirnanog: a1\a2\a3\a4\b1\b2\b3\b4\c1\c2\c3\c4
Feb 20 18:11:18 <tirnanog>	# export LC_ALL=en_US.UTF-8; bash -c 'set {a..c}{1..4}; IFS=$'\''\u2022'\''; echo "$*"'
Feb 20 18:11:19 <shbot>	tirnanog: a1•a2•a3•a4•b1•b2•b3•b4•c1•c2•c3•c4
Feb 20 18:12:37 <ormaaj>	:O
Feb 20 18:12:48 <tirnanog>	that certainly wasn't what I was expecting.
Feb 20 18:13:09 <tirnanog>	hitherto, I would have thought that it's enough for the expansion to be performed correctly :(
Feb 20 18:13:16 <ormaaj>	That stupid $'' implementation needs fixing really
Feb 20 18:13:23 <tirnanog>	or, rather, the treatment of the quotes.
Feb 20 18:13:47 <ormaaj>	no it is a ridiculous parse-time thing
Feb 20 18:14:01 <ormaaj>	that's the reason it doesn't work within heredocs too
Feb 20 18:14:29 <tirnanog>	so only printf -v is truly safe.
Feb 20 18:14:31 <tirnanog>	ridiculous.
Feb 20 18:14:57 <ormaaj>	I think it should just be implemented differently
Feb 20 18:15:24 <ormaaj>	Is there any reason it couldn't just be an expansion instead?
Feb 20 18:16:03 <tirnanog>	I don't know. no reason springs to mind, though.
Feb 20 18:19:49 <ormaaj>	I mean, there is kind of a reason, because $'\'', but that doesn't do much. like $'\''*$'\'' doesn't apply quoting to * anyway, I don't think
Feb 20 18:20:12 <ormaaj>	# cd /; echo $'\''*$'\''
Feb 20 18:20:14 <shbot>	ormaaj: '*'
Feb 20 18:20:24 <ormaaj>	:|
Feb 20 18:20:27 <ormaaj>	well
Feb 20 18:20:37 <ormaaj>	# cd /; echo $'\'' * $'\''
Feb 20 18:20:39 <shbot>	ormaaj: ' bin dev etc init lib lib64 proc root tmp usr var '
Feb 20 18:21:10 <ormaaj>	yeah that word as a whole is just '*' with * unquoted
Feb 20 18:21:26 <JAA>	$'\''*$'\'' would expand to any file with leading and trailing quotes, no?
Feb 20 18:21:33 <ormaaj>	I think so
Feb 20 18:21:34 <JAA>	# touch "'foo'"; echo $'\''*$'\''
Feb 20 18:21:35 <shbot>	JAA: 'foo'
Feb 20 18:21:38 <ormaaj>	yeah
Feb 20 18:26:03 <ormaaj>	it is required to consider $'' a quoting type for the purposes of pattern matching but I think it can probably just be treated specially in those contexts
Feb 20 18:27:38 <tirnanog>	would be nice.
Feb 20 18:35:12 <ormaaj>	zsh /proc/self/fd/9 $'$\'\\x\'' 9<<\EOF
Feb 20 18:35:12 <ormaaj>	! case $1 in $1) false; esac; printf '%s ' "$?"; [[ $1 == $1 ]]; echo "$?"
Feb 20 18:35:12 <ormaaj>	EOF
Feb 20 18:35:12 <ormaaj>	0 0
Feb 20 18:35:39 <ormaaj>	ksh /proc/self/fd/9 $'$\'\\x\'' 9<<\EOF
Feb 20 18:35:39 <ormaaj>	! case $1 in $1) false; esac; printf '%s ' "$?"; [[ $1 == $1 ]]; echo "$?"
Feb 20 18:35:39 <ormaaj>	EOF
Feb 20 18:35:39 <ormaaj>	1 1
Feb 20 18:38:44 <ormaaj>	bash, mksh = 1
Feb 20 18:39:48 <ormaaj>	zsh --emulate ksh /proc/self/fd/9 $'$\'\\x\'' 9<<\EOF
Feb 20 18:39:48 <ormaaj>	! case $1 in $1) false; esac; printf '%s ' "$?"; [[ $1 == $1 ]]; echo "$?"
Feb 20 18:39:48 <ormaaj>	EOF
Feb 20 18:39:48 <ormaaj>	0 0
Feb 20 18:39:51 <ormaaj>	:/
Feb 20 18:41:08 <ormaaj>	I should test git really it's been a long time since stable release
Feb 20 18:54:33 <llua>	not much effort is put into ksh emulation
Feb 20 18:54:53 <llua>	and i doubt you would see a difference
Feb 20 18:55:32 <Artfaith>	llua, may I ask, do you have some time available?
Feb 20 18:55:46 <llua>	time for what?
Feb 20 18:56:59 <Artfaith>	I am glad you asked, dear, llua. For effort, of course. The one you mentioned. The project is FOSS and opened. If you dear to compare efforts in public, I believe you should consider putting your effort into the project you complained about.
Feb 20 18:58:36 <llua>	hard pass
Feb 20 18:59:57 <userdocss>	behooved, i say!
Feb 20 19:00:34 <Artfaith>	These are the contributors if you want to talk to them personally:https://github.com/att/ast/graphs/contributors
Feb 20 19:05:08 <emanuele6>	that does not even make any sense
Feb 20 19:09:26 <userdocss>	what about this? https://github.com/att/ast/issues/1496#issuecomment-1378464028
Feb 20 19:12:39 <Artfaith>	userdocss, thank you. I shared the above for two reasons: 1. more contributors listed; 2. It is featured at http://kornshell.com/
Feb 20 19:16:22 <userdocss>	sunglasses advised.
Feb 20 19:30:18 <Soni>	how do you split a value by x?
Feb 20 19:30:37 <Soni>	e.g. size=16x16 -> width=16 height=16
Feb 20 19:31:07 <Artfaith>	Soni, Bash only or using tools like cut?
Feb 20 19:31:17 <Soni>	bash only
Feb 20 19:31:42 <llua>	# IFS=x read -r width height <<<16x16;typeset -p width height
Feb 20 19:31:44 <shbot>	llua: declare -- width="16"
Feb 20 19:31:44 <shbot>	llua: declare -- height="16"
Feb 20 19:32:53 <Soni>	what is typeset -p?
Feb 20 19:33:16 <emanuele6>	it displays   declare -- variablename="quotedvalue"
Feb 20 19:33:23 <ormaaj>	Soni: It writes the command for defining a variable
Feb 20 19:33:26 <emanuele6>	to show the value of the variable unambiguously
Feb 20 19:33:39 <Soni>	oh
Feb 20 19:34:57 <ormaaj>	unless quotedvalue contains a terminal escape, then it shows: declare -- variablename="quob;laksejhpfuhaslfbnygsk
Feb 20 19:35:25 <Artfaith>	# declare --help | grep -P -- '^\s+-p';
Feb 20 19:35:26 <shbot>	Artfaith:       -p        display the attributes and value of each NAME
Feb 20 19:38:35 <ormaaj>	my op powers are insufficient to enable colors. blast.
Feb 20 19:39:10 <emanuele6>	# foo=$'a\rb'; declare -p foo
Feb 20 19:39:11 <shbot>	emanuele6: declare -- foo=$'a\rb'
Feb 20 19:39:15 <emanuele6>	they fixed that!
Feb 20 19:39:22 <ormaaj>	:o
Feb 20 19:40:47 <ormaaj>	I have seen it screw up set -x output though
Feb 20 19:41:14 <emanuele6>	# oo=$'a\rb'; set -x; : "$oo"
Feb 20 19:41:15 <shbot>	emanuele6: + : $'a\rb'
Feb 20 19:41:18 <emanuele6>	51# oo=$'a\rb'; set -x; : "$oo"
Feb 20 19:41:19 <shbot>	emanuele6: + : $'a\rb'
Feb 20 19:42:11 <emanuele6>	even bash 2.0 prints $'' in set -x output
Feb 20 19:42:54 <emanuele6>	in declare -p output only since 5.2 though
Feb 20 19:44:56 <ormaaj>	ah
Feb 20 19:49:38 <Pikk3wyn>	what is a simple way to get complete to complete on env vars and/or funcs and/or aliases
Feb 20 19:50:19 <ormaaj>	the basic readline completion just does that
Feb 20 19:50:20 <Artfaith>	declare completeToComplete=?
Feb 20 19:50:26 <Pikk3wyn>	I am referencing the completions for 'export' and I see it sets action to variable/function based on what arg, I know I could have it check if the function exists and return function etc
Feb 20 19:50:34 <Pikk3wyn>	but surely there is a more simple way
Feb 20 19:50:58 <Pikk3wyn>	to define that it first completes var, failing that func, failing that, alias?
Feb 20 19:50:59 <Pikk3wyn>	right?
Feb 20 19:51:26 <Pikk3wyn>	off the cuff example, say i want to write simple program or whatever 'ecvar'
Feb 20 19:52:02 <Pikk3wyn>	given varname, echoes var, given func, does export -F or sets trace and does or whatever thing (not important rn)
Feb 20 19:52:20 <Pikk3wyn>	so i can give it a var or alias or func and lets assume it knows how to print all of them fully
Feb 20 19:52:33 <Pikk3wyn>	how do i make it complete the name with precedence var,func,alias
Feb 20 19:52:40 <emanuele6>	for that you need a completion function i think; you cannot just specify a completion command that uses different actions for different argument numbers
Feb 20 19:53:00 <Pikk3wyn>	for the first arg only?
Feb 20 19:53:50 <Pikk3wyn>	so ecvar myfu<TAB> -> myfunc;   ecvar myva<TAB> -> myvar
Feb 20 19:53:55 <Artfaith>	Pikk3wyn, for example, https://github.com/nvm-sh/nvm/blob/master/bash_completion
Feb 20 19:54:12 <emanuele6>	wow, Artfaith. is just spamming today
Feb 20 19:54:34 <Pikk3wyn>	can what I need be done without using a custom complete func that checks each type individually
Feb 20 19:54:43 <Artfaith>	emanuele6, what's your problem? Are you moron of some sort? Ignore me already, freak.
Feb 20 19:54:49 <Pikk3wyn>	can it just be specified arg1 is var,func,alias with that precedence
Feb 20 19:55:10 <Pikk3wyn>	Artfaith: i dont think he means it in a bad way :)
Feb 20 19:55:37 <Pikk3wyn>	Artfaith: i see how they do it there, but i am trying to avoid writing a custom func
Feb 20 19:55:43 <emanuele6>	if you want to complete either functions or variables you can specify two actions
Feb 20 19:55:54 <emanuele6>	  complete -A variable -A function myfunc
Feb 20 19:55:58 <Artfaith>	I am not it's he or she, but it's not the first time they try to put something childish here about my presence.
Feb 20 19:56:00 <Pikk3wyn>	ohhhhhh
Feb 20 19:56:20 <Artfaith>	If you don't like my presence, ignore me.
Feb 20 19:56:43 <emanuele6>	that is my order
Feb 20 19:56:58 <Pikk3wyn>	i tend towards assuming people just say stuff for the lulz :)
Feb 20 19:57:05 <Pikk3wyn>	just to conversate and pass the time
Feb 20 19:57:13 <Pikk3wyn>	 :)
Feb 20 19:57:47 <Pikk3wyn>	emmanuelux: thank you my good sir
Feb 20 19:58:02 <Pikk3wyn>	will that have precedence I assume of var, func?
Feb 20 19:58:14 <Pikk3wyn>	when completing?
Feb 20 19:58:34 <emanuele6>	no, no preference
Feb 20 19:58:57 <emanuele6>	if you have a PWD variable, and a PWX function, it does not automatically select PWD
Feb 20 19:59:19 <Pikk3wyn>	if there is $foo_bar, and fooFunc, it will give both as opt?
Feb 20 19:59:24 <Pikk3wyn>	actually thats even better
Feb 20 19:59:26 <Artfaith>	I am not sure it's he/she but they do act like a moron sometimes about me, and I don't think I should suck their cock/vagina accepting it just so ignorant. I am not a robot to eat this shit. Please don't tell me I spam sending a few references related to a raise/actie subject - on topic. It's stupid and defames me for reason I am not aware of. If you have something against me, tell now, and my
Feb 20 19:59:28 <Artfaith>	private messages are opened, emanuele6.
Feb 20 20:00:10 <emanuele6>	what were you even trying to show with that link?
Feb 20 20:00:39 <Artfaith>	Why should I tell you? You did not even open it I assume.
Feb 20 20:01:31 <emanuele6>	if you send links and don't want users to open them, then it's just spam lol
Feb 20 20:02:23 <Artfaith>	Who told you I don't want members I talk to open them?
Feb 20 20:02:29 <Artfaith>	What the fuck are you talking about?
Feb 20 20:02:31 <Pikk3wyn>	Artfaith: personal philosophy is balls out, 0 fks given, take nothing personally
Feb 20 20:02:35 <Artfaith>	Fucking troll.
Feb 20 20:02:43 *	Artfaith added emanuele6 to ignore list. Grow up already.
Feb 20 20:03:15 <Pikk3wyn>	I can see you arent trying to be irritating, I reckon it's easier in life to not assume what people mean necessarily
Feb 20 20:03:36 <Pikk3wyn>	you seem chilled and its kinda sad to see argument over whats probably a minor miscommunication or something :)
Feb 20 20:03:40 <Artfaith>	Pikk3wyn, I am not the first day here.
Feb 20 20:03:51 <Pikk3wyn>	ja, I am aware
Feb 20 20:04:42 <Pikk3wyn>	peace and love my friends, I very much doubt the dude spends his mental effort hating you, and its a waste to give him realestate in your mind hating him :)
Feb 20 20:04:46 <Pikk3wyn>	peace and love my friends
Feb 20 20:04:48 <Artfaith>	What is sad actually is they seem educated, contributing, mature enough, respected, but act like a freaking child.
Feb 20 20:05:58 <Pikk3wyn>	Artfaith: irc is an opportunity to have detailed technical discussions and also act the fool a little bit
Feb 20 20:06:01 <Artfaith>	More to that, they helped countless times here and in other places I do trust. They are very supportive but lack of basic empathy.
Feb 20 20:06:45 <Artfaith>	Pikk3wyn, it's probbly the 5th time they say I spam in public defaming me.
Feb 20 20:07:16 <Pikk3wyn>	from what ive seen of him emanuele6 isnt an aggressive guy, I can say personally I have huge trouble understanding empathy due to the unusual way my brain is configured :)
Feb 20 20:07:25 <Pikk3wyn>	took a long time to learn and i still dont always get it right
Feb 20 20:07:56 <Pikk3wyn>	common trouble statistically often comorbid with ADD/ADHD and/or autism
Feb 20 20:08:59 <Pikk3wyn>	Artfaith: it could be a valid question, to ask why
Feb 20 20:09:27 <Artfaith>	It humiliates me, it damages my reputation, and causes me to waste time on this bullshit explaining I am not spamming to try to keep my name clean on such fucking irresponsible social as IRC with lack of anything to prevent it like phone numbers or roles, or even join time shown like you'd see on Slack or Discord. You try to be accountable, and fucking randomly they will stab you in your back and in
Feb 20 20:09:29 <Artfaith>	public also with that smile on their face.
Feb 20 20:10:02 <Artfaith>	And in the result, I am the idiot. Right? Sure! It's me who did not let it pass, right?! How bad fucking I am!
Feb 20 20:10:12 *	ChanServ gives channel operator status to llua
Feb 20 20:10:14 *	llua has kicked Artfaith from #bash (shut up)
Feb 20 20:10:15 <Pikk3wyn>	Artfaith: I think it's not fundamentally an insult, it's basically asking 'why did you post that specific link'
Feb 20 20:10:26 *	llua removes channel operator status from llua
Feb 20 20:10:39 <Pikk3wyn>	awww guys
Feb 20 20:11:01 <Pikk3wyn>	he's just misunderstanding/misinterpreting it and getting worked up :P
Feb 20 20:11:08 <larryv>	...the hell is going on
Feb 20 20:11:12 <tirnanog>	I have no idea.
Feb 20 20:11:17 <greycat>	Dunno.  I just got here.
Feb 20 20:11:20 <tirnanog>	offense by proxy ... I think?
Feb 20 20:11:36 <Pikk3wyn>	I'm trying to explain to dude that this is IRC, and taking anything personally will lead to madness :P
Feb 20 20:12:55 <Pikk3wyn>	its sad to see overreaction when people just want to help :)
Feb 20 20:13:13 <Earnestly>	I love weechat's /filter
Feb 20 20:14:08 <EdFletcher>	for what it's worth, that is very much the modus operandi of Artfaith (aka Angels). they white-knight about any little thing and are clearly unstable, so it escalates. both of their nicks have been banned from #javascript for the same behavior. do not give them leeway, they are toxic.
Feb 20 20:14:20 <Pikk3wyn>	ah, i see
Feb 20 20:14:34 <tirnanog>	Earnestly: now that I understand it somewhat, it's pretty amazing.
Feb 20 20:14:41 <Pikk3wyn>	I am seeing if i can make them understand its all words, and we dick around all the time
Feb 20 20:15:30 <Pikk3wyn>	Earnestly: are you saying they are a bona fide troll, or just unstable
Feb 20 20:15:36 <EdFletcher>	Pikk3wyn: you did the noble and honorable thing, but unfortunately it's directed at a brick wall. it just doesn't work with them, they do not listen or engage in good faith.
Feb 20 20:15:42 <Pikk3wyn>	i am happy to see if i can help them understand the situation
Feb 20 20:15:43 <Earnestly>	tirnanog: Another is the chat_nick_offline colour, allowing me to completely delete joins/parts while still having visual indication of whether the nick is online or not
Feb 20 20:17:35 <tirnanog>	Earnestly: that sounds absolutely brilliant.
Feb 20 20:18:55 <userdocss>	EdFletcher: javascript dev, enough said.
Feb 20 20:19:23 <EdFletcher>	Pikk3wyn: I genuinely don't think they're a troll no, trolls know they're being the way they are. This is their honest personality from all I've seen. They just need help.
Feb 20 20:19:58 <EdFletcher>	userdocss: Well uhm, how would I know they've been banned from #javascript? Seems likely I am one too no? 🤦
Feb 20 20:20:27 <Earnestly>	tirnanog: (Another thing I'll probably try: cfg=$HOME/filename weechat -r '/exec -oc grep ^/ ${env:cfg}' (with /fset -export filename), which you may also like)
Feb 20 20:20:27 <bprompt>	Pikk3wyn: I don't think you were mistaken btw, one has to give some leeway, keeping in mind that there's no "tone" in text per se, so one can be misconstrued very quickly if not careful, and many aren't mindful of that, that's true on any channel
Feb 20 20:21:18 <EdFletcher>	Agreed, this isn't the fault of anyone in this channel's. You all did the right thing, earnestly and honestly trying to help. Unfortunately the party you were trying to help doesn't care
Feb 20 20:24:34 <bprompt>	EdFletcher: sad to say, I agree with everything you said in this matter, yes, folks come from all walks of life, familial abuse or work abuse, even troublesome childhood, not necessarily someone they vent on fault, anyhow, due to agreeing with you, I'll have to do some penance afterwards :P
Feb 20 20:25:16 <EdFletcher>	hahaha well said bprompt, well said indeed
Feb 20 20:26:41 <tirnanog>	hmm. yes, it was offense by proxy. they got really angry the other day for someone saying they wouldn't buy somebody's book. essentially, why should all that is of value be gratis. all well and good but it developed into a tirade.
Feb 20 20:29:21 <EdFletcher>	and the thing is that it _always does_. i'm nearly certain i could find over ten instances of it happening in just the last six months alone. it's always something innocuous too, they latch on and then _completely_ lose it. genuinely mean it when i said i think they need help.
Feb 20 20:29:24 <tirnanog>	by proxy doesn't even make sense. vicariously taking offence would be closer to the mark.
Feb 20 20:29:48 <EdFletcher>	"vicariously taking offence" YES! perfectly described (and also "vicariously" is such a great word)
Feb 20 20:30:50 <tirnanog>	I think there's a side helping of "everyone on IRC is a troll".
Feb 20 20:30:58 <bprompt>	nothing wrong with a "paid model", nothing wrong with a "non-profit model", it varies, they're not inclusively "good" or "bad", they can be either, some "paid" business models can be too restrictive and sometimes just artifically restrictive, doesn't mean they're any good or any bad though, but that's a matter of business model
Feb 20 20:31:04 <tirnanog>	specifically IRC.
Feb 20 20:31:27 <EdFletcher>	lol fair and true tirnanog
Feb 20 20:31:29 <Payam>	for i in $(ls /usr/share/applications | awk -F '.desktop' ' { print $1}'); do ; apt remove "$i"; done
Feb 20 20:31:41 <userdocss>	tirnanog: well, shitposting more than trolling, i speak for myself at least.
Feb 20 20:31:50 <EdFletcher>	lol
Feb 20 20:31:51 <tirnanog>	no, I mean in the mind of the discussed.
Feb 20 20:32:11 <Soliton>	!pf1 > Payam
Feb 20 20:32:11 <greybot>	Payam: https://mywiki.wooledge.org/BashPitfalls#pf1 -- Don't do this! -- for f in $(ls *.mp3)
Feb 20 20:32:37 <EdFletcher>	tirnanog: oh yeah i took it broadly too, but that absolutely makes sense: they absolutely approach every interaction on the back foot by assuming everyone is against them
Feb 20 20:32:55 <Payam>	for i in /usr/share/applications/*.desktop; do ; apt remove "$i"; done
Feb 20 20:33:15 <Payam>	Soliton, can you try that it works?
Feb 20 20:33:19 <Soliton>	probably want to remove the .desktop part.
Feb 20 20:33:35 <Payam>	yeah you are write
Feb 20 20:33:50 <Soliton>	"${i%.desktop}"
Feb 20 20:33:50 <greycat>	for f in /usr/share/applications/*.desktop; do pkg=${f%.desktop} pkg=${pkg##*/}; apt remove "$pkg"; done
Feb 20 20:34:02 <Soliton>	and the path, yes.
Feb 20 20:34:37 <Payam>	for i in /usr/share/applications/*.desktop; do ; apt remove "${i%.*}"; done
Feb 20 20:34:48 <tirnanog>	EdFletcher: yes. reducing everyone else to an amorphous mass. that was a key devNulled trait actually (everyone in the channel becomes "you"). anyway.
Feb 20 20:34:49 <Soliton>	see what greycat wrote.
Feb 20 20:35:08 <Payam>	yes you are right Solitan
Feb 20 20:35:15 <Payam>	Can you run that in your terminal?
Feb 20 20:35:40 <Earnestly>	Payam: If you want to see what it'll do, you can for these purposes throw echo in front of apt
Feb 20 20:36:00 <EdFletcher>	tirnanog: haha spot on
Feb 20 20:36:03 <Payam>	for f in /usr/share/applications/*.desktop; do pkg=${f%.desktop} pkg=${pkg##*/}; apt remove -y -- "$pkg"; done
Feb 20 20:36:31 <Payam>	No I want Soliton to run it because I like him a lot
Feb 20 20:36:32 <Earnestly>	Or create apt() { printf 'apt %s\n' "$*"; }
Feb 20 20:37:18 <Payam>	Soliton, run the code as sudo. It makes your computer much faster
Feb 20 20:37:35 <greycat>	Not amusing.
Feb 20 20:38:33 <Payam>	greycat, I'm doing my best :/ not a funny individual
Feb 20 20:39:12 <greycat>	I'm pretty sure Soliton wouldn't be foolish enough to run that, but in general, "jokes" like that are not welcome in IRC help channels, because they're full of people who don't know better.
Feb 20 20:39:52 <JAA>	Without a loop:  f=(/usr/share/applications/*.desktop); f=("${f[@]##*/}"); echo apt remove "${f[@]%.desktop}"
Feb 20 20:40:05 <Payam>	Ah. In this time and day everyone who finds IRC knows already what this does :D
Feb 20 20:40:06 <userdocss>	not 100% confident, just pretty sure.
Feb 20 20:40:16 <Payam>	greycat, you are right. sorry
Feb 20 20:40:33 <tirnanog>	larryv: well, today I learned from Chet that word splitting doesn't occur in conditional expressions. thanks, Chet!
Feb 20 20:40:55 <greycat>	He kept saying "conditional command" and I wasn't even sure what that means.
Feb 20 20:41:12 <Payam>	JAA are you sure that works?
Feb 20 20:41:21 <Payam>	It is not so developer friendly code
Feb 20 20:41:44 <greycat>	the echo will prevent it from actually removing anything, so you can see what it does
Feb 20 20:41:54 <greycat>	then you remove the echo when you want it to "actually go"
Feb 20 20:42:12 <Payam>	greycat, tbh I don't trust anyone right now :D
Feb 20 20:42:29 <Payam>	but yes that is correct. I can just put a print
Feb 20 20:42:31 <Payam>	echo*
Feb 20 20:42:39 <greycat>	It's two variable assignments and an echo.  And I wouldn't joke about something like this.  It is safe.
Feb 20 20:42:52 <JAA>	Yeah, that command is safe to run as is, and it does work.
Feb 20 20:43:28 <JAA>	When you work with arrays, you can do parameter expansions on each element of the array, including # and % to remove leading and trailing bits.
Feb 20 20:44:01 <Payam>	JAA that was a beautiful one liner though
Feb 20 20:44:07 <Payam>	I will use it in future.
Feb 20 20:44:17 <Payam>	not the exact code bu similar
Feb 20 20:44:18 <JAA>	:-)
Feb 20 20:44:26 <Earnestly>	arg_max watches from behind the reeds
Feb 20 20:45:30 <greycat>	!faq chunks
Feb 20 20:45:30 <greybot>	https://mywiki.wooledge.org/BashFAQ/095 -- I'm getting "Argument list too long".  How can I process a large list in chunks?
Feb 20 20:46:06 <JAA>	Yeah, at that point, I'd probably skip the array stuff entirely and do it with sed or similar.
Feb 20 20:46:33 <Earnestly>	Doesn't apt remove have the ability to read from stdin?
Feb 20 20:46:35 <greycat>	xargs -0 can help with this, on GNU/BSD
Feb 20 20:46:46 <Earnestly>	Soon POSIX™
Feb 20 20:46:47 <JAA>	printf '%s\0' /usr/share/applications/*.desktop | sed -z 's,^.*/,,; s,\.desktop$,,' | xargs -0 echo apt remove
Feb 20 20:47:31 <Earnestly>	JAA: printf '%s\0' "${array[@]}" | xargs -0 would be better, but obviously xargs will split transactions. If it can just read stdin, that solves all the problems
Feb 20 20:47:33 <ormaaj>	builtins do not care about ARG_MAX
Feb 20 20:47:41 <Earnestly>	Yah
Feb 20 20:48:49 <Earnestly>	I see people reporting apt(-get) remove with stdin failing because it prompts for confirmation
Feb 20 20:48:56 <tirnanog>	Earnestly: it would be too sensible a feature. can't be having that.
Feb 20 20:49:16 <JAA>	Nope, doesn't look like apt has that. Maybe dpkg does.
Feb 20 20:50:01 <greycat>	there's probably some way to send a list like 'pkg1 deinstall\npkg2 deinstall\n...' to dselect something, but that's more of a #debian question
Feb 20 20:51:18 <JAA>	`dpkg --set-selections` perhaps?
Feb 20 20:51:33 <greycat>	yes, that's part of it, and then ... apparently "apt-get dselect-upgrade
Feb 20 20:51:44 <greycat>	" is the other part which is much harder to remember
Feb 20 20:52:12 <JAA>	It's an upgrade, so clearly executing that must be safe. :-)
Feb 20 20:53:17 <ormaaj>	My weechat nick colorizer chose grey for greycat :3
Feb 20 20:54:12 <bprompt>	wondering what would happen to a "whitecat"
Feb 20 20:57:36 <Pikk3wyn>	EdFletcher: I spent some time talking to the guy, definitely I can assure he's not TRYING to cause anything :)
Feb 20 20:58:04 <Pikk3wyn>	he has some troubles interpreting certain statements, I gave him some advices and pointers he can refer to help
Feb 20 20:58:23 <EdFletcher>	Pikk3wyn: good on you and thanks for relaying that, it definitely jives with everything i've seen too
Feb 20 20:59:04 <Pikk3wyn>	I feel bad for dude because he legit is taking stuff the wrong way, there is some mental aspect, I don't believe it's his fault
Feb 20 20:59:20 <Pikk3wyn>	if he listens to the stuff I told him hopefully it should be much smoother in the future
Feb 20 21:00:00 <Pikk3wyn>	imo everyone is worth spending the time to care :)
Feb 20 21:01:18 <Pikk3wyn>	he truly believes they were personally insulting him + affecting his reputation, is emotionally affected by it
Feb 20 21:02:14 <Pikk3wyn>	legit they are a nice dude, I gave a fairly long explanation of what I think is going on, and how I personally would go about analysing certain stuff etc
Feb 20 21:02:19 <EdFletcher>	100% agreed with your sentiment, and if this was an isolated incident _or_ they had previously shown the ability to learn from previous incidents i would have more sympathy. but you're not the first to try at this 😦
Feb 20 21:02:37 <EdFletcher>	and that they come back and evade bans purposefully is ... not cool
Feb 20 21:03:12 <EdFletcher>	someone who was truly remorseful would strive to change their behavior and certainly wouldn't ban-evade
Feb 20 21:03:36 <Pikk3wyn>	I also have diagnosed issues interpreting social situations, so I had to work pretty hard to learn to analyse stuff instead of relying on empathetic understanding
Feb 20 21:04:00 <Pikk3wyn>	he wasn't remoseful at that point because he didn't understand what he was doing anything wrong
Feb 20 21:04:26 <EdFletcher>	yeah and that's very virtuous of you to recognize this in others and want to help with your experience 🙇
Feb 20 21:04:35 <Pikk3wyn>	:)
Feb 20 21:04:42 <Pikk3wyn>	he thought people were insulting him and he was defending himself, and got frustrated that he was being banned for it and became resentful
Feb 20 21:04:49 <Pikk3wyn>	which imo is very sad
Feb 20 21:04:52 <EdFletcher>	well i hate to say but i just don't believe them any longer. that may well be 100% true, but i don't buy it
Feb 20 21:05:01 <EdFletcher>	i think they're manipulating you
Feb 20 21:05:11 <Pikk3wyn>	they didn't tell me this
Feb 20 21:05:28 <Pikk3wyn>	I inferred most of this from unrelated stuff
Feb 20 21:05:36 <EdFletcher>	sorry i didn't mean to imply anything, that's fair
Feb 20 21:05:42 <Pikk3wyn>	well, if they continue to do it, then they are doing it deliberately or ignoring my advice
Feb 20 21:06:01 <EdFletcher>	yep
Feb 20 21:06:08 <Pikk3wyn>	in that case I would not have sympathy
Feb 20 21:06:09 <EdFletcher>	and i'm not a betting person but...
Feb 20 21:06:25 <Pikk3wyn>	yeah whatever happens happens lol
Feb 20 21:06:28 <Pikk3wyn>	not up to me now
Feb 20 21:06:53 <EdFletcher>	nope and you did your level best to help make the situation better, so you can be proud
Feb 20 21:07:00 <Pikk3wyn>	I was very nice about it and fully explained what the source of misunderstanding may be, and gave advices as to how to prevent it in future
Feb 20 21:07:10 <Pikk3wyn>	out of my hands now :P
Feb 20 21:07:49 <Pikk3wyn>	hopefully they will read and understand people arent trying to insult them, and even if they were, it doesnt really matter
Feb 20 21:07:53 <Pikk3wyn>	and isnt worth arguing
Feb 20 21:08:23 <EdFletcher>	💯
Feb 20 21:08:41 <Pikk3wyn>	if they dont btw, im not defending them
Feb 20 21:09:24 <Pikk3wyn>	if they ignore clearly structured advice, delivered clearly and politely, with references
Feb 20 21:09:27 <Pikk3wyn>	sad but not my problem :P
Feb 20 21:09:35 <Pikk3wyn>	we shall see
Feb 20 21:09:44 <EdFletcher>	"you can lead a horse to water but you can't make them drink" 😉
Feb 20 21:12:34 <bprompt>	Pikk3wyn: first of all, I did what you did was hmmm great, and all Kudos to you, totally agree with your approach, however, let me give you a statement from someone I do know decently and he's a heavy drinker, once I said to him in breakfast, "well you know, there's always Alcoholic Anonymous...." and I went on they don't proselytize anyone and so on, his response was, "you know, AA works for someone who wants to quit, I don't want to quit", and yes, the
Feb 20 21:12:34 <bprompt>	reasons are much deeper than even he knows, however, it's like that :)
Feb 20 21:12:56 <Pikk3wyn>	"You can lead a horse to water, but you can't make it THINK" - Pikk3wyn. 2020
Feb 20 21:13:14 <ormaaj>	please chat about this somewhere else
Feb 20 21:13:34 <bprompt>	Pikk3wyn: I think that has a CC license, so you need to include EdFletcher for credits :P
Feb 20 21:14:36 <Pikk3wyn>	that statement was created in 2020 and is released under 'do anything idgaf just give credit'
Feb 20 21:14:38 <Pikk3wyn>	hehe
Feb 20 21:15:00 <EdFletcher>	🤣
Feb 20 21:15:36 <Pikk3wyn>	that's what I release most stuff under
Feb 20 21:22:23 <Pikk3wyn>	sometimes I also use 'do anything idgaf just provide me with source of all changes and all usages in the software, if you sell without prior negotiation, I reserve right to have permanent access to your full source, and every source of every library or adjunctive software of any kind'
Feb 20 21:23:11 <Pikk3wyn>	i dont care how people use my stuff tbh but if theyre making loads of bank from it i'd like a cut
Feb 20 21:23:54 <nvz>	"yeah but I like money though" - Frito, Idiocracy (2006)
Feb 20 21:24:06 <Pikk3wyn>	they ask they can use it for free unless it's some massive company lel
Feb 20 21:24:52 <Pikk3wyn>	fully FOSS, but if youre 'enterprise', i'll be 'enterprising'
Feb 20 21:24:56 <Pikk3wyn>	heh
Feb 20 21:30:32 <bprompt>	Pikk3wyn: IP(intellectual property) can get blurry quite often, of course Patent holders will always claim it isn't so, but that's just subjectivity, I'm not sure I'd take the side of the Winklevoss twins against Mark Zuckerberg, since Mark did most to make it work, from the little I've read
Feb 20 21:32:12 <Pikk3wyn>	intellectual property law? under the american flag? I only care if it can make me money
Feb 20 21:32:42 <Pikk3wyn>	last time I checked the land of the jolly rodger ain't got IP law
Feb 20 21:32:58 <Pikk3wyn>	bprompt: what was the REALLY about tho, that case
Feb 20 21:33:06 <ormaaj>	fuck
Feb 20 21:33:10 <Pikk3wyn>	I find so many damn things referencing the movie
Feb 20 21:33:22 <Pikk3wyn>	which immediately means it's a useless analysis prob
Feb 20 21:33:31 <larryv>	please stop talking
Feb 20 21:33:39 <Pikk3wyn>	ah, my apologies
Feb 20 21:33:43 <Pikk3wyn>	too offtopic?
Feb 20 21:34:04 <larryv>	considerably so
Feb 20 21:34:20 <Pikk3wyn>	my bad
Feb 20 21:34:29 <bprompt>	Pikk3wyn: hmm the movie?   nahh it was a trial case agains Mark Zuckeberg, the claim from the Winklevoss twins is that he stole their idea, however Mark was the technical guy they hire whilst at Harvard, so the technical part was Mark's, before and after
Feb 20 21:35:39 <bprompt>	larryv: yeap, we maybe too offtopic, I'm aware, my bad
Feb 20 21:37:03 <HumbleGuy>	i'm trying to open a script from keyboard shortcut but it doesnt work. The script is executable, in PATH and contains feh /dir/to/img. But when I assign it to my DE keyboard nothing happens, why is that
Feb 20 21:37:51 <bprompt>	DE keyboard?
Feb 20 21:38:08 <HumbleGuy>	desktop enviroment keybord shortcut
Feb 20 21:38:23 <Pikk3wyn>	HumbleGuy: what are you using to open it?
Feb 20 21:38:30 <Pikk3wyn>	likely the DE does not have it in PATH in the env
Feb 20 21:38:33 <bprompt>	HumbleGuy: I'd think that has to do with the desktop manager, how it does the mapping
Feb 20 21:38:44 <Pikk3wyn>	HumbleGuy: where do you add it to PATH
Feb 20 21:38:58 <HumbleGuy>	well any other application opens perfectly fine with custom shortcut
Feb 20 21:39:06 <HumbleGuy>	Pikk3wyn in .bashrc
Feb 20 21:39:16 <Pikk3wyn>	how do you launch xorg?
Feb 20 21:39:21 <HumbleGuy>	you think the DE sourses it differently?
Feb 20 21:39:24 <Pikk3wyn>	do you use startx or a DM?
Feb 20 21:39:30 <HumbleGuy>	yes, gdm
Feb 20 21:39:54 <Pikk3wyn>	your display manager launches by itself, so it doesnt have your shell env
Feb 20 21:40:08 <Pikk3wyn>	and xorg starts from the display manager as opposed to your shell
Feb 20 21:40:34 <greycat>	You claim it's a script.  Is it really?  It must have a #! header and have +x permissions.
Feb 20 21:40:34 <Pikk3wyn>	I'd recommend to add it to the display manager env, or possibly the child xorg env
Feb 20 21:41:01 <Pikk3wyn>	you can accomplish this maybe using .profile, or by using an altered xinit, or just with gdm itself
Feb 20 21:41:18 <HumbleGuy>	oh it doesnt have a header but it has +x perimssions greycat
Feb 20 21:41:23 <greycat>	If it has those two things, and if your GUI launcher runs it by absolute pathname, then it should run.  Remember that it won't have a controlling terminal.
Feb 20 21:41:25 <HumbleGuy>	but in terminal it opens perfectly fine
Feb 20 21:41:26 <Pikk3wyn>	im pretty sure you can change env/export vars in some config tho i don't use gdm
Feb 20 21:41:39 <Pikk3wyn>	HumbleGuy: your terminal executes the .bashrc
Feb 20 21:41:43 <Pikk3wyn>	so PATH is as you want
Feb 20 21:41:46 <HumbleGuy>	oh so I should export the PATH to .profile instead
Feb 20 21:41:53 <greycat>	gdm does not read .profile
Feb 20 21:41:59 <Pikk3wyn>	i am not sure if it reads .profile
Feb 20 21:42:03 <Pikk3wyn>	that was example
Feb 20 21:42:06 <greycat>	.bashrc is not relevant here.  your GUI launcher won't read that.
Feb 20 21:42:10 <Pikk3wyn>	ja
Feb 20 21:42:28 <greycat>	PATH is not relevant as long as you use the full path *in* the launcher, and why wouldn't you
Feb 20 21:42:40 <bprompt>	HumbleGuy: right, as greycat said, hmmm I dump many of my shortcuts .sh files at $HOME/bin and to my desktop manager I simply give it the full path on key bindings
Feb 20 21:42:58 <Pikk3wyn>	you can just change the xinit
Feb 20 21:43:19 <Pikk3wyn>	there is still an xinitrc (maybe called xsetup in this idk) that executes when you start the session
Feb 20 21:43:31 <Pikk3wyn>	or, basically all display managers work like this so i assume it does
Feb 20 21:43:45 <Pikk3wyn>	you can just make a custom one that sets your custom PATH and exports it
Feb 20 21:43:52 <greycat>	It depends on the operating system, the display manager, and possibly configuration choices.
Feb 20 21:43:59 <Pikk3wyn>	ja
Feb 20 21:44:11 <greycat>	Stop building things that rely on assumptions about what random DMs will do.
Feb 20 21:44:18 <HumbleGuy>	ohh, let me try that
Feb 20 21:44:31 <Soliton>	if the script has no proper shebang it's not executable.
Feb 20 21:44:39 <Pikk3wyn>	greycat: to be fair, I cannot think of a single DM that does not support this
Feb 20 21:44:52 <Soliton>	bash will run the script with itself as a fallback.
Feb 20 21:45:10 <greycat>	as far as "but it works in bash", that's because when bash tries to run a thing that gives exec format error, bash will open the file, read 128 bytes, and if there are no NUL bytes, bash will treat it like a script, and launch a subshell to read it
Feb 20 21:45:17 <greycat>	but GUI launchers will not do that
Feb 20 21:45:42 <Pikk3wyn>	gdm definitely works like this, I just don't know how the scripts are named or where to set a custom one
Feb 20 21:46:09 <greycat>	works like what?
Feb 20 21:46:25 <Pikk3wyn>	runs some form of startup script for the session
Feb 20 21:46:50 <greycat>	In Debian, there is .xsessionrc (not .xsession) which even gdm3 will read.  But that's Debian.
Feb 20 21:47:09 <greycat>	In general, it's a fucking mess.
Feb 20 21:47:22 <Pikk3wyn>	i agree
Feb 20 21:47:40 <Pikk3wyn>	i don't bother with a DM, tho I am leaning towards trying 'ly
Feb 20 21:47:49 <greycat>	I don't either.  I use startx.
Feb 20 21:47:54 <Pikk3wyn>	ja
Feb 20 21:48:06 <Pikk3wyn>	it's only a few lines to setup session so why bother with the rest
Feb 20 21:48:22 <HumbleGuy>	i just inserted the shebag and mentioned full path in the shortcut command
Feb 20 21:48:39 <HumbleGuy>	#!/bin/bash
Feb 20 21:48:46 <Pikk3wyn>	as opposed to?
Feb 20 21:48:47 <HumbleGuy>	but still it doesnt open up
Feb 20 21:48:54 <Pikk3wyn>	open how
Feb 20 21:49:00 <Pikk3wyn>	are you expecting a terminal to pop?
Feb 20 21:49:05 <HumbleGuy>	no, the image
Feb 20 21:49:11 <Pikk3wyn>	what is the exact command
Feb 20 21:49:16 <HumbleGuy>	the script contains a simple line with 'feh'
Feb 20 21:49:21 <Pikk3wyn>	what line
Feb 20 21:49:24 <Pikk3wyn>	feh can be finnicky
Feb 20 21:49:30 <HumbleGuy>	#!/bin/bash
Feb 20 21:49:31 <HumbleGuy>	feh /home/george/.config/scripts/orar/5vineri.png
Feb 20 21:49:41 <bprompt>	HumbleGuy: may be give us a pastebin look on the script and its path
Feb 20 21:49:53 <HumbleGuy>	and the script is located in ~/.local/bin/
Feb 20 21:50:12 <HumbleGuy>	bprompt this is everything the script contains
Feb 20 21:50:51 <HumbleGuy>	echo $PATH
Feb 20 21:50:52 <HumbleGuy>	~/.local/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/lib/jvm/default/bin
Feb 20 21:51:05 <Pikk3wyn>	HumbleGuy: try have the script do:
Feb 20 21:51:06 <Pikk3wyn>	lol
Feb 20 21:51:11 <Pikk3wyn>	wat
Feb 20 21:51:17 <Pikk3wyn>	how is /bin not in $PATH
Feb 20 21:51:24 <HumbleGuy>	umm, idk
Feb 20 21:51:30 <tirnanog>	not needed on a systemd distro, really.
Feb 20 21:51:38 <tirnanog>	or, rather, ones that have undergone a /usr merge.
Feb 20 21:51:57 <greycat>	on some systems, /bin is a legacy symlink to /usr/bin
Feb 20 21:51:58 <tirnanog>	everything is in /usr/bin in Arch.
Feb 20 21:51:59 <Pikk3wyn>	not important tho cos you used full path anyway
Feb 20 21:52:09 <Pikk3wyn>	tirnanog: ja, it's beautiful
Feb 20 21:52:16 <Pikk3wyn>	was just interesting
Feb 20 21:52:16 <tirnanog>	and I can see that's Arch because I'm a smartarse.
Feb 20 21:52:18 <bprompt>	hmmm which is most I think, I've seen bin in /usr/bin from a long time ago
Feb 20 21:52:22 <Pikk3wyn>	HumbleGuy: xterm -- feh /home/george/.config/scripts/orar/5vineri.png
Feb 20 21:52:35 <greycat>	recent Debian has merged /usr as well
Feb 20 21:52:39 <HumbleGuy>	tirnanog how did you know
Feb 20 21:52:44 <greycat>	hobbit:~$ ls -ld /bin
Feb 20 21:52:44 <greycat>	lrwxrwxrwx 1 root root 7 Feb 17 12:28 /bin -> usr/bin/
Feb 20 21:52:45 <Pikk3wyn>	xterm '-- feh /home/george/.config/scripts/orar/5vineri.png; read'
Feb 20 21:52:52 <tirnanog>	greycat: did they go all the way now? /sbin and all?
Feb 20 21:52:53 <Pikk3wyn>	xterm -- 'feh /home/george/.config/scripts/orar/5vineri.png; read'
Feb 20 21:52:57 <Pikk3wyn>	or some crap like that
Feb 20 21:53:03 <greycat>	lrwxrwxrwx 1 root root 8 Feb 17 12:28 /sbin -> usr/sbin/
Feb 20 21:53:07 <tirnanog>	ah.
Feb 20 21:53:08 <Pikk3wyn>	so you can atleast see the error if applicable
Feb 20 21:53:43 <HumbleGuy>	are you sure its correct command Pikk3wyn?
Feb 20 21:53:50 <Pikk3wyn>	because at this point if it's not showing the image, there is some issue either with it executing at all, or with feh
Feb 20 21:53:51 <greycat>	Pikk3wyn: xterm -e feh ...
Feb 20 21:53:52 <HumbleGuy>	xterm: bad command line option
Feb 20 21:53:59 <Pikk3wyn>	greycat: thanks :)
Feb 20 21:54:06 <Pikk3wyn>	HumbleGuy: with xterm -e
Feb 20 21:54:09 <greycat>	but if you really want that ";read" you will need a shell
Feb 20 21:54:17 <Pikk3wyn>	tru leme make a new line
Feb 20 21:54:22 <HumbleGuy>	ok so it works with xterm
Feb 20 21:54:29 <Pikk3wyn>	oh?
Feb 20 21:54:34 <Pikk3wyn>	what happens
Feb 20 21:54:48 <HumbleGuy>	the image opens up )
Feb 20 21:54:57 <Pikk3wyn>	tf
Feb 20 21:55:08 <HumbleGuy>	but when I do Shift+Super+1 it doesnt
Feb 20 21:55:08 <Pikk3wyn>	so feh must not be executing before im guessing
Feb 20 21:55:50 <HumbleGuy>	wdym must not be executing
Feb 20 21:55:50 <bprompt>	or "feh" is not in "$PATH" as seen by the desktop manager
Feb 20 21:56:21 <Pikk3wyn>	HumbleGuy: feh must not be executing properly, i am guessing it is not in PATH
Feb 20 21:56:24 <tirnanog>	if you want to know: exec 2>>"$HOME/feh-wrapper.log"; set -x; ...
Feb 20 21:56:59 <HumbleGuy>	what is with that ...
Feb 20 21:57:09 <greycat>	to see if the thing is actually running
Feb 20 21:57:10 <tirnanog>	that would be where you run feh, as you are presently.
Feb 20 21:57:12 <tirnanog>	in your script.
Feb 20 21:57:34 <tirnanog>	add this to your script, on other words.
Feb 20 21:57:34 <bprompt>	HumbleGuy: do a "whereis feh" to check its path
Feb 20 21:57:41 <greycat>	type -a feh
Feb 20 21:58:08 <HumbleGuy>	`/usr/bin/feh /usr/share/feh /usr/share/man/man1/feh.1.gz
Feb 20 21:58:28 <greycat>	maybe do an "env > ~/env.log" in the script as well
Feb 20 21:58:50 <Pikk3wyn>	(set -x; &>~/fehlog.txt feh /home/george/.config/scripts/orar/5vineri.png) &>~/trace.txt
Feb 20 21:59:39 <HumbleGuy>	Pikk3wyn your command opens it up
Feb 20 21:59:48 <Pikk3wyn>	ehhhhhhhhh
Feb 20 22:00:00 <Pikk3wyn>	is the subshell reading bashrc or something????
Feb 20 22:00:02 <Pikk3wyn>	what in tf
Feb 20 22:00:04 <Pikk3wyn>	oh wait
Feb 20 22:00:09 <HumbleGuy>	env log: https://0x0.st/H5ik.log
Feb 20 22:00:17 <Pikk3wyn>	maybe its a bg thing
Feb 20 22:00:32 <Pikk3wyn>	HumbleGuy: try your old regular feh but add & after?
Feb 20 22:00:37 <Pikk3wyn>	or just put in a subshell?
Feb 20 22:01:11 <Pikk3wyn>	surely the subshell should have same env
Feb 20 22:01:13 <HumbleGuy>	Pikk3wyn what do you refer to by old regular feh
Feb 20 22:01:24 <Pikk3wyn>	just feh /path/img.png
Feb 20 22:01:28 <Pikk3wyn>	but add & after
Feb 20 22:01:47 <Pikk3wyn>	if that doesnt work, try (feh /path/.../img.png)
Feb 20 22:01:55 <HumbleGuy>	it works
Feb 20 22:02:03 <Pikk3wyn>	ah
Feb 20 22:02:16 <Pikk3wyn>	it didn't background the child process
Feb 20 22:02:21 <Pikk3wyn>	goddamn it lmao
Feb 20 22:02:29 <Pikk3wyn>	it wasnt even any path issue or anything at all
Feb 20 22:02:42 <Pikk3wyn>	it literally just didnt background the child XD
Feb 20 22:03:02 <Pikk3wyn>	good heavens hehe
Feb 20 22:03:07 <Pikk3wyn>	well, i'm glad its sorted
Feb 20 22:03:44 <Pikk3wyn>	watch out btw feh will write a .fehbg unless you use --no-fehbg
Feb 20 22:04:10 <Pikk3wyn>	not sure if it only does with --bg-*
Feb 20 22:04:59 <HumbleGuy>	this is what is in my .fehbg #!/bin/sh
Feb 20 22:05:00 <HumbleGuy>	feh --no-fehbg --bg-fill '/home/george/Wallpapers/building.png'
Feb 20 22:05:14 <Pikk3wyn>	ok sweet it didn't overwrite
Feb 20 22:05:39 <Pikk3wyn>	watch tho that you keep a backup fehbg incase it overwrites and you lose which file it was
Feb 20 22:05:52 <Pikk3wyn>	sounds crazy but it's happened to me too many times over the years lol
Feb 20 22:06:07 <Pikk3wyn>	HumbleGuy: what DE are you using
Feb 20 22:08:00 <HumbleGuy>	budgie desktop
Feb 20 22:08:35 <HumbleGuy>	maybe its problem of gdm
Feb 20 22:10:58 <HumbleGuy>	whoops did you guy say something?
Feb 20 22:11:19 <bprompt>	nope yet
Feb 20 22:12:20 <HumbleGuy>	https://wiki.archlinux.org/title/environment_variables#Per_Xorg_session
Feb 20 22:12:27 <HumbleGuy>	what about this
Feb 20 22:13:37 <greycat>	are you on Arch?
Feb 20 22:14:18 <HumbleGuy>	yes
Feb 20 22:14:32 <HumbleGuy>	how do I write in ~/.config/environment.d/envvars.conf to source .bashrc
Feb 20 22:16:25 <tirnanog>	you don't. systemd doesn't read such files using a shell, nor execute shell code.
Feb 20 22:16:56 <tirnanog>	though the syntax is superficially similar.
Feb 20 22:17:05 <HumbleGuy>	but its written in the wiki
Feb 20 22:17:28 <tirnanog>	what is?
Feb 20 22:17:46 <HumbleGuy>	https://wiki.archlinux.org/title/environment_variables#Per_Xorg_session
Feb 20 22:18:09 <greycat>	Are you trying to obtain the Holy Grail?  A way to configure your login environment that works on ANY system, ANY login method, ANY init system, ANY shell?  It doesn't exist.  There is no Grail.  It is a hopeless quest.
Feb 20 22:18:57 <tirnanog>	I see nothing there implying that systemd will source and evaluate shell code in the course of applying environtment.d files (which it won't).
Feb 20 22:19:06 <greycat>	In practice, you will end up needing to write 2-3 different files that possibly all source (or dot in) one master file, and that will just cover the method you personally use on ONE system.
Feb 20 22:19:49 <greycat>	There are a lot of things out there that LOOK like they might offer you the Grail, but they are all lies.  pam.d's /etc/environment is one.  systemd's environment.d is another.
Feb 20 22:20:34 <greycat>	(I meant pam_env's /etc/environment there)
Feb 20 22:20:56 <HumbleGuy>	so in conclusion, what tf do I do now
Feb 20 22:21:21 <tirnanog>	at best, you could invert the premise, by sourcing environment.d files from a bash dotfile. you would need to avoid any features of the shell that stray outside of the syntax defined by environment.d(5), however.
Feb 20 22:21:33 <tirnanog>	all that said, I wasn't following from the beginning, so not sure what the goal is.
Feb 20 22:21:59 <greycat>	I think the initial goal was "I want to configure my GUI so that when I press a certain key combo, it runs a script that I wrote".
Feb 20 22:22:11 <greycat>	I don't know whether that goal has been solved.
Feb 20 22:22:46 <HumbleGuy>	no it wasnt
Feb 20 22:22:59 <HumbleGuy>	basically I want a image to open up when i press a combo on keyboard
Feb 20 22:23:33 <greycat>	So you've got a script, which has a shebang and +x, right?  And you've put commands in it to log the fact that it gets executed?  Does it get executed?
Feb 20 22:23:51 <HumbleGuy>	yes, it executes perfectly from cli
Feb 20 22:23:58 <HumbleGuy>	its just the gui that's dumb
Feb 20 22:24:03 <greycat>	Does it get executed when you press the magic keys?
Feb 20 22:24:09 <tirnanog>	so you still haven't checked a trace in the relevant context.
Feb 20 22:24:13 <HumbleGuy>	tf is a magic key
Feb 20 22:24:20 <greycat>	whatever the fuck you are configuring
Feb 20 22:24:28 <tirnanog>	don't be obtuse. the key that invokes the script, obviously.
Feb 20 22:25:12 <HumbleGuy>	unfortunately, the magic keys are not magicing
Feb 20 22:25:19 <greycat>	I think you mentioned shift-super-1 or something, though I've never personally seen a keyboard with a Super key
Feb 20 22:26:04 <greycat>	If your magic key combo does not EXECUTE the script at all, then the problem is in your GUI configs.
Feb 20 22:26:16 <tirnanog>	do what I said earlier, make sure all prior logging files exist, then issue the key combo.
Feb 20 22:26:29 <tirnanog>	if the log file springs into existence, you know it's executing at least, regardless of what it contains.
Feb 20 22:26:54 <tirnanog>	rather, make sure all prior logging files have been removed.
Feb 20 22:27:09 <HumbleGuy>	wait, ill do a X restart real quick
Feb 20 22:30:16 <HumbleGuy>	ok so i moved the script to /usr/bin and now the gui executes it fine
Feb 20 22:30:30 <HumbleGuy>	the problem is the new path isnt detected
Feb 20 22:30:36 <tirnanog>	where was it prior?
Feb 20 22:30:49 <HumbleGuy>	~/.local/bin
Feb 20 22:31:07 <HumbleGuy>	where does the login manager source the variables,
Feb 20 22:31:11 <Soliton>	just bind to the complete path.
Feb 20 22:31:12 <tirnanog>	have your script write out env and execute it in the APPROPRIATE context.
Feb 20 22:31:24 <tirnanog>	by using the key combo again.
Feb 20 22:31:24 <HumbleGuy>	wdym
Feb 20 22:31:36 <tirnanog>	env > ~/env.log
Feb 20 22:31:45 <HumbleGuy>	ok
Feb 20 22:31:47 <tirnanog>	but launch it with your keyboard shortcut
Feb 20 22:32:33 <bprompt>	HumbleGuy: or just provide an absolute path to the image
Feb 20 22:32:44 <Soliton>	s/image/script/
Feb 20 22:32:50 <HumbleGuy>	https://0x0.st/H5--.log
Feb 20 22:32:58 <tirnanog>	PATH=/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/usr/lib/rustup/bin
Feb 20 22:33:01 <tirnanog>	that explains it.
Feb 20 22:33:18 <HumbleGuy>	yeah, apparently it doesnt source
Feb 20 22:33:24 <tirnanog>	which display manager do you use?
Feb 20 22:33:27 <tirnanog>	if any.
Feb 20 22:33:39 <HumbleGuy>	Mutter (budgie desktop)
Feb 20 22:33:46 <tirnanog>	that's not a display manager.
Feb 20 22:33:49 <tirnanog>	is it gdm?
Feb 20 22:33:59 <HumbleGuy>	oh sorry
Feb 20 22:34:02 <HumbleGuy>	gdm yes
Feb 20 22:34:03 <tirnanog>	gdm respects ~/.profile, iirc.
Feb 20 22:34:12 <greycat>	On *some* systems it might.
Feb 20 22:34:12 <HumbleGuy>	oh
Feb 20 22:34:32 <tirnanog>	ok. well, I think it does on this platform. I don't feel like proving it myself right now.
Feb 20 22:34:44 <HumbleGuy>	what do I write in .profile? to source .bashrc?
Feb 20 22:34:59 <HumbleGuy>	or have separate path variables
Feb 20 22:35:00 <tirnanog>	if [ "$BASH" ] && [ -f ~/.bashrc ]; then . ~/.bashrc; fi
Feb 20 22:35:03 <tirnanog>	will do.
Feb 20 22:35:03 <bprompt>	HumbleGuy: I can tell  you what I do with my DM, which is LXQT for "global shortcuts", I dump my .sh files in $HOME/bin and since it's in $PATH, I just launch the FILENAME.sh from there, in the .sh file is #!/bin/bash and the command(s) and all the arguments, quoted as needed
Feb 20 22:35:05 <greycat>	test -r ~/.bashrc && . ~/.bashrc
Feb 20 22:35:18 <greycat>	tirnanog: ah, checking $BASH is also nice
Feb 20 22:35:19 <tirnanog>	it needs to be guarded for ~/.profile, really
Feb 20 22:35:21 <tirnanog>	yeah
Feb 20 22:35:43 <HumbleGuy>	bprompt hos is $HOME/bin in PATH, only you have this
Feb 20 22:35:49 <tirnanog>	so try doing that and altering PATH there instead.
Feb 20 22:35:54 <tirnanog>	then logging in again.
Feb 20 22:36:05 <Soliton>	all this to avoid writing the full path to the script?
Feb 20 22:36:06 <greycat>	Try not needing a special PATH when you launch these things with keys.
Feb 20 22:36:15 <bprompt>	HumbleGuy: yes, I added it in .bashrc
Feb 20 22:36:17 <greycat>	As we've said about 10 times nwo.
Feb 20 22:37:07 <tirnanog>	.bashrc is no good for such.
Feb 20 22:37:09 <HumbleGuy>	tirnanog I alter now the path from bashrc or profile
Feb 20 22:37:14 <tirnanog>	Soliton: not contesting it is a perfectly reasonable solution.
Feb 20 22:37:20 <tirnanog>	do _not_ use .bashrc to do it.
Feb 20 22:37:28 <tirnanog>	it absolutely won't help.
Feb 20 22:38:52 <HumbleGuy>	Soliton no full path wont solve this apparently
Feb 20 22:39:09 <tirnanog>	poor Soliton
Feb 20 22:39:12 <tirnanog>	:(
Feb 20 22:39:29 <tirnanog>	that actually hurt my brain.
Feb 20 22:39:35 <HumbleGuy>	tirnanog to make sure, This implies i write the PATH in .profile AND remove it from .bashrc for no repitition
Feb 20 22:39:47 <HumbleGuy>	tirnanog gotta keep that grey matter working
Feb 20 22:39:58 <bprompt>	HumbleGuy:  wait, I don't have it in .bashrc hmmm, it may be coming from /etc/profile
Feb 20 22:40:02 <tirnanog>	working, yes. atrophying, preferably not.
Feb 20 22:40:23 <tirnanog>	that is, it makes no sense whatsoever to say that specifying the full path to something doesn't solve it.
Feb 20 22:40:30 <tirnanog>	an absolute path suppresses PATH lookup.
Feb 20 22:40:51 <HumbleGuy>	oh so that doesnt make sense then
Feb 20 22:40:53 <tirnanog>	anyway, yes. if you're going to faff with PATH, try it in ~/.profile and nowhere else.
Feb 20 22:41:47 <HumbleGuy>	ill do a X restart again
Feb 20 22:41:59 <bprompt>	HumbleGuy: yeap, that's where I added ~/bin at ~/.profile  , mind you that I did a long long time ago
Feb 20 22:42:57 <Soliton>	maybe full path for them means ~/...
Feb 20 22:43:02 <tirnanog>	probably.
Feb 20 22:43:13 <tirnanog>	definitely not the sharpest tool in the shed, so to speak.
Feb 20 22:43:23 <Soliton>	humble though
Feb 20 22:43:44 <bprompt>	some DM well, depends on what's being run, don't like ~/, or $HOME,
Feb 20 22:44:41 <Soliton>	there should be little expectation that a random program supports ~ like a shell.
Feb 20 22:45:04 <cappy>	Trying to locate ELF objects in a project hierarchy with this:
Feb 20 22:45:04 <Soliton>	there certainly are some that do though.
Feb 20 22:45:08 <cappy>	find . -exec file {} \; | grep -i elf | awk '{print $1}'
Feb 20 22:45:36 <tirnanog>	it will be horrifying slow and clunky. do yourself a favour and install pax-utils for scanelf.
Feb 20 22:45:52 <HumbleGuy>	Apparently my gdm login is not working anymore
Feb 20 22:45:55 <HumbleGuy>	Wtf happened
Feb 20 22:45:56 <bprompt>	wb HumbleGuy
Feb 20 22:45:56 <cappy>	Is there a better tool? Specifically, I'm using Rust cargo(1) and the --release option removes too much.
Feb 20 22:46:16 <tirnanog>	scanelf(1)
Feb 20 22:46:29 <bprompt>	HumbleGuy: yeap, that's where I added ~/bin at ~/.profile  , mind you that I did a long long time ago
Feb 20 22:46:39 <cappy>	tirnanog: pax-utils, yes. Thank you.
Feb 20 22:46:46 <Soliton>	HumbleGuy: how did you specify the full path?
Feb 20 22:47:00 <tirnanog>	cappy: take a look at its formatting options too (-F)
Feb 20 22:47:02 <bprompt>	HumbleGuy: gdm login not working?
Feb 20 22:47:14 <cappy>	tirnanog: Will do. Tks.
Feb 20 22:47:25 <tirnanog>	cappy: the only bad thing about it is that it can't produce NUL-delimited output, so pathnames containing $'\n' shouldn't be fed to it.
Feb 20 22:47:32 <HumbleGuy>	No, the password is not working for gdm
Feb 20 22:47:41 <HumbleGuy>	Tyy still can login
Feb 20 22:47:50 <cappy>	tirnanog: Appreciate the pointer.
Feb 20 22:48:48 <tirnanog>	HumbleGuy: did you lock yourself out by any chance? faillock
Feb 20 22:49:09 <HumbleGuy>	Yes, but i got acces to tty
Feb 20 22:49:11 <tirnanog>	(that's a utility)
Feb 20 22:49:28 <tirnanog>	I'm enquiring about the pam_lock mechanism specifically.
Feb 20 22:49:32 <HumbleGuy>	Why in the world would my password break
Feb 20 22:49:38 <tirnanog>	(sigh)
Feb 20 22:49:44 <tirnanog>	faillock
Feb 20 22:49:48 <tirnanog>	see if that prints anything.
Feb 20 22:50:00 <HumbleGuy>	It says valid
Feb 20 22:50:19 <tirnanog>	but doesn't show any user as being locked out?
Feb 20 22:50:26 <HumbleGuy>	No
Feb 20 22:50:39 <tirnanog>	not that then.
Feb 20 22:50:42 <HumbleGuy>	Do you still have the history? What did I do
Feb 20 22:50:45 <HumbleGuy>	I hate this
Feb 20 22:51:15 <tirnanog>	we don't know what you did. if you want for .profile to be reviewed, you can pastebin it however.
Feb 20 22:51:35 <tirnanog>	pacman -S --needed openbsd-netcat && nc termbin.com 9999 < ~/.profile
Feb 20 22:52:05 <tirnanog>	well
Feb 20 22:52:13 <tirnanog>	pacman will need root privs so do that separately.
Feb 20 22:52:24 <tirnanog>	point is, you can use nc to pastebin your personal ~/.profile
Feb 20 22:52:52 <HumbleGuy>	https://0x0.st/H5-c.txt
Feb 20 22:53:36 <tirnanog>	that syntax is perfectly legit.
Feb 20 22:53:45 <tirnanog>	I don't know what your issue is then.
Feb 20 22:54:03 <HumbleGuy>	I edited /etc/environment
Feb 20 22:55:01 <bprompt>	hmmm this is a stretch, if one "sudo" to edit the .profile, that may change the owner or its permissions
Feb 20 22:55:12 <HumbleGuy>	Its just export PATH="~/. local/bin:$PATH"
Feb 20 22:55:25 <HumbleGuy>	I didn't use sudo
Feb 20 22:55:31 <tirnanog>	that's not valid pam_environment syntax. get rid of it.
Feb 20 22:55:48 <tirnanog>	pam_env, even
Feb 20 22:56:07 <tirnanog>	(/etc/environment is also not processed by a shell)
Feb 20 22:56:27 <bprompt>	HumbleGuy: maybe with -> PATH="$HOME/. local/bin:$PATH"
Feb 20 22:56:32 <tirnanog>	please undo whatever other silly changes like that are that may have been made. ~/.profile is fine.
Feb 20 22:56:50 <tirnanog>	no. just get rid of it.
Feb 20 22:57:05 <HumbleGuy>	It still doesn't allow me to log jn tf
Feb 20 22:57:25 <HumbleGuy>	Do i also remove.profile?
Feb 20 22:57:58 <tirnanog>	the syntax is fine. if you want to rule it out for your own peace of mind, just rename it to something else.
Feb 20 22:58:06 <tirnanog>	like .profile.bak
Feb 20 22:58:52 <HumbleGuy>	Oh so after i removed .profile it allowed me to log in
Feb 20 22:59:07 <HumbleGuy>	Tf
Feb 20 22:59:10 <tirnanog>	in that case, can you also share ~/.bashrc?
Feb 20 22:59:13 <bprompt>	heheh
Feb 20 22:59:14 <tirnanog>	something doesn't add up.
Feb 20 22:59:29 <greycat>	... are people STILL looking for that Grail even after my speech?
Feb 20 22:59:39 <bprompt>	I'm guessing, and this is a stretch, it may just have been permissions change upon the editing to .profile
Feb 20 22:59:53 <Soliton>	i think they just didn't manage to specify the full path correctly.
Feb 20 23:00:22 <Soliton>	and then did all kinds of other nonsense to do it differently.
Feb 20 23:00:42 <tirnanog>	greycat: look on the bright side. it wasn't that long ago they were contemplating the imaginary sourcing of ~/.bashrc from environment.d context
Feb 20 23:00:53 <HumbleGuy57>	https://0x0.st/H5-2.txt
Feb 20 23:00:54 <greycat>	STOP trying to set your environment using system resources like /etc/environment.  It's a dead end.  It will not work.  Configure your GUI LAUNCHER to run the FULL PATH of the script.
Feb 20 23:01:00 <tirnanog>	there's also imaginary syntax in /etc/environment which has hopefully gone by now.
Feb 20 23:01:52 <HumbleGuy57>	greycat i tried that before and full path is just not doing anything
Feb 20 23:01:58 <HumbleGuy57>	maybe something like exec
Feb 20 23:02:04 <Soliton>	what is the full path?
Feb 20 23:02:09 <HumbleGuy57>	or wait, I could dirrectly insert
Feb 20 23:02:15 <tirnanog>	HumbleGuy57: ok. well, short of the file not being readable, I have no idea what happened there. it was valid sh syntax.
Feb 20 23:02:25 <greycat>	If the script needs to run commands that are not in a default location (like /usr/bin or /usr/local/bin) then either set PATH *inside* that script, or use full command paths inside the script.
Feb 20 23:02:36 <Soliton>	note that a full path does start with / not with ~/ or something.
Feb 20 23:02:36 <HumbleGuy57>	Soliton ~/.local/bin/orar-vineri
Feb 20 23:02:41 <HumbleGuy57>	that is full path
Feb 20 23:02:44 <Soliton>	nonsense...
Feb 20 23:02:46 <larryv>	:-/
Feb 20 23:02:59 <greycat>	That's a piece of shell syntax that might EXPAND to a full path.
Feb 20 23:03:15 <greycat>	But if you use that in a place that doesn't do tilde expansion, then it won't expand.
Feb 20 23:04:37 <HumbleGuy57>	i just tried the full /home/.. path and still nothing
Feb 20 23:04:48 <HumbleGuy57>	it reads values only from /usr/bin
Feb 20 23:04:59 <greycat>	... what "values" are you talking about?
Feb 20 23:05:12 <HumbleGuy57>	the executable*
Feb 20 23:05:22 <greycat>	also, "it reads" implies "it executed", so that's a positive
Feb 20 23:06:06 <Soliton>	i think they're just wildly guessing.
Feb 20 23:06:06 <HumbleGuy57>	yes
Feb 20 23:06:22 <greycat>	So when you say "and still nothing", you actually mean that the script executed, but ran into an error when it tried to run one specific command?
Feb 20 23:08:06 <HumbleGuy57>	I meant it didnt execute, but I tried writing full path again and it works...
Feb 20 23:08:18 <HumbleGuy57>	I assume the GUI is buggy af and didnt save
Feb 20 23:09:01 <greycat>	Yeah, right, the GUI must be buggy.  There's no way it could have been user error.
Feb 20 23:09:28 <Soliton>	humble af
Feb 20 23:09:55 <HumbleGuy57>	;9
Feb 20 23:10:51 <HumbleGuy57>	i apologize for confusion
Feb 20 23:11:33 <tirnanog>	unrelated but export PATH="~/.local/bin:$PATH" is wrong. I understand that it's commented out, but the syntax is wrong. the tilde would not be expanded there.
Feb 20 23:11:52 <tirnanog>	($HOME would work)
Feb 20 23:12:02 <ormaaj>	tirnanog: nope. bash is stupid.
Feb 20 23:12:06 <tirnanog>	oh, really.
Feb 20 23:12:08 <ormaaj>	yep
Feb 20 23:12:10 <greycat>	$HOME would work if this is a shell command.  Not in /etc/environment.
Feb 20 23:12:15 <ormaaj>	stupid/insane
Feb 20 23:12:30 <tirnanog>	ormaaj: explain then?
Feb 20 23:12:46 <greycat>	# PATH="~/x:$PATH"; declare -p PATH
Feb 20 23:12:47 <shbot>	greycat: declare -x PATH="~/x:/usr/bin:/bin"
Feb 20 23:13:00 <tirnanog>	what exactly am I getting wrong?
Feb 20 23:13:08 <greycat>	# export PATH="~/x:$PATH"; declare -p PATH
Feb 20 23:13:09 <shbot>	greycat: declare -x PATH="~/x:/usr/bin:/bin"
Feb 20 23:13:18 <greycat>	I don't think you're wrong.
Feb 20 23:13:19 <tirnanog>	nothing. ok.
Feb 20 23:15:24 <HumbleGuy57>	what is happening
Feb 20 23:17:08 <larryv>	that is what i've been wondering for the last 100 minutes or so
Feb 20 23:17:36 <ormaaj>	# mkdir tmp; printf '#!/usr/bin/env bash\necho hi' >~/tmp/durr; chmod u+x ~/tmp/durr; PATH+=:\~/tmp bash +O sourcepath -c durr
Feb 20 23:17:37 <shbot>	ormaaj: hi
Feb 20 23:19:21 <ormaaj>	I guess we are not sourcing here so that part is irrelevant but I normally disable that anyway
Feb 20 23:21:31 <HumbleGuy>	ormaaj: where did you learn this scripting skills? How do I go your path
Feb 20 23:21:57 <userdocss>	chatgpt
Feb 20 23:22:34 <tirnanog>	don't. just don't.
Feb 20 23:22:44 <greycat>	ormaaj is not the role model you should follow
Feb 20 23:22:58 <ormaaj>	don't go ormaaj's path :o
Feb 20 23:23:13 <emanuele6>	don't  cd ~ormaaj
Feb 20 23:23:36 <tirnanog>	I was thinking of chatgpt but now you mention it ... :D
Feb 20 23:24:02 <Angels>	Oh no..
Feb 20 23:24:07 <Angels>	Not again..
Feb 20 23:24:09 <greycat>	So, I believe you're saying that a literal ~ inside PATH will be expanded by bash when searching for commands, not that X="~/Y" will expand the tilde.
Feb 20 23:24:18 <ormaaj>	yes
Feb 20 23:24:22 <Angels>	I adore LLMs are prohibited in some chats like #php.
Feb 20 23:24:31 <Angels>	Thank you, #php.
Feb 20 23:25:04 <ormaaj>	bash basically has a custom execp (that certainly will disagree with that of libc)
Feb 20 23:26:30 <tirnanog>	yet another misfeature. damn and blast.
Feb 20 23:26:59 <ormaaj>	spoiler - Chet doesn't care. Surprise.
Feb 20 23:27:15 <tirnanog>	right. of course.
Feb 20 23:28:11 <larryv>	# echo 'echo hi' >foo; chmod +x foo; PATH='~'; foo
Feb 20 23:28:12 <shbot>	larryv: hi
Feb 20 23:28:16 <larryv>	# echo 'echo hi' >foo; chmod +x foo; PATH='~' foo
Feb 20 23:28:18 <shbot>	larryv: hi
Feb 20 23:28:30 <larryv>	# echo 'echo hi' >foo; chmod +x foo; set -o posix; PATH='~' foo
Feb 20 23:28:31 <shbot>	larryv: bash: foo: command not found
Feb 20 23:28:52 <ormaaj>	ahahaha
Feb 20 23:29:31 <larryv>	oops, thought this was the shbot PM. but was gonna drop that in here anyway, so it worked out
Feb 20 23:29:47 <JAA>	Nice
Feb 20 23:29:56 <tirnanog>	not even remotely nice.
Feb 20 23:34:48 <larryv>	i guess that's #19? i like the features that are only documented by way of POSIX mode turning them off https://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
Feb 20 23:35:45 <ormaaj>	yeah I didn't even know posix mode affected it
Feb 20 23:40:28 <userdocss>	tirnanog: copilot autocomplete is an adventure.
Feb 20 23:42:15 <tirnanog>	a curious mispelling of aberration, perhaps.
Feb 20 23:46:48 <userdocss>	it's ok, it's are learning from my code, you have nothing to fear.
Feb 20 23:47:32 <ormaaj>	kurahaupo:
Feb 20 23:47:40 <ormaaj>	(ins)ormaaj 10 (586072) 0 ~/doc/programs/zsh-code $ zsh --emulate ksh /proc/self/fd/9 9<<\EOF
Feb 20 23:47:40 <ormaaj>	function f { typeset -n x=$1; print -r -- "${| typeset IFS=$'\U2022'; printf -v REPLY '%s ' "${!x}" "${x[*]}";}"; }
Feb 20 23:47:40 <ormaaj>	function _m { typeset -a a=({a..c}{1..3}); f a; }; _m "$@"
Feb 20 23:47:40 <ormaaj>	EOF
Feb 20 23:47:40 <ormaaj>	a a1•a2•a3•b1•b2•b3•c1•c2•c3
Feb 21 00:02:31 <ormaaj>	greycat jelly
**** BEGIN LOGGING AT Wed Feb 21 00:53:37 2024

Feb 21 00:53:37 *	Now talking on #bash
Feb 21 00:53:37 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 21 00:53:37 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 21 02:41:40 <lockywolf>	Is there some straightforward way to exit a script with meaningful error codes? Like  exit $EAGAIN , where EAGAIN is whatever EAGAIN is on current system?
Feb 21 02:46:56 <arraybolt3>	if a subcommand fails and you know it's because of an EAGAIN, you could store its return value in a variable and then exit with that?
Feb 21 02:47:10 <arraybolt3>	er, a command you ran within your script
Feb 21 02:47:41 <arraybolt3>	I'm not used to errors like that being *process* return values though. Those are more like C error codes, no?
Feb 21 02:48:04 <arraybolt3>	usually you define what error codes mean in your documentation and then stick to whatever those meanings are
Feb 21 02:48:39 <arraybolt3>	usually something like 0 = success, 1 = partial failure, 2 = total failure, 127 = severe initialization error, etc. document all those so that people who use your script or program know what they mean
Feb 21 02:48:56 <larryv>	they are errno values, yes. lockywolf is conflating them with exit values.
Feb 21 02:55:50 <pj>	I don't know of a pure-bash way but you can get them from another language such as perl and then use it in a bash exit code.
Feb 21 02:56:59 <larryv>	i'm not even sure why you'd want to do that. the script probably cannot reliably determine which errno applies to any particular problem
Feb 21 02:58:28 <pj>	indeed, any other calling script owuld need a similar mechanism to know what the returned value means.
Feb 21 02:59:17 <lockywolf>	I know the difference between error codes and errnos. And I am aware that error codes are not standardized beyond 0=success. But using errno statuses as exit codes is better than nothing. At least some kind of standard.
Feb 21 02:59:52 <larryv>	not really
Feb 21 03:00:00 <lockywolf>	Also, dcron uses the exit status of EAGAIN to restart failed tasks, so I am not the first one to consider this.
Feb 21 03:00:06 <pj>	Honestly if you want your error numbers to match those in error.h then just look up the ones you want in your errno.h and document them as exit codes for your script.
Feb 21 03:00:08 <larryv>	using the errno.h values is no better than making up and documenting your own exit values
Feb 21 03:01:08 <larryv>	it's feasible for a real program to do this. not a shell script
Feb 21 03:02:53 <larryv>	any given utility it calls probably fails with an exit status of 1, providing no information
Feb 21 03:03:17 <tirnanog>	the numbers aren't portable anyway.
Feb 21 03:03:31 <tirnanog>	they're just magic numbers.
Feb 21 03:03:49 <JAA>	Just implement an errno.h parser. ;-)
Feb 21 03:13:07 <pj>	if you must, and you have perl on your system you can do this: errno () { perl -MErrno -le 'print ${$Errno::{$ARGV[0]}}' "$1"; }
Feb 21 03:13:51 <twkm>	i'm surprised no mentionn of moreutils.
Feb 21 03:14:17 <JanC>	I was just about to mention it  :)
Feb 21 03:14:25 <nightstrike>	is there an easy to do a grep -v with context? I need to remove a matching line, one line after, and two lines before
Feb 21 03:14:25 <pj>	no idea how to do it with moreutils
Feb 21 03:14:42 <nightstrike>	or sed or awk or whatever
Feb 21 03:14:49 <nightstrike>	or native bash :)
Feb 21 03:14:51 <twkm>	use awk or perl or ... not grep.
Feb 21 03:15:03 <twkm>	bash can do it too, but slowly.
Feb 21 03:18:30 <JanC>	https://manpages.org/errno from moreutils
Feb 21 03:18:50 <nightstrike>	I was trying something like `./program | grep XX -C1 | grep -v -f -`
Feb 21 03:19:02 <nightstrike>	(I'll fix the C1 when I get something working)
Feb 21 03:19:16 <lockywolf>	twkm: thanks!
Feb 21 03:19:22 <lockywolf>	errno is fairly brilliant
Feb 21 03:20:07 <lockywolf>	I am using sponge and ts from it quite a lot.
Feb 21 03:20:25 <lockywolf>	ts has a leak somewhere, and sometimes hangs, but is still useful
Feb 21 03:26:30 *	bent_fingers mourns for all those electrons who sacrificied their lives in the making of bash
Feb 21 03:27:06 <bent_fingers>	how many bytes of code were thrown away!?
Feb 21 03:28:50 <bent_fingers>	we've all got nuclear blood on our hands
Feb 21 03:29:29 <lockywolf>	bash is a nice tool
Feb 21 03:29:40 <bent_fingers>	have you ever used it?
Feb 21 03:30:56 <bent_fingers>	once you go bash you never go back
Feb 21 03:31:55 <bent_fingers>	i doubt anyone has ever really used bash
Feb 21 03:34:23 <golu8>	Have you guys had experienced with Eshell?
Feb 21 03:38:08 <kurahaupo>	lockywolf: you can't simply exit with an errno value, you'll wind up conflicting with different expected usage. In any case the semantics of an entire program are much more nuanced than a single syscall: for example, ENOENT would be quite unhelpful if you don't know which file path caused it. If you're just looking for "something more standardized", look at #include <sysexits.h>
Feb 21 03:42:28 <lockywolf>	kurahaupo: thank you!
Feb 21 03:42:49 <twkm>	heh, sendmail to the rescue.
Feb 21 03:43:19 <twkm>	golu8: i usually start a full shell rather than emacs' eshell.
Feb 21 03:43:26 <kurahaupo>	exit codes 126 thru 160-ish are consistently used by shells to indicate either failure to launch a program or that it died due to a signal; if you used 127 as "initialisation error" you'd probably confuse people. Codes 64-80 are defined by sysexits.h (though few new programs use them, on account of posix specifying that standard utilities must use 0/1/2, and everyone else just copying that).
Feb 21 03:45:37 <kurahaupo>	Exit code 255 often means "the programmer didn't read the man page for "exit" and assumed they could write exit(-1), d'oh!"
Feb 21 03:51:57 <bent_fingers>	if you stand for bash you stand for all shells
Feb 21 03:52:05 <bent_fingers>	except for powershell
Feb 21 03:52:40 <twkm>	it isn't a posix shell but it is a lot closer than cmd.
Feb 21 03:56:16 <nightstrike>	I'm not getting closer...   `./program |& sed -e'1N;$!N;/\n.*match/,+2d;!P;D'`
Feb 21 03:57:48 <nightstrike>	if only grep -A1 -B2 -v match worked
Feb 21 04:03:30 <nightstrike>	ok, so...  `sed -e '/match/,+1d'` deletes the match and the next two...   `sed -e 'N;/match/!P;D'` deletes the match and the one before....   just gotta combine these somehow
Feb 21 04:04:41 <nightstrike>	ah, and I'm backwards.. I need 2 prev and 1 after
Feb 21 04:08:16 <ormaaj>	those generally aren't useful without labels and loops
Feb 21 04:08:29 <ormaaj>	if you need loops quit using sed
Feb 21 04:12:18 <ormaaj>	unless you're isabella and need a cube simulator.
Feb 21 04:12:49 <ormaaj>	sed is evidently the best tool for that
Feb 21 04:13:14 <tirnanog>	just use ed like a chad.
Feb 21 04:13:22 <tirnanog>	printf %s\\n 'g/match/-2,+1d' ,p  | ed -s <(./program)
Feb 21 04:14:04 <tirnanog>	or <(./program 2>&1) going by your use of |&
Feb 21 04:15:04 <tirnanog>	# printf %s\\n 'g/^5$/-2,+1d' ,p  | ed -s <(printf %s\\n {1..10}) | xargs
Feb 21 04:15:06 <shbot>	tirnanog: 1 2 7 8 9 10
Feb 21 04:17:51 <kurahaupo>	nightstrike: what do you expect !P to do?
Feb 21 04:18:12 <nightstrike>	no idea, I was copying SO answers :P
Feb 21 04:18:40 <ormaaj>	Can ex do programmatic replacements without injecting a string into an expression?
Feb 21 04:18:53 <nightstrike>	I'm down a rabbit hole currently with /begin/,/end/ matching now, though I would need /begin/ to restart when it hits a new /begin/ without hitting an /end/ yet
Feb 21 04:19:22 <nightstrike>	ormaaj: what's a cube simulator?
Feb 21 04:19:33 <kurahaupo>	nightstrike: have you read the manual for sed?
Feb 21 04:19:43 <kurahaupo>	"man sed"
Feb 21 04:21:59 <ormaaj>	https://github.com/izabera/cube
Feb 21 04:22:22 <kurahaupo>	nightstrike: any time you have a two-address command, it operates as a bistable ("flip flop"), turning on when the first condition is met, then turning off after the second condition is met
Feb 21 04:22:37 <kurahaupo>	ormaaj: yep, that's awesome
Feb 21 04:23:47 <kurahaupo>	ormaaj: next challenge: write a single regex to match a decimal number that's a multiple of seven?
Feb 21 04:25:36 <ormaaj>	!dephyer
Feb 21 04:25:36 <greybot>	# seq 9 | sort -R | tee >({ tr \\n ' '; echo; } >&2) | sed -Ee 'y/zwixuvoenrf/02654718935/;s/th?|51|s8?//;s/(.).*/\1     /' | tr \\n ' '; echo
Feb 21 04:25:38 <shbot>	greybot: nine three eight seven six one two four five
Feb 21 04:25:38 <shbot>	greybot: 9      3      8      7      6      1      2      4      5
Feb 21 04:32:44 <nvz>	o.O
Feb 21 04:37:01 <ormaaj>	I could have done a better job with the pipes
Feb 21 04:38:17 <bent_fingers>	# printf "%s " {1..100} | sed 's/[0-9]/echo/g'
Feb 21 04:38:18 <shbot>	bent_fingers: echo echo echo echo echo echo echo echo echo echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echo\
Feb 21 04:38:18 <shbot>	bent_fingers: echo echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho echoecho\
Feb 21 04:38:18 <shbot>	bent_fingers:  echoecho echoecho echoecho echoecho echoecho echoecho echoechoecho
Feb 21 04:39:13 <larryv>	k
Feb 21 04:39:43 <JAA>	Huh. I guess it only pastes for more than 4 messages?
Feb 21 04:39:59 <JAA>	The backslashes are a nice touch.
Feb 21 04:40:42 <bent_fingers>	something had to hold them up
Feb 21 04:40:50 <larryv>	# printf %s\\n {1..4}
Feb 21 04:40:52 <shbot>	larryv: 1
Feb 21 04:40:52 <shbot>	larryv: 2
Feb 21 04:40:52 <shbot>	larryv: etc... ( http://paste.wooledge.org/28734 )
Feb 21 04:41:09 <JAA>	Er, I meant 4 or more.
Feb 21 04:41:37 <tirnanog>	it counts lines, not 'messages'.
Feb 21 04:41:53 <tirnanog>	therein lies the problem in this instance.
Feb 21 04:42:04 <JAA>	Does it? So producing one very long line of output will just spam the channel for a long time?
Feb 21 04:42:34 <bent_fingers>	"the problem doesn't lie within bent_fingers" - tirnanog
Feb 21 04:43:06 <tirnanog>	interesting use of quotation marks there.
Feb 21 04:43:41 *	bent_fingers adds his newly received panegyric to his resume
Feb 21 04:45:03 <JAA>	tirnanog: Nope, it does count messages after splitting lines.
Feb 21 04:45:13 <JAA>	# for i in {1..500}; do printf %s\  echo; done
Feb 21 04:45:16 <shbot>	JAA: echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo \
Feb 21 04:45:16 <shbot>	JAA: echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo echo \
Feb 21 04:45:16 <shbot>	JAA: etc... ( http://paste.wooledge.org/28739 )
Feb 21 04:45:18 <tirnanog>	ffs
Feb 21 04:45:24 <tirnanog>	is this really necessary?
Feb 21 04:45:26 <emanuele6>	i knew that
Feb 21 04:45:42 <bent_fingers>	yours is better than mine 😔
Feb 21 04:45:53 <bent_fingers>	proper spacing
Feb 21 04:46:22 *	bent_fingers vows to avenge this defeat
Feb 21 04:46:24 <larryv>	doesn't really do the same thing.
Feb 21 04:46:31 <tirnanog>	time to update my filters.
Feb 21 04:47:21 <JAA>	Is disproving incorrect claims necessary? Yeah, I think so.
Feb 21 04:47:58 <tirnanog>	plonk
Feb 21 04:48:52 <emanuele6>	plunk
Feb 21 04:49:09 <JAA>	plönk
Feb 21 04:50:11 <emanuele6>	プロンク
Feb 21 04:51:08 <nvz>	ormaaj: I am still confused
Feb 21 04:52:17 *	nvz doesn't understand what just happened back there
Feb 21 04:52:46 <emanuele6>	if you are wondering how  one two three  etc got generated that is shbot's seq
Feb 21 04:52:56 <emanuele6>	# seq 1 9 | paste -s -
Feb 21 04:52:57 <shbot>	emanuele6: one     two     three   four    five    six     seven   eight   nine
Feb 21 04:53:07 <nvz>	yes, that part did confuse me the most
Feb 21 04:53:10 <emanuele6>	it outputs works instead of decimal
Feb 21 04:53:21 <emanuele6>	s/works/words/;s/decimal/&s/
Feb 21 04:53:59 <nvz>	but the whole bit of it totally confounded me.. I'm finding myself questioning reality after that :P
Feb 21 04:55:03 <nvz>	things like that are why I stay away from perl, now I'm suddenly afraid of bash.. cause I have little understanding about what happened there :P
Feb 21 04:55:37 <nvz>	that was black magic to me
Feb 21 04:55:56 <bent_fingers>	someone's a witch
Feb 21 04:56:30 <nvz>	yeah, I think I need to go get the towns people and we need to burn us a witch
Feb 21 04:56:37 *	bent_fingers removes black, wide-brimmed conical hat
Feb 21 04:57:08 <JAA>	There are some fun quirks in shbot where it doesn't do what you'd normally expect. :-)
Feb 21 04:57:54 <JAA>	# yes | head -1
Feb 21 04:57:55 <shbot>	JAA: n
Feb 21 04:58:25 <emanuele6>	# <<< '[hi]' rev
Feb 21 04:58:27 <shbot>	emanuele6: [ih]
Feb 21 05:00:02 <emanuele6>	also during april 1st UTC, it replaces anywhere in the output certain keywords (e.g. zzz, cat, cow) with the corresponding emoji
Feb 21 05:01:37 <JAA>	Oh, right!
Feb 21 05:03:00 <JAA>	Also smileys etc.
Feb 21 05:32:57 <brancher>	Damn shellcheck is nice!
Feb 21 05:34:42 <tanath>	add this and it's nicer https://github.com/itspriddle/vim-shellcheck
Feb 21 05:35:15 <han-solo>	!beer
Feb 21 05:35:27 *	brancher beers han-solo
Feb 21 05:35:40 <brancher>	tanath yeah I use VSC
Feb 21 05:36:15 <tanath>	still nicer :P
Feb 21 05:36:43 <larryv>	brancher: https://github.com/vscode-shellcheck/vscode-shellcheck
Feb 21 05:36:46 <brancher>	tanath there is not much in my code as I code pretty consistent and read a lot about the code. This is just the finish in touch for me
Feb 21 05:37:14 <brancher>	larryv whats different about my installed version ?
Feb 21 05:37:58 <brancher>	what feels stange is that those modules are always so old :P
Feb 21 05:38:02 <brancher>	strange
Feb 21 05:38:50 <tanath>	still works though
Feb 21 05:39:00 <brancher>	yap
Feb 21 05:39:04 <brancher>	with most
Feb 21 05:39:20 <brancher>	but no-one ever wants to update them when they don't anymore
Feb 21 05:40:01 <brancher>	anyways.Whats wrong these days with foo="${otherFoo[@]}" ?
Feb 21 05:40:09 <tanath>	sometimes they don't need any more updates though. i'm iffy about stuff that hasn't been updated in a long time too, but i tried it and it still works
Feb 21 05:40:52 <brancher>	indeed I like to write code that doesn't need updates, and I do, also on PHP
Feb 21 05:41:18 <larryv>	brancher: there's nothing *wrong* with it, strictly speaking, but it is generally a bug.
Feb 21 05:41:50 <larryv>	the misconception being that foo will end up being array with the same contents as otherFoo
Feb 21 05:41:54 <larryv>	*an array
Feb 21 05:43:08 <brancher>	larryv ah ok, I like those bugs when they are consistent. I  also do things like... put a string in a foreach and it just runs once... put an array in it and it does the same job
Feb 21 05:43:24 <brancher>	comma seperated strings...
Feb 21 05:43:56 <brancher>	larryv yes but printable and reusable
Feb 21 05:44:02 <larryv>	i don't really know what you're talking about.
Feb 21 05:44:26 <brancher>	easy parsing extendable too!
Feb 21 05:44:57 <larryv>	anyway foo=${bar[@]} sets foo to the expansion of bar with each element separated by a space. generally not what is intended
Feb 21 05:45:23 <larryv>	# bar=(a b c); foo1=${bar[@]}; foo2=("${bar[@]}"); declare -p foo1 foo2
Feb 21 05:45:25 <shbot>	larryv: declare -- foo1="a b c"
Feb 21 05:45:25 <shbot>	larryv: declare -a foo2=([0]="a" [1]="b" [2]="c")
Feb 21 05:46:25 <brancher>	larryv and those strings are great!
Feb 21 05:46:37 <brancher>	shellcheck is not really curly minded
Feb 21 05:46:51 <larryv>	storing arrays as strings is not great.
Feb 21 05:50:04 <brancher>	I did not say I stored arrays in there, I needed the strings like that after generating those arrays
Feb 21 05:55:56 <tykling>	if I run a command over ssh and press control-c how can I ensure that the command doesn't keep running on the remote host after my ssh is stopped by ctrl-c?
Feb 21 05:56:35 <martylake>	Is it possible to expand aliases when pressing space ?
Feb 21 05:56:44 <tykling>	I run bash on the local and on the remote but since the command is a python script this might not even be a bash question, so apologies in advance :)
Feb 21 05:58:14 <martylake>	I know I can expand aliases with a shortcut, I just want to expand it always so I wonder if I could do `bind '" ": alias-expand-line && insert-space'`
Feb 21 05:59:59 <brancher>	lol when you create avariabe foo_args then shellcheck thinks you are expanding an array because of ar
Feb 21 06:00:08 <brancher>	variable
Feb 21 06:07:16 <tykling>	ssh -t -t seems to do the trick :)
Feb 21 06:16:30 <ormaaj>	!forget dephyer
Feb 21 06:16:30 <greybot>	OK, ormaaj
Feb 21 06:16:42 <ormaaj>	!learn dephyer # seq 9 | sort -R | sed -Ee 'h;y/zwixuvoenrf/02654718935/;s/th?|51|s8?//;s/(.).*/\1/;G' | paste -sd ' ' - -
Feb 21 06:16:42 <greybot>	OK, ormaaj
Feb 21 06:30:50 <brancher>	ormaaj never forget!
Feb 21 06:30:59 <brancher>	l8er!
Feb 21 08:43:10 <isabella>	ormaaj: there's zero loops in my cube.sed
Feb 21 08:44:04 <isabella>	basically no repeated operations at all
Feb 21 08:44:19 <isabella>	closest thing to that is s/foo/bar/g
Feb 21 08:45:25 <isabella>	ah no i was wrong!  i'm sorry!  i loop over the moves in the string, but each move has nothing to repeat
Feb 21 08:49:19 <ormaaj>	:o
**** BEGIN LOGGING AT Wed Feb 21 10:31:33 2024

Feb 21 10:31:33 *	Now talking on #bash
Feb 21 10:31:33 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 21 10:31:33 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Wed Feb 21 10:38:41 2024

Feb 21 10:38:40 *	Now talking on #bash
Feb 21 10:38:40 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 21 10:38:40 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 21 11:22:07 <rlikon>	greets
Feb 21 11:22:50 <rlikon>	is it possible to output to stdout when something expects a file?
Feb 21 11:23:36 <Earnestly>	/dev/stdout is typically available
Feb 21 11:24:11 <rlikon>	no such a dev
Feb 21 11:27:36 <Soliton>	>(cat)
Feb 21 11:28:33 <rlikon>	not working
Feb 21 11:28:53 <rlikon>	by the way, program in question: pdftotext
Feb 21 11:28:57 <Soliton>	# echo foo > file; cp file >(cat)
Feb 21 11:28:58 <shbot>	Soliton: foo
Feb 21 11:29:34 <Soliton>	if the program wants to seek in the file or something then it's not going to work.
Feb 21 11:29:53 <rlikon>	it somehow expects a file
Feb 21 11:30:39 <rlikon>	tried this $(>(cat)), but no go
Feb 21 11:31:28 <Earnestly>	pdftotext supports - for both input and output, > If text-file is not specified, pdftotext converts file.pdf to file.txt.  If text-file is ´-', the text is sent to stdout.  If PDF-file is ´-', it reads the PDF file from stdin.
Feb 21 11:32:32 <sixwheeledbeast>	pdftotext file.pdf -
Feb 21 11:32:46 <Soliton>	pdftotext file.pdf >(cat)  works fine here.
Feb 21 11:33:28 <Earnestly>	pdftotext - - < in.pdf > out.txt
Feb 21 11:38:37 <Earnestly>	Or pdftotext - - < in.pdf # output is written to stdout
Feb 21 11:52:47 <ormaaj>	udevd actually doesn't create the dev/fd and /dev/std* symlinks for you. You need something that does it after mounting devfs. I do it with a script that handles miscellaneous things that I haven't gotten around to relocating someplace better yet.
Feb 21 11:55:34 <rlikon>	Earnestly: it's not working at all tried 'pdftotext - - -options -f1 -l2 < file.pdf
Feb 21 11:55:36 <ormaaj>	some systemd thing surely handles it for cookie-cutter linuxes.
Feb 21 11:55:48 <rlikon>	and 'pdftotext - - -options -f1 -l2 ;< file.pdf'
Feb 21 11:55:59 <rlikon>	and 'pdftotext  -options -f1 -l2 - - < file.pdf'
Feb 21 11:56:16 <rlikon>	the previous one was an error.
Feb 21 11:56:52 <Soliton>	!doesntwork
Feb 21 11:56:52 <greybot>	Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
Feb 21 11:59:38 <Soliton>	do you literally write -options?
Feb 21 11:59:48 <rlikon>	woah! pasted the commands not working
Feb 21 12:00:04 <rlikon>	Soliton: no, any combination of options
Feb 21 12:00:17 <rlikon>	it's was an example of where to place the '- -'
Feb 21 12:23:56 <Earnestly>	rlikon: The pdftotext synopsis is 'pdftotext [options] PDF-file [text-file]'. This means the options are placed before the pdf-file and optional text-file
Feb 21 12:25:31 <Earnestly>	Also the options like -f are written as '-f number' not '-fnumber' (compared to pr(1), e.g. -e[char][gap]). This means -f1 and -f 1 are not necessarily the same thing, although most option parsing libs don't mind
Feb 21 12:42:52 <Soliton>	rlikon: i still have no idea what exactly you called and if it worked or if not what error you got etc.
Feb 21 12:49:51 <delay>	Let's say that I'm doing something like this "cd myfolder && some_command && other_command". Now, I'd like to stop before "some_command" if "c --version" is different from something
Feb 21 12:50:04 <delay>	now I know I can save c --version in a variable
Feb 21 12:50:12 <delay>	with $(c --version)
Feb 21 12:51:14 <delay>	I'm not sure how to execute a block of code
Feb 21 12:51:19 <delay>	in this case
Feb 21 12:53:00 <ormaaj>	cd myfolder && [[ $(c --version) != something ]] && x && y
Feb 21 12:53:46 <delay>	you're saying there's no need to explicitly exit because that condition will fail?
Feb 21 12:54:29 <ormaaj>	the remainder of the and-list will short-circuit if any command returns nonzero.
Feb 21 12:57:30 <delay>	what if this is part of a make target's command?
Feb 21 12:57:42 <delay>	I'm doing it in that case and $(c --version) is empty
Feb 21 12:59:24 <delay>	isn't $(c --version) executed in a subshell?
Feb 21 12:59:55 <ormaaj>	If we're talking about bash yes.
Feb 21 13:11:07 <rlikon>	Soliton: so this works : pdftotext - - < file.pdf
Feb 21 13:11:19 <rlikon>	but, where, how to place options?
Feb 21 13:12:39 <Soliton>	pdftotext -f 1 -l 2 file.pdf -
Feb 21 13:14:04 <rlikon>	Soliton: mm.. now it works.
Feb 21 13:14:27 <rlikon>	perhaps pebak
Feb 21 13:15:04 <Angels>	We can see all variables starting with name like: "${!var@}"
Feb 21 13:15:25 <Angels>	Is it possible to have that var comming from another varialble like: "${!${ref}@}"
Feb 21 13:15:36 <ormaaj>	no
Feb 21 13:15:45 <Angels>	# echo "${!{ref}@}" # Bad subst.
Feb 21 13:15:46 <shbot>	Angels: bash: ${!{ref}@}: bad substitution
Feb 21 13:16:08 <Angels>	# echo "${!${ref}@}" # Bad subst v2.
Feb 21 13:16:09 <shbot>	Angels: bash: ${!${ref}@}: bad substitution
Feb 21 13:16:10 <ormaaj>	!${$
Feb 21 13:16:10 <greybot>	The correct syntax for parameter expansion is ${varMODIFIER} not ${$varMODIFIER}. Remove that second $.
Feb 21 13:16:51 <Angels>	ormaaj, it must be hardcoded then?
Feb 21 13:17:09 <Angels>	Or is it those times one would use eval?
Feb 21 13:18:00 <ormaaj>	namerefs are used for variable name indirection. see typeset -n
Feb 21 13:18:53 <Angels>	I know that thank you, but the issue is that the nameref is stored in a string variable.
Feb 21 13:19:16 <ormaaj>	They are dereferenced recursively
Feb 21 13:19:25 <Angels>	I know that too.
Feb 21 13:20:02 <Angels>	The task is too see all variables named starting from a string and the name comes from namref.
Feb 21 13:20:34 <Angels>	Similar to ${!varName@}, but the varName itself is a string variable.
Feb 21 13:21:10 <ormaaj>	why do you need that?
Feb 21 13:21:30 <Angels>	This is the task I have now.
Feb 21 13:21:45 <ormaaj>	Use an associative array.
Feb 21 13:22:25 <Angels>	The nameref itself points to an associative array.
Feb 21 13:22:29 <ormaaj>	Then you can easily loop over the indices
Feb 21 13:22:41 <Angels>	Why do you keep telling me 2+2=4?
Feb 21 13:22:54 <Angels>	If it's impossible, then tell it's impossible.
Feb 21 13:23:07 <ormaaj>	no you're hunting for a collection of variables named by a prefix. That is what the "${!var@} operator does.
Feb 21 13:23:24 <Angels>	Yes, and that "var" in your example comes from a string.
Feb 21 13:23:26 <Angels>	That's the issue.
Feb 21 13:23:38 <ormaaj>	you're simply taking the wrong approach
Feb 21 13:23:49 <Angels>	And you are a prophet?
Feb 21 13:24:01 <Angels>	I regret I asked you. Thank you. Forget it.
Feb 21 13:31:34 *	ChanServ gives channel operator status to ormaaj
Feb 21 13:32:42 *	ormaaj sets ban on *!~Angels@user/Angels
Feb 21 13:32:43 *	ormaaj has kicked Angels from #bash (Artfaith)
Feb 21 13:32:44 *	ormaaj removes channel operator status from ormaaj
Feb 21 13:43:09 <OMGOMG>	ormaaj: touchy today?
Feb 21 13:43:31 <ormaaj>	nope
Feb 21 13:44:01 <OMGOMG>	i'd say they were fairly polite
Feb 21 13:44:28 <ormaaj>	it's a known troll and ban evader.
Feb 21 13:45:14 <OMGOMG>	i sure didn't know that
Feb 21 13:46:19 <Earnestly>	And nothing will be learned
Feb 21 13:48:21 <Earnestly>	ormaaj: Thank you, btw. It's rare #bash bans even the most extremely disruptive
Feb 21 13:49:27 <rlikon>	among all the things to do in life, you gotta be bored to the bottom to troll about a particular use of vars.
Feb 21 13:50:49 <Sparkles>	\o/
Feb 21 13:50:59 <Sparkles>	Is here anyone around?
Feb 21 13:51:11 <Sparkles>	Woah! 800 members!
Feb 21 13:51:55 <OMGOMG>	that's odd, should be over a thousand
Feb 21 13:53:02 <Soliton>	!ask
Feb 21 13:53:02 <greybot>	If you have a question, please just ask it. Don't look for topic experts. Don't ask to ask. Don't PM! Don't ask if people are awake, or in the mood to help. Just ask the question straight out, and be patient waiting for an answer. http://mywiki.wooledge.org/NetEtiquette
Feb 21 13:54:17 <Sparkles>	What if I don't have a question?
Feb 21 13:56:27 <rlikon>	is it possible to rescrict some bash operations within some workspace?
Feb 21 13:56:33 <rlikon>	'delimit'
Feb 21 13:57:06 <rlikon>	some inadvertently commands can be dangerous.
Feb 21 13:57:47 <Earnestly>	What is a "workspace" in this context? (And do bash "operations" include only the bash language, or commands it typically exists to execute?) You're using fairly alien language to the topic
Feb 21 13:58:40 <rlikon>	Earnestly: any dir where the files are contained, 'cd dir_topicA'
Feb 21 13:59:16 <rlikon>	my concern are operations with for loop or find ... -exec with the use of 'echo' and '>'
Feb 21 13:59:38 <Earnestly>	Make use of UNIX's DAC based file permissions
Feb 21 13:59:45 <geirha>	question is a bit vague, but the answer is likely no
Feb 21 13:59:55 <geirha>	oops, was scrolled up a bit
Feb 21 14:00:02 <rlikon>	geirha: ok, it was a curiosity only.
Feb 21 14:00:07 <Earnestly>	And/or selinux (or grsecurity's RBAC stuff perhaps)
Feb 21 14:00:44 <Earnestly>	But in general, permissions are fine for this, and little utilised
Feb 21 14:00:58 <rlikon>	if by mistake recursively echo > and '/' are mixed in some command.
Feb 21 14:01:28 <Earnestly>	I honestly don't know what you mean by 'recursively echo > and /'
Feb 21 14:01:32 <rlikon>	or going fast rather than /path/to/exec it's written '/ path/to/exec'
Feb 21 14:01:57 <Earnestly>	You can't do anything about that without finely defined security contexts at the kernel level
Feb 21 14:02:35 <rlikon>	actually I am tempted to try it on a throwable vm
Feb 21 14:02:48 <geirha>	best you can do is get into the habit of running find with -print or -ls before you switch to using -exec
Feb 21 14:03:29 <geirha>	good old-fashion dryrun
Feb 21 14:03:30 <Earnestly>	I kind of wish gnu find didn't assume pwd if path isn't present
Feb 21 14:04:13 <koollman>	even before that, best you can do is have backups :)
Feb 21 14:05:03 <rlikon>	geirha: thanks for the tips
Feb 21 14:13:49 <Aryan>	how to replace a character or word in a variable?
Feb 21 14:13:58 <Aryan>	like 'foo' to be 'f00'
Feb 21 14:15:04 <Soliton>	var=${var//foo/f00}
Feb 21 14:17:00 <Aryan>	var=foo; echo ${var/oo/00}
Feb 21 14:17:05 <Aryan>	# var=foo; echo ${var/oo/00}
Feb 21 14:17:06 <shbot>	Aryan: f00
Feb 21 14:17:19 <Aryan>	why used two slashes there?
Feb 21 14:17:33 <koollman>	two slashes to replace all matches, not just the first
Feb 21 14:18:24 <Aryan>	koollman, ++
Feb 21 14:19:29 <Aryan>	and can you give some links to 'assignin and alternating variables at the same time' -- the thing you did earlier...
Feb 21 14:20:37 <Soliton>	what are alternating variables?
Feb 21 14:20:51 <Aryan>	modifying...
Feb 21 14:21:09 <Soliton>	assigning usually modifies? not sure what you're asking.
Feb 21 14:22:35 <Aryan>	i you didn't do 'var=foo; var=${var//foo/f00}.
Feb 21 14:23:22 <Aryan>	Oh, sorry.
Feb 21 14:23:54 <Aryan>	# var=${var//foo/f00}; echo $var
Feb 21 14:23:56 <shbot>	Aryan: no output
Feb 21 14:24:05 <Aryan>	I thought you were assigining too.
Feb 21 14:24:20 <koollman>	bot has no memory of previous variables :)
Feb 21 14:24:34 <Aryan>	i know
Feb 21 14:24:41 <Aryan>	never mind
Feb 21 14:25:27 <Aryan>	thanks!
Feb 21 14:26:22 <rlikon>	question about cut,paste and justfied rendered text.
Feb 21 14:43:03 <rlikon>	some files with justifed text in columns, (must be spaces + tab)
Feb 21 14:43:27 <rlikon>	cut -fN gets it right.
Feb 21 14:49:43 <rlikon>	I see, as long as there's one tab, even sourrounded by spaces, default 'cut -fN' will parse as columns.
Feb 21 14:54:43 <geirha>	default delimiter is tab, so yes, those spaces are considered part of the fields, not delimiters
Feb 21 16:28:43 <rlikon>	is it possible to do multiple redirects?
Feb 21 16:29:15 <rlikon>	one pipe to two seds, then pipe them again?
Feb 21 16:29:49 <rlikon>	two redirects that the final pipe sees them as separate files
Feb 21 16:29:58 <Soliton>	if you want to duplicate data you could use tee.
**** BEGIN LOGGING AT Wed Feb 21 16:46:59 2024

Feb 21 16:46:59 *	Now talking on #bash
Feb 21 16:46:59 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 21 16:46:59 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 21 17:16:49 <rlikon>	lol, the solution was : xargs -n2 > file
Feb 21 17:17:01 <rlikon>	*<
Feb 21 17:23:49 <Soliton>	very rare that the xargs protocol fits a problem.
Feb 21 17:24:06 <llua>	then the description of the problem was incredibly misleading.
Feb 21 17:25:12 <JAA>	!b1
Feb 21 17:25:12 <greybot>	bashphorism 1: the questioner's first description of the problem/question will be misleading.
Feb 21 17:35:31 <Earnestly>	a | { tee >(b) >(c) ...; } | d
Feb 21 17:36:43 <Earnestly>	I guess bash doesn't need the command group
Feb 21 17:37:38 <Earnestly>	And if a's output isn't wanted, > /dev/null tee
Feb 21 17:38:02 <JAA>	Now all you need to do is portably control the buffering. :-)
Feb 21 18:30:05 <apteryx>	hi!  is there some guideline somewhere suggesting parsing args as '--long-option optional-value' vs '--long-option=optional-value' ?  Both are handled by getopt, but is this encouraged practice?
Feb 21 18:32:52 <lopid>	maybe https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
Feb 21 18:38:02 <Soliton>	an option shouldn't have an optional argument. if you must do that then the latter is the only sane way.
Feb 21 18:42:07 <tirnanog>	keep in mind that getopt is a non-standard utility. to make matters worse, there are two different programs named getopt. see https://mywiki.wooledge.org/ComplexOptionParsing#util-linux.27s_special_getopt
Feb 21 18:43:19 <tirnanog>	also worth reading:
Feb 21 18:43:21 <tirnanog>	!faq 35
Feb 21 18:43:22 <greybot>	https://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line options and arguments in my script easily?
Feb 21 18:43:50 <tirnanog>	(don't confuse getopt with getopts)
Feb 21 19:07:00 <rlikon>	this is what xorgs solves rather effortlessly --> https://dpaste.com/5H7N8P62V
Feb 21 19:08:56 <tirnanog>	?
Feb 21 19:09:05 <rlikon>	*xargs
Feb 21 19:09:22 <tirnanog>	no?
Feb 21 19:10:30 <rlikon>	well, 'columns' incapable, 'paste -  - < ...' intercalates, fmt similar limitation to 'columns', awk does it but verbosely.
Feb 21 19:10:32 <tirnanog>	you can use paste - - or column -t if you have it.
Feb 21 19:10:46 <tirnanog>	not sure what any of that has to do with xargs.
Feb 21 19:13:26 <tirnanog>	maybe you mean xargs -L. it mangles its input, though.
Feb 21 20:02:37 *	ChanServ gives channel operator status to llua
Feb 21 20:02:40 *	llua sets ban on *!~Artfaith@user/voxel
Feb 21 20:02:51 *	llua removes channel operator status from llua
Feb 21 20:05:29 <ormaaj>	!cookie > isabella
Feb 21 20:05:29 <greybot>	isabella: 🍪
Feb 21 20:06:16 <isabella>	🤔
Feb 21 20:06:27 <bent_fingers>	isabella: 🍪🍪
Feb 21 20:07:08 <isabella>	you guys are screwing with my diet
Feb 21 20:07:13 <isabella>	how do i log this on my fitness pal
Feb 21 20:08:31 <bent_fingers>	# echo '🍪' >> fitness-pal.txt
Feb 21 20:08:33 <ormaaj>	I think that's < 5 calories which is allowed to be labeled as zero in my locale, so, freebie
Feb 21 20:08:33 <shbot>	bent_fingers: no output
Feb 21 20:10:17 <ormaaj>	(to know the actual calorie count, therefore, you just multiply the servings-per-container by 5. so 1 cookie in container * 1000 servings = ... nevermind)
Feb 21 20:10:33 <isabella>	< 5 means either really really small or made of something like konjac
Feb 21 20:11:39 <ormaaj>	that's actually how they do it, which is why zero calorie foods always have some oddly specific implausibly large number of servings
**** BEGIN LOGGING AT Wed Feb 21 20:38:01 2024

Feb 21 20:38:01 *	Now talking on #bash
Feb 21 20:38:01 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 21 20:38:01 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 21 21:29:04 <bent_fingers>	GNU says of `cksum`, "For the cksum command, the --check option supports auto-detecting the digest algorithm to use, when presented with checksum information in the --tag output format. "
Feb 21 21:29:23 <bent_fingers>	--tag is used by default
Feb 21 21:29:34 <bent_fingers>	but i can't get auto-detection to work
Feb 21 21:29:58 <N0ZYC>	openssl has some nice hashing (checksum) features also
Feb 21 21:30:00 <bent_fingers>	this works: `sha256sum -c SHA256SUMS`
Feb 21 21:30:15 <bent_fingers>	this does not: `cksum --check SHA256SUMS`
Feb 21 21:30:23 <twkm>	those sums are not tagged.
Feb 21 21:30:30 <bent_fingers>	erring with "cksum: SHA256SUMS: no properly formatted checksum lines found"
Feb 21 21:30:41 <twkm>	see.
Feb 21 21:31:09 <twkm>	you might read the docs so you can recognize when files have tagged sums.
Feb 21 21:33:18 <bent_fingers>	i think i should run `cksum --tag SHA256SUMS` then
Feb 21 21:33:24 <bent_fingers>	but what do i do with the output?
Feb 21 21:33:37 <bent_fingers>	prepend it to SHA256SUMS?
Feb 21 21:34:29 <twkm>	ahh, so no reading of docs.  well, keep guessing perhaps some day you'll hit on it.
Feb 21 21:35:49 <bent_fingers>	of course i read it, my first post cited them
Feb 21 21:35:58 <larryv>	bent_fingers: store it somewhere that doesn't modify the file you just checksummed, which would change its checksum.
Feb 21 21:46:37 <tirnanog>	it's gnu. one cannot simply read the man page.
Feb 21 21:49:03 <larryv>	bent_fingers: note that tagged output is only the default if you use cksum -a to select a modern algo. also note that ''cksum --tag SHA256SUMS'' checksums your checksum file (in the legacy format, no less), which is probably not what you were going for.
Feb 21 21:49:13 <tirnanog>	anyway, the tagged format is describe by its info. it defaults to tagged output only for "non legacy" algorithms.
Feb 21 21:49:31 <bent_fingers>	i read that
Feb 21 21:49:53 <bent_fingers>	currently working with sha256, which i assumed was non-legacy
Feb 21 21:51:23 <larryv>	none of your example commands select sha256.
Feb 21 22:04:19 <larryv>	example with MD5 (demonstration only): http://paste.wooledge.org/28771
Feb 21 22:08:00 <bent_fingers>	yeah, i just figured that's how it works...not what i was hoping for
Feb 21 22:08:09 <bent_fingers>	thanks anyways
Feb 21 22:08:39 <Earnestly>	coreutils cksum is radically different in recent versions
Feb 21 22:08:51 <Earnestly>	Where in fact, --tag is the default
Feb 21 22:10:12 <bent_fingers>	i thoght i could write a script that could use as input: 1) SUMFILE, 2) SUMFILE.GPG, 3) some.iso
Feb 21 22:10:15 <larryv>	only if you select a modern algo
Feb 21 22:10:20 <bent_fingers>	for example, from here: http://cdimage.ubuntu.com/lubuntu/releases/23.10/release/
Feb 21 22:10:53 <bent_fingers>	and have the script work in a generalized way, i.e., with cksum only, rather than each of the separate sums: mda,sha,etc.
Feb 21 22:14:13 <bent_fingers>	so instead of `sha256sum -c SHA256SUMS` i could `cksum -c "$1"`
Feb 21 22:14:16 <bent_fingers>	something like that
Feb 21 22:14:55 <larryv>	what is $1 supposed to be there
Feb 21 22:16:18 <bent_fingers>	whatever hashsummed file is provided with an iso
Feb 21 22:17:30 <bent_fingers>	in the end, i could have a script called `cs` (for checksum) and simply run `cs $1`
Feb 21 22:18:24 <bent_fingers>	instead of `sha256sum -c SHA256SUMS` and `md5sum -c ...` and `sha512sum -c ...`
Feb 21 22:19:38 <larryv>	i don't understand. cksum -c can do what you want, if the checksum file contains tagged output
Feb 21 22:19:42 <larryv>	https://paste.wooledge.org/28772
**** BEGIN LOGGING AT Wed Feb 21 23:19:26 2024

Feb 21 23:19:26 *	Now talking on #bash
Feb 21 23:19:26 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 21 23:19:26 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** ENDING LOGGING AT Wed Feb 21 23:20:04 2024

**** BEGIN LOGGING AT Wed Feb 21 23:21:17 2024

Feb 21 23:21:17 *	Now talking on #bash
Feb 21 23:21:17 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 21 23:21:17 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 21 23:24:48 <justsomeguy>	There used to be a shopt option that effects how scope works in bash, but I can't find it anymore. Does anyone remember what I'm talking about? My search queries aren't bringing anything up.
Feb 21 23:25:07 <justsomeguy>	I think it enabled lexical scope as an experimental feature.
Feb 21 23:29:03 <larryv>	maybe localvar_inherit or localvar_unset? those tweak scoping-related behavior, but i wouldn't say either of them "enables" lexical scope. https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
Feb 21 23:30:21 <tirnanog>	indeed. there is no lexical scoping.
Feb 21 23:32:47 <apteryx>	lopid: OK
**** ENDING LOGGING AT Wed Feb 21 23:50:23 2024

**** BEGIN LOGGING AT Wed Feb 21 23:50:23 2024

**** ENDING LOGGING AT Wed Feb 21 23:52:21 2024

**** BEGIN LOGGING AT Wed Feb 21 23:52:21 2024

**** ENDING LOGGING AT Wed Feb 21 23:53:41 2024

**** BEGIN LOGGING AT Wed Feb 21 23:53:41 2024

**** ENDING LOGGING AT Wed Feb 21 23:57:59 2024

**** BEGIN LOGGING AT Wed Feb 21 23:57:59 2024

Feb 22 03:39:34 <MisterMinister>	Greeting and Salutations! Is there a most favorite method to get PID of a few background processes please?  e.g. `foo|bar & foo|bar &`
Feb 22 03:41:21 <larryv>	save them yourself. e.g., pids=(); foo & pids+=("$!"); bar & pids+=("$!")
Feb 22 03:44:49 <MisterMinister>	recall it didn't work in every case, I'll try it again. Thanks Larryv
Feb 22 04:01:24 <llua>	there are few silver bullets in shell programming, so yeah, that makes sense.
Feb 22 08:50:22 <Ecko>	How do you deal with having to enclose things 3 layers deep in quotes?  my command fails because I single quoted user and sleep
Feb 22 08:50:22 <Ecko>	watch 'mysql -e "select * from information_schema.processlist where user = 'user' and command != 'sleep' order by TIME desc"'
Feb 22 08:52:01 <geirha>	watch -x mysql -e "select * ... where user = 'user' ..."
Feb 22 08:52:26 <geirha>	removing one shell from the mix means one less layer of shell quoting
Feb 22 08:58:47 <JAA>	More generally, %q to the rescue.
Feb 22 09:01:29 <arraybolt3>	# echo "This string has \"lots 'and lots \"and lots!\" of quotes.\'\""
Feb 22 09:01:32 <shbot>	arraybolt3: This string has "lots 'and lots "and lots!" of quotes.\'"
Feb 22 09:01:41 <arraybolt3>	# echo "This string has \"lots 'and lots \"and lots!\" of quotes.'\""
Feb 22 09:01:43 <shbot>	arraybolt3: This string has "lots 'and lots "and lots!" of quotes.'"
Feb 22 09:01:52 <JAA>	I once had to exec a `bash -c` in a container on a remote host. That was fun to get right...
Feb 22 09:02:03 <arraybolt3>	oh I bet
Feb 22 09:02:31 <arraybolt3>	# bash -c "echo \"This is a \\\"deeply quoted\\\" string.\""
Feb 22 09:02:32 <shbot>	arraybolt3: This is a "deeply quoted" string.
Feb 22 09:03:20 <arraybolt3>	# bash -c "bash -c \"bash -c \\\"echo \\\\\\\"heya!\\\\\\\"\\\"\""
Feb 22 09:03:21 <shbot>	arraybolt3: heya!
Feb 22 09:03:25 <Ecko>	ah, that did the trick, thanks geirha
Feb 22 09:03:39 <JAA>	It's more fun when you need to also escape some $ signs at various levels. :-)
Feb 22 09:03:54 <Nintendo>	JAA, I have done that but also via XML payload in the snow uphill both ways.
Feb 22 09:04:08 <JAA>	:-)
Feb 22 09:11:30 <test63>	JAA what is the meaning of %q ?
Feb 22 09:15:23 <JAA>	test63: %q in printf quotes the argument for shell injection purposes.
Feb 22 09:15:52 <test63>	ah. I just found that in the bash manual. I'm not familiar with that stuff.
Feb 22 09:16:40 <JAA>	It's also useful for clear unambiguous printing.
Feb 22 09:16:48 <JAA>	# printf %q "$IFS"
Feb 22 09:16:49 <shbot>	JAA: $' \t\n'
Feb 22 09:16:58 <test63>	I don't even know what shell injection is
Feb 22 09:19:21 <Nintendo>	There's also ${s@Q}.  Search for “parameter transformation”, because the man page doesn't contain the string you would want it to have.
Feb 22 09:20:02 <JAA>	# cmd=(echo $'ohai"with\'quotes'); "${cmd[@]}"; bash -c "$(printf '%q ' "${cmd[@]}")"
Feb 22 09:20:03 <shbot>	JAA: ohai"with'quotes
Feb 22 09:20:03 <shbot>	JAA: ohai"with'quotes
Feb 22 09:22:51 <JAA>	Yeah, @Q is a valid alternative these days. %q is the much (MUCH) older method.
Feb 22 09:23:54 <JAA>	@Q was added in 4.4. %q has existed since the dawn of time.
Feb 22 09:24:47 <pj>	If you have to support age old bash then by all means use %q, but I do find @Q to be easier to use personally.
Feb 22 09:25:36 <JAA>	Agreed
Feb 22 09:25:45 <JAA>	I sadly do have some ancient systems here. :-|
Feb 22 09:26:38 <pj>	yep, tis the nature of the beast with bash.  Sometimes you can target newer bash sometimes you can't, sometimes you're stuck targetting POSIX sh (yuck).
Feb 22 09:28:44 <fdan36>	i get this error
Feb 22 09:28:44 <fdan36>	nimbus_beacon_node: /lib64/libm.so.6: version `GLIBC_2.29' not found (required by nimbus_beacon_node)
Feb 22 09:28:52 <fdan36>	how to find the glibc version and how to update it?
Feb 22 09:29:45 <pj>	fdan36: that's not a bash question but it basically means that the program you're trying to run was built with a newer glibc than the one on the system you're trying to run it on.
Feb 22 09:29:47 <JAA>	!nabq
Feb 22 09:29:47 <greybot>	Not a #bash question. You might want to ask in a channel where it's actually on-topic. You can use "/msg alis list KEYWORDS" to search for suitable channels
Feb 22 09:30:08 <fdan36>	sure
Feb 22 09:30:17 <pj>	fdan36: ask for help in your OS or distribution-specific channel, they will be able to help you more with this issue.
Feb 22 09:30:22 <fdan36>	pj can i get help on how to find the existing glibc version
Feb 22 09:30:39 <JAA>	That will also be OS/distro-specific.
Feb 22 09:31:47 <geirha>	in debian/ubuntu the package is libc6
Feb 22 09:33:24 <pj>	at the end of the day you are highly unlikely to be able to upgrade your glibc version without installing a different or newer distribution.  You will probably need to find a different solution to your problem, and again your OS/distro-specific channel will have the proper solution for you.
Feb 22 09:34:28 <geirha>	such as running it in a container or vm
Feb 22 09:35:53 <pj>	or getting a package built specifically for your distro
Feb 22 09:37:50 <JAA>	(Flashbacks to trying to get containers with a modern libc to run on a host system with an older libseccomp and running into all kinds of fun errors like GPG verification failing.)
Feb 22 09:39:07 <andre144k>	hello all - is there an option to gie a timeout while checking:   if [ -d "/mnt/foobar/folder" ]
Feb 22 09:39:15 <andre144k>	to give
Feb 22 09:40:16 <pj>	yeah, not sure that containers like to play well in that scenario.
Feb 22 09:40:24 <pj>	a proper VM would work.
Feb 22 09:40:49 <geirha>	retries=10 ; while ! [[ -d /mnt/foobar/folder ]] ; do ((retries-- > 0)) || { printf >&2 'Timed out waiting for folder\n' ; exit 1 ; } ; sleep 1 ; done ; ls -ld /mnt/foobar/folder
Feb 22 09:41:31 <JAA>	It was a particular error that broke lots of stuff a couple years ago due to glibc starting to use faccessat2 and that not being whitelisted in libseccomp. But yeah, can happen for other things, too.
Feb 22 09:42:51 <JAA>	andre144k: Do you mean the -d check takes a long time (e.g. slow network file system) or waiting for the directory to show up? (The latter is what geirha's code covers.)
Feb 22 09:43:09 <pj>	don't know much about that one, but I do know that glibc tends not to play well with parrallel installs and so I wouldn't think it would work well in a container either.
Feb 22 09:45:04 <JAA>	It's been mostly fine for me apart from that one. I've ran three Debian releases + sid inside containers on the same host system at various times.
Feb 22 09:45:04 <pj>	there's also inotifywait
Feb 22 09:46:05 <JAA>	It only really breaks if a syscall is needed that isn't getting passed through (yet) by the containerisation. That's when you need to update Docker/Podman/whatever.
Feb 22 09:46:28 *	pj nods
Feb 22 09:46:32 <JAA>	Or you perform some black magic to add those syscalls manually.
Feb 22 09:47:07 <andre144k>	JAA yes, a very slow, or broken nfs eg
Feb 22 09:50:02 <pj>	andre144k: I would look at inotifywait, then, it has a -t (timeout) option.
Feb 22 09:51:30 <geirha>	IIRC, inotifywait won't get any events if the dir is created remotely
Feb 22 09:51:52 <andre144k>	man test:  GNU coreutils v8.4   -   no timeout option
Feb 22 09:51:52 <emanuele6>	if timeout 1 [ -d "/mnt/foobar/folder" ]   should just work
Feb 22 09:52:13 <andre144k>	okay ill try
Feb 22 09:52:21 <JAA>	I was just about to ask whether wrapping it in a timeout works, or whether the subprocess would then be stuck on I/O.
Feb 22 09:53:02 <JAA>	Not sure how that works with NFS et al.
Feb 22 09:53:11 <pj>	yeah, I'm not entirely sure that inotifywait won't stick on IO to be honest, but I think it has a good chance of working.
Feb 22 09:58:12 <pj>	I get the feeling it will work because it uses an event-driven API.
Feb 22 09:59:23 <andre144k>	emanuele6 thank you "timeout"  this seems to be best solution
Feb 22 10:00:03 <andre144k>	it works perfectly in current stuation
Feb 22 10:03:35 <JAA>	Good to know :-)
Feb 22 10:29:50 <geirha>	pj: but the events are generated from syscalls like open(2) and close(2), so when a file is created on a remote system, the inotify events only appear on that remote system
Feb 22 10:38:05 <Earnestly>	Would have to include a proxy that forwards the events
Feb 22 10:38:21 <Earnestly>	(Or probably sshfs?)
Feb 22 10:45:10 <geirha>	I have my doubts that nfs would add a forwarding of inotify events
Feb 22 10:45:21 <geirha>	like, how would it deal with systems that don't have inotify?
Feb 22 10:58:54 <Earnestly>	By include a proxy, I mean write a script that does that
Feb 22 10:59:18 <Earnestly>	E.g. pipe output from inotify through socat back to the origin ._.
Feb 22 10:59:42 <Earnestly>	Or scrape the output from the ssh session itself
Feb 22 11:25:48 <pj>	geirha: makes sense
Feb 22 11:44:52 <rlikon>	greets
Feb 22 11:45:06 <rlikon>	sed, awk, grep got their channels, but not 'datamash'
Feb 22 12:38:50 <andre144k>	i mounted a nfs folder via follow options:    rw,bg,soft,rsize=32768,wsize=32768,vers=4,intr,timeo=200,tcp,async
Feb 22 12:40:56 <andre144k>	when i disconnect cable, without umounting before umounting, shutdown will take very long on this mashine.  is there maybe a better way to mount nfs volumes?
Feb 22 12:43:05 <geirha>	how to configure nfs is a bit beyond the scope of this channel. Try your os channel
Feb 22 12:46:24 <andre144k>	good idea - thank you
Feb 22 13:07:40 <hightower3>	Hey stupid problem, in a script I interpolate a variable inside a line that calls sed:    sed -i "s/VAL=.*/VAL=$MYVAL/"
Feb 22 13:07:50 <hightower3>	so if the variable contained an /, it breaks sed invocation
Feb 22 13:08:07 <hightower3>	I tried $(MYVAL@Q}, but that only added quotes, didn't help
Feb 22 13:08:15 <hightower3>	any quick ideas/solutions?
Feb 22 13:09:32 <geirha>	best solution is to not use sed
Feb 22 13:09:40 <Earnestly>	hightower3: You can't use sed like that reliably, so just don't
Feb 22 13:10:20 <hightower3>	so what should I use for this -- for an in-place edit of a line in text, matched by a regex
Feb 22 13:10:22 <Earnestly>	hightower3: And to try help your thinking, @Q is quoting for bash, and since bash is not sed (nor is it specifically sed's s command), it doesn't reason that it'd help you
Feb 22 13:10:51 <geirha>	If you're editing a config file, just provide a complete config file instead of editing this and that line of an existing one
Feb 22 13:11:23 <hightower3>	I can't provide a complete file because it's building over time, and it depends on the fact that I modify some lines, and not replace or re-create it
Feb 22 13:11:45 <Earnestly>	hightower3: Besides what geirha suggests you have awk. But a word about in-place editting. You don't want to do in-place editting and nor does sed -i do in-place editing
Feb 22 13:12:13 <Earnestly>	awk is fine because you can pass your value in via environment variable which
Feb 22 13:12:16 <hightower3>	well, I guess worst case, I can grep out the line, then >> the new line into it. It will mess up the order but well...
Feb 22 13:12:47 <hightower3>	yeah or awk... well, ok, thanks for suggestions
Feb 22 13:13:18 <geirha>	sounds like an overly complicated setup
Feb 22 13:13:29 <Earnestly>	myval=$MYVAL awk 'index($1, "VAL=") == 1 {print "VAL=" ENVIRON["myval"]}' # Uses index() instead of regex, because it doesn't appear to need regex
Feb 22 13:14:02 <Earnestly>	Create a new file, config.new and then if awk succeeds, mv config.new config. Avoid in-place where ever you can
Feb 22 13:14:11 <Earnestly>	hightower3: See https://backreference.org/2011/01/29/in-place-editing-of-files/index.html
Feb 22 13:14:21 <geirha>	missing a print for the remaining lines there though
Feb 22 13:14:33 <Earnestly>	Oh right, yeah add that
Feb 22 13:15:02 <Earnestly>	myval=$MYVAL awk 'index($1, "VAL=") == 1 {print "VAL=" ENVIRON["myval"]; next}; 1'
Feb 22 13:15:48 <hightower3>	oh btw, I just realized I could have used perl as well, I just randomly used 'sed' and then wondered, could have used anything else, doh
Feb 22 13:15:51 <Earnestly>	hightower3: If this config is json, use jq. If it's yaml use something else
Feb 22 13:16:14 <Earnestly>	hightower3: How would you use perl to allow arbitrary values in regex?
Feb 22 13:16:30 <hightower3>	same as above, by refering to env vars
Feb 22 13:17:11 <Earnestly>	But how would it not interpret the regex characters in the value?
Feb 22 13:17:36 <Earnestly>	You'd have to quote everything?
Feb 22 13:17:38 <hightower3>	because perl doesn't interpolate vals before executing the line.. it would work exactly for the same reason why the above awk line works
Feb 22 13:17:43 <hightower3>	but also,
Feb 22 13:18:09 <hightower3>	perl has another facility at disposal, which is to automatically quote all "special" chars, something to do with Q I think... let me remind myself
Feb 22 13:18:13 <Earnestly>	But you /are/ interpolating within perl. Your sed examples interpolates twice
Feb 22 13:18:21 <Soliton>	it wasn't regex in sed either.
Feb 22 13:18:44 <Soliton>	in perl you can use \Q but no idea how that applies here.
Feb 22 13:18:47 <Earnestly>	Once from the shell, second in the s command. In perl without stuff like \Q you're still interpolating a variable inside a DSL, i.e. perl's s//
Feb 22 13:18:53 <hightower3>	oh jezus
Feb 22 13:19:02 <Earnestly>	hightower3: Come on, this is basic code injection 101
Feb 22 13:19:09 <hightower3>	ok thanks for help
Feb 22 13:20:12 <Earnestly>	I do like "interpolate" having a definition of "to corrupt"
**** ENDING LOGGING AT Thu Feb 22 13:52:24 2024

**** BEGIN LOGGING AT Thu Feb 22 13:55:48 2024

Feb 22 13:55:47 *	Now talking on #bash
Feb 22 13:55:47 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 13:55:47 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Thu Feb 22 13:57:12 2024

Feb 22 13:57:11 *	Now talking on #bash
Feb 22 13:57:11 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 13:57:11 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 22 14:01:35 <andre144k>	nfs solution:  timeo=120
Feb 22 14:37:14 <samjiman>	Hi, all
Feb 22 14:39:05 <zxd>	how to sort this  from smaller to bigger:  2006  2004-02  2004-02-33       (  2006 means 2006-01-01   )
Feb 22 14:39:24 <zxd>	2004-02  ( means 2004-02-01 )
Feb 22 14:39:41 <zxd>	I ment  2004-02-28
Feb 22 14:39:56 <zxd>	not 2004-02-33
Feb 22 14:40:00 <samjiman>	So sort from earlier date to latest date?
Feb 22 14:40:05 <zxd>	yes
Feb 22 14:40:05 <samjiman>	*earliest
Feb 22 14:40:10 <zxd>	efficiently
Feb 22 14:40:38 <djph>	'sort' ?
Feb 22 14:40:58 <djph>	noting, of course, "2004-02" would probably come before "2004-02-28" since it's shorter
Feb 22 14:41:02 <zxd>	I tried sort but how do I deal with the  '-'
Feb 22 14:41:26 <djph>	you don't
Feb 22 14:42:15 <djph>	I mean "2004" comes before 2006, so it doesn't matter that "2004-" is longer, it's still first ...
Feb 22 14:42:55 <zxd>	what if it's  2004-02-28  2004-02-24
Feb 22 14:43:14 <samjiman>	You need to be able to sort by year, then by month, then by day
Feb 22 14:43:28 <djph>	then 24 comes before 28 ...
Feb 22 14:44:03 <djph>	ISO dates are laid out to nicely sort like that ...
Feb 22 14:44:06 <Soliton>	i mean it sorts fine lexicographically, no? what exactly is the issue?
Feb 22 14:45:13 <djph>	'sup Soliton ?
Feb 22 14:45:32 <zxd>	djph: so sort does it automatically  sort the dates?   what switches
Feb 22 14:45:49 <Soliton>	# printf '%s\n' 2006  2004-02  2004-02-28 | sort
Feb 22 14:45:50 <shbot>	Soliton: 2004-02
Feb 22 14:45:50 <shbot>	Soliton: 2004-02-28
Feb 22 14:45:51 <shbot>	Soliton: 2006
Feb 22 14:46:07 <djph>	zxd: ... I guess you haven't actually run your list of ISO dates through 'sort'
Feb 22 14:47:18 <zxd>	this dosen't work  :  printf '%s\n' 2009-02  2004-02-28  2004-02-21 | sort
Feb 22 14:47:31 <djph>	!doesntwork > zxd
Feb 22 14:47:32 <greybot>	zxd: Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
Feb 22 14:47:35 <zxd>	wait it does
Feb 22 14:55:32 <djph>	zxd: so you're good now?
Feb 22 14:57:38 <zxd>	djph: Yes thanks all  ,   if I want only the first entry after all is sorted   :  printf '%s\n' 2009-02 2004-02-28  2009-02 2004-02-21  | sort | { read var ; echo $var ;}     this is ok ?
Feb 22 14:58:21 <djph>	why not just use head(1) to get the "first line" ?
Feb 22 14:59:00 <zxd>	maybe  piping to a subshell is faster? since I am not opening a new command ?
Feb 22 14:59:27 <Earnestly>	zxd: I hope you're not creating a pipeline inside a fast for/while loop
Feb 22 14:59:33 <djph>	what?
Feb 22 14:59:49 <tirnanog>	however, var won't persist there, unless lastpipe is in effect. whether that matters or not is another matter.
Feb 22 15:01:09 <Earnestly>	  printf "%s\n" 2009-02 2004-02-28  2009-02 2004-02-21 | sort | head -n 1 ran
Feb 22 15:01:11 <Earnestly>	    1.06 ± 0.37 times faster than printf "%s\n" 2009-02 2004-02-28  2009-02 2004-02-21 | sort | { read -r var; printf "%s" "$var"; }
Feb 22 15:01:16 <Earnestly>	zxd: No difference
Feb 22 15:01:33 <zxd>	:)
Feb 22 15:03:47 <Earnestly>	zxd: When you're working with pipelines, try to arrange the elements to produce one long persistent pipeline that reads all input and produces all output. Don't continuously bring up and tear them down; each program runs in parallel and the cost of bring up is amortised quickly. The slowest thing you can do in a shell is repeatidly fork commands
Feb 22 15:04:21 <Earnestly>	(I'm sure some bits of the bash runtime are also slow too)
Feb 22 15:04:52 <Earnestly>	zxd: By the time sort(1) for example has initialised and even handled the inputs, head will long since be waiting for input
Feb 22 15:09:05 <Mo_>	Hi, this works:    ssh srv 'sed -n "s/PRETTY_NAME=\"\([^\"]*\)\"/\1/p" /etc/os-release'   Now if I need to put that sed into "" like the following, how would I escape that correctly?
Feb 22 15:09:13 <Mo_>	 ssh srv "echo Version: ; 'sed -n "s/PRETTY_NAME=\"\([^\"]*\)\"/\1/p" /etc/os-release'"
Feb 22 15:09:20 <rlikon>	odd issue while piping. sed can't see as a complete output
Feb 22 15:09:45 <rlikon>	grep foo | sed 'something'
Feb 22 15:09:47 <zxd>	Earnestly: noted
Feb 22 15:10:27 <Earnestly>	Mo_: os-release is designed to be dottable (. / source)
Feb 22 15:10:44 <Earnestly>	!buffering > rlikon
Feb 22 15:10:51 <Earnestly>	!buffer
Feb 22 15:11:02 <Mo_>	Earnestly: Good point. But I like to learn quoting :)
Feb 22 15:11:35 <rlikon>	Earnestly: sorry, my bad forgot 's/this/that/g' <-- the G there
Feb 22 15:11:54 <Earnestly>	Mo_: There's not much to learn, ssh is broken by design. It swallows all of your arguments and squashes it down into a single string, passing it as a single argument to sh -c
Feb 22 15:12:16 <Earnestly>	!ssh > Mo_
Feb 22 15:12:16 <greybot>	Mo_: Secure SHell (#openssh, http://mywiki.wooledge.org/CategorySsh). To run rm "$localVar" remotely, use: printf 'rm %q\n' "$localVar" | ssh user@host bash
Feb 22 15:12:46 <Mo_>	Ok, it works and looks good:  ssh srv "echo Version: ; . /etc/os-release ; echo \$PRETTY_NAME"
Feb 22 15:13:13 <Earnestly>	Or cmd=(foo bar baz); "${cmd[*]@Q}"
Feb 22 15:14:21 <Earnestly>	Mo_: ssh srv 'if . /etc/os-release; then printf "Version: %s\n" "$PRETTY_NAME"; fi'
Feb 22 15:14:59 <Earnestly>	Mo_: Don't use echo and quote expansions so that they don't wordsplit and potential file glob expansion
Feb 22 15:15:08 <Earnestly>	A pretty name could well include characters like []
Feb 22 15:15:59 <Earnestly>	Mo_: Use ' literal quotes if want a string to be literal
Feb 22 15:23:13 <rak>	In the case of a redirection with a potential clobber, e.g., 'cmd >f', where is the ordering of operations between executing `cmd` and creating/writing `f` defined? I've checked REDIRECTION in bash(1), the redirection section for POSIX shells https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/V3_chap02.html#tag_18_07 , and §3.6 (Redirections) of the bash manual and don't see it
Feb 22 15:23:16 <rak>	specified anywhere
Feb 22 15:26:06 <rak>	It seems to be that 'f' is created *before* cmd is run so that, e.g., running 'ls > f' in an empty directory ends up in the file 'f' containing the line 'f'. I am looking to see if this must always be the case, or if a shell is free to buffer stdout before creating the redirection's target file and writing to it.
Feb 22 15:26:11 <Earnestly>	rak: See '2.3 Token Recognition' in that document
Feb 22 15:26:25 <Earnestly>	rak: Yes, redirections are created before command execution
Feb 22 15:28:25 <Earnestly>	Hm, token recognotion doesn't cover it, sorry. See https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/utilities/V3_chap02.html#tag_18_10_02
Feb 22 15:29:27 <iconoclast_hero>	ubuntu 22.04 $ man column:  The column command is part of the util-linux package which can be downloaded from Linux Kernel Archive <https://www.kernel.org/pub/linux/utils/util-linux/>. util-linux 2.37.2
Feb 22 15:29:27 <iconoclast_hero>	vs. https://man7.org/linux/man-pages/man1/column.1.html
Feb 22 15:30:19 <iconoclast_hero>	I don't know if this is really a #bash question, but I don't seem to have " -C, --table-column properties           Define one column by comma separated list of column   attributes. This option can be used more than once, every use..."
Feb 22 15:30:37 <Earnestly>	iconoclast_hero: It's in a recent release
Feb 22 15:30:52 <iconoclast_hero>	so, i saw it is a different version number but ...
Feb 22 15:31:02 <iconoclast_hero>	2.37 vs. 2.39?
Feb 22 15:31:18 <iconoclast_hero>	i wasn't sure if that big of a feature would be added in such a (to me) small version change.
Feb 22 15:31:43 <Earnestly>	37 is almost 3 years old
Feb 22 15:31:47 <iconoclast_hero>	ok.
Feb 22 15:32:12 <iconoclast_hero>	so can i easily upgrade util-linux or am i going to f everything up?
Feb 22 15:33:05 <iconoclast_hero>	nevermind.
Feb 22 15:33:09 <iconoclast_hero>	there's a channel for that.
Feb 22 15:37:40 <rak>	Earnestly: Thanks! I managed to thread my way through the POSIX spec from the grammar you linked to and figured it out
Feb 22 16:03:43 <iconoclast_hero>	am i missing something here?
Feb 22 16:03:43 <iconoclast_hero>	$ \mpc playlist -f \(%position%\)~%artist%~%title% |column --table -s "~" -o " | " -C name=\(POS\) -C name=Artist,noextreme -C name=Title,hide |head -10
Feb 22 16:04:21 <iconoclast_hero>	the -C hide is supposed to suppress the third column, "Title", no?
Feb 22 16:05:29 <iconoclast_hero>	adding -H Title suppresses it.
Feb 22 16:07:38 <iconoclast_hero>	oh, i'm on column/util-linux 2.40RC whatever
Feb 22 16:08:05 <iconoclast_hero>	RC1-126-7ca98
**** ENDING LOGGING AT Thu Feb 22 17:51:49 2024

**** BEGIN LOGGING AT Thu Feb 22 18:35:17 2024

Feb 22 18:35:17 *	Now talking on #bash
Feb 22 18:35:17 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 18:35:17 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 22 19:14:36 <trev>	hi folks, would anyone be willing to code review a little script i wrote today? it parses all tmux pane contents for strings that resemble a file/file path and then tries to resolve the file. I use it to pipe to fzf and open the files in vim. https://github.com/trevarj/config.nvim/blob/master/scripts/tmux_file_paths.sh
Feb 22 19:15:03 <selckin>	!check
Feb 22 19:15:03 <checkbot>	selckin: Looks good to me
Feb 22 19:15:31 <tirnanog>	https://raw.githubusercontent.com/trevarj/config.nvim/master/scripts/tmux_file_paths.sh
Feb 22 19:15:33 <tirnanog>	!check
Feb 22 19:15:33 <checkbot>	tirnanog: Looks good to me
Feb 22 19:15:43 <tirnanog>	hmm.
Feb 22 19:16:32 <tirnanog>	I thought it might complain about for pane in $panes, at least.
Feb 22 19:17:50 <trev>	why'd you think that?
Feb 22 19:17:54 <tirnanog>	!drlwf > trev
Feb 22 19:17:55 <greybot>	trev: https://mywiki.wooledge.org/DontReadLinesWithFor ... "for" is for iterating arguments/arrays, not strings. Never do: for x in $(cat file), or for x in $var; instead, use a glob (*.txt), an array ("${hosts[@]}") or a while-read loop. See also https://mywiki.wooledge.org/BashPitfalls#pf1
Feb 22 19:18:09 <trev>	ah
Feb 22 19:18:38 <trev>	yeah that would be nice if it caught that
Feb 22 19:19:41 <tirnanog>	you could just iterate over the lines directly but if you'd rather continue to assign to a variable for the time being, you can do something like: mapfile -t panes < <(tmux ...); for pane in "${panes[@]}" ...
Feb 22 19:21:06 <trev>	would that be more efficient? right now the script is pretty slow, depending on how much tmux history i have
Feb 22 19:21:36 <tirnanog>	it will not be more or less efficient to any degree that is noticeable.
Feb 22 19:21:39 <JAA>	`for pane in $panes` will only do the first pane, too.
Feb 22 19:22:08 <trev>	JAA: somehow it is doing them all
Feb 22 19:22:20 <JAA>	Oh wait, I misread, I thought it already was an array, yeah.
Feb 22 19:22:46 <JAA>	Agreed with mapfile aka readarray.
Feb 22 19:22:53 <tirnanog>	not assigning to an var to begin with would be slightly more efficient because you then benefit from the asynchronous operation of a pipeline.
Feb 22 19:24:41 <JAA>	Weird that ShellCheck doesn't flag it as SC2046.
Feb 22 19:26:08 <trev>	tirnanog: so just `for x in $([tmux cmd]..)` ?
Feb 22 19:26:27 <trev>	JAA: maybe i will file an issue if i get some time
Feb 22 19:26:41 <tirnanog>	no. that's still reading lines with for, and carries with it the same attendant risks as described by pf1.
Feb 22 19:26:46 <JAA>	I can't remember when quoting is and isn't necessary, but I'd add quotes on the -n and -f checks near the end.
Feb 22 19:26:49 <JAA>	!qefs
Feb 22 19:26:49 <greybot>	"$Quote" "$Every" "$Fucking" "$Substitution"
Feb 22 19:26:54 <JAA>	:-)
Feb 22 19:27:22 <tirnanog>	(which was linked to earlier)
Feb 22 19:28:19 <JAA>	My only other nit is naming script variables in upper case. That should normally be done only for shell and environment variables.
Feb 22 19:28:41 <tirnanog>	trev: either use arrays or do this: https://termbin.com/5ivy
Feb 22 19:29:04 <JAA>	The 'expand ~' bit also looks a bit suspicious; what if there is a ~ somewhere in the path?
Feb 22 19:29:24 <trev>	in newer bash you don't need IFS right? isn't there readline?
Feb 22 19:29:39 <trev>	JAA: shouldn't it only strip from the front?
Feb 22 19:29:42 <tirnanog>	maybe_path doesn't sound like something that should be trimmed
Feb 22 19:29:48 <tirnanog>	that's why I have specified IFS=
Feb 22 19:30:06 <tirnanog>	not sure what you mean by readline.
Feb 22 19:30:16 <tirnanog>	I guess you need to read faq 1 as well as pf 1.
Feb 22 19:30:19 <tirnanog>	!faq 1 > trev
Feb 22 19:30:19 <greybot>	trev: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
Feb 22 19:30:35 <trev>	ah nevermind, i was thinking of readarray
Feb 22 19:30:51 <tirnanog>	ah. that's a synonym of mapfile.
Feb 22 19:33:14 <trev>	lol yeah..time to make my head spin
Feb 22 19:38:13 <trev>	thanks for the help
**** BEGIN LOGGING AT Thu Feb 22 20:35:46 2024

Feb 22 20:35:46 *	Now talking on #bash
Feb 22 20:35:46 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 20:35:46 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Thu Feb 22 20:47:44 2024

Feb 22 20:47:43 *	Now talking on #bash
Feb 22 20:47:43 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 20:47:43 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Thu Feb 22 20:58:51 2024

Feb 22 20:58:50 *	Now talking on #bash
Feb 22 20:58:50 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 20:58:50 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 22 20:59:37 <nasum>	it is easy to set up a while loop to do something every x seconds, but do i set up the while loop if there has X to be done very certain seconds and Y and Z at some different time intervals?
Feb 22 21:00:24 <yitz>	nasum: set up a systemd-timer unit for X, for Y and for Z
**** BEGIN LOGGING AT Thu Feb 22 21:13:03 2024

Feb 22 21:13:03 *	Now talking on #bash
Feb 22 21:13:03 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 21:13:03 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Thu Feb 22 21:16:06 2024

Feb 22 21:16:06 *	Now talking on #bash
Feb 22 21:16:06 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 22 21:16:06 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 22 21:17:03 <ormaaj>	fizzbuzz loop
Feb 22 21:24:19 <JAA>	Set up a loop that runs every second (by a variable `sleep`), check mod to run commands. Cry if a loop iteration takes more than a second.
Feb 22 21:30:00 <ormaaj>	polyrhythms are easy. Find the least common divisor and use it as a clock interval. Works for all rational dubsteps.
Feb 22 21:31:54 <JAA>	# for ((i=0;i<8;++i)); do sleep 0.$(( 1000000 - 10#${EPOCHREALTIME#*.} )); ((EPOCHSECONDS%3==0))&&printf fizz; ((EPOCHSECONDS%5==0))&&printf buzz; ((EPOCHSECONDS%3==0||EPOCHSECONDS%5==0))&&echo; done | paste - - - -
Feb 22 21:32:01 <shbot>	JAA: no output within the time limit
Feb 22 21:32:05 <JAA>	Booo
Feb 22 21:33:55 <JAA>	Was the time limit changed? I thought it was 10 seconds.
Feb 22 21:34:08 <ormaaj>	nah it's always been 3
Feb 22 21:34:18 <akoana>	ormaaj: hmm, least common divisor? not greatest common divisor?
Feb 22 21:34:37 <JAA>	# sleep 4; echo ormaaj: nope
Feb 22 21:34:42 <shbot>	JAA: ormaaj: nope
Feb 22 21:34:48 <ormaaj>	10 is long :O
Feb 22 21:35:15 <JAA>	Maybe shbot was just slow and that's why I misremember.
Feb 22 21:35:46 <larryv>	# sleep 5; echo hi
Feb 22 21:35:52 <shbot>	larryv: no output within the time limit
Feb 22 21:37:56 <ormaaj>	gcd rite
Feb 22 21:38:07 <akoana>	:)
Feb 22 21:40:44 <JAA>	I think this is the limit: https://gitlab.com/geirha/shbot/-/blob/0a0719765f9f85bb6bae5e74a69691e953567f36/runqemu#L23
Feb 22 21:41:18 <JAA>	So 6-ish seconds including the VM launching etc.
Feb 22 21:43:49 <han-solo>	/4/4
Feb 22 21:51:18 <nasum>	i can get the loop to tick every second but how do i arrange tasks to run every 5 seconds every 10 seconds in that loop that ticks every second
Feb 22 21:52:11 <N0ZYC>	count to 5
Feb 22 21:59:51 <JAA>	Copy-paste faile above, I blame GitLab: https://gitlab.com/geirha/shbot/-/blob/0a0719765f9f85bb6bae5e74a69691e953567f36/limitcmd.pl#L23
Feb 22 21:59:58 <JAA>	fail, even
Feb 23 05:09:28 <emanuele6>	i just realised that with function substitutions you can use   ${| unset -v var;}     instead of really_unset(){ unset "$@";}; really_unset -v var   :o
Feb 23 05:10:59 <ormaaj>	moo
Feb 23 05:13:11 <ormaaj>	have you tried zsh namerefs yet? These make bash pretty much obsolete.
Feb 23 05:15:25 <emanuele6>	no
Feb 23 05:19:06 <ormaaj>	emanuele6: yes, that is massively problematic because it can alter behavior when you call a function from it.
Feb 23 05:20:06 <ormaaj>	bash should never have used that mechanism for unpeeling locals. It should be a separate option.
Feb 23 05:20:24 <ormaaj>	like, obviously.
Feb 23 05:20:43 <ormaaj>	typical bash insanity
Feb 23 05:21:40 <ormaaj>	also ksh has some interesting new build stuff
Feb 23 05:27:02 <emanuele6>	i meant "no, i have not tried them"
Feb 23 05:28:42 <ormaaj>	I know :)
Feb 23 05:46:17 <ormaaj>	https://bpa.st/raw/S43UK
Feb 23 05:51:54 <emanuele6>	bash wins :)
Feb 23 06:01:34 <emanuele6>	bash locals work like ash/dash locals
Feb 23 06:02:01 <emanuele6>	hmm i wonder if readonly locals in dash work like bash
Feb 23 06:02:35 <emanuele6>	actually i am not even sure   unset var   works like bash in dash
Feb 23 06:04:58 <emanuele6>	hmm, in dash   unset -v var   works like in bash, but also in called functions, so like when you have the localvar_unset shopt on in bash 5.2
Feb 23 06:06:07 <emanuele6>	so i cannot test if  really_unset -v var  can delete local readonlies because you cannot use really_unset in dash
Feb 23 06:08:07 <emanuele6>	oops, i am misremembering you cannot delete local readonlies in bash either; the quirk of local readonlies in bash is that you can shadow them with another local
Feb 23 06:09:15 <emanuele6>	in dash you cannot shadow local readonlies :o
Feb 23 06:10:02 <emanuele6>	# x=out; a () { local x=in; readonly x; b () { local x=shadow; echo "$x" ;}; b; echo "$x" ;}; a; echo "$x"
Feb 23 06:10:04 <shbot>	emanuele6: shadow
Feb 23 06:10:04 <shbot>	emanuele6: in
Feb 23 06:10:04 <shbot>	emanuele6: out
Feb 23 06:10:07 <emanuele6>	d# x=out; a () { local x=in; readonly x; b () { local x=shadow; echo "$x" ;}; b; echo "$x" ;}; a; echo "$x"
Feb 23 06:10:08 <shbot>	emanuele6: dash: 1: local: x: is read only
Feb 23 06:10:27 <emanuele6>	# readonly x=out; a () { local x=in; b () { local x=shadow; echo "$x" ;}; b; echo "$x" ;}; a; echo "$x"
Feb 23 06:10:30 <shbot>	emanuele6: bash: local: x: readonly variable
Feb 23 06:10:30 <shbot>	emanuele6: bash: local: x: readonly variable
Feb 23 06:10:30 <shbot>	emanuele6: etc... ( http://paste.wooledge.org/28800 )
Feb 23 06:10:48 <emanuele6>	in bash you can shadow readonlies as long as they are not global readonlies
Feb 23 06:11:52 <emanuele6>	another difference is that trying to declare a (global) readonly local is a fatal error in dash, while in bash it just makes local fail and print a warning
Feb 23 06:13:36 <emanuele6>	i wonder if anything interesting happens if you use    declare -gr x   to make x a global readonly while there are locals shadowing it
Feb 23 06:18:53 <ormaaj>	I never use them anyway
Feb 23 06:28:24 <emanuele6>	nothing interesting happens :/
Feb 23 06:29:42 <danza>	hi all
Feb 23 06:29:43 <danza>	someone here wrote how to map a command to a signal via bash ... do not recall ... it would be handy to map functions to Ctrl-D when one has to type them often
Feb 23 06:33:11 <emanuele6>	!forget readonly
Feb 23 06:33:11 <greybot>	OK, emanuele6
Feb 23 06:33:21 <bent_fingers>	you can't use readline?
Feb 23 06:34:00 <bent_fingers>	press a keybinding and the signal does what signals do
Feb 23 06:34:04 <emanuele6>	!learn readonly Variables marked readonly (declare -r) are intended to be used with a restricted shell, to stop you from trivially changing PATH to escape the restrictions (etc.). They were never intended to be widely used in scripts. Global readonly variables cannot be shadowed by local variables.
Feb 23 06:34:04 <greybot>	OK, emanuele6
Feb 23 06:35:00 <bent_fingers>	i don't use readonly
Feb 23 06:35:28 <emanuele6>	it was saying that  local var  is inherits the readonly attribute from the global scope which is wrong; maybe it used to be true in earlier versions, or maybe greycat just mixed up readonly with export
Feb 23 06:36:57 <emanuele6>	^D as a readline binding only works if your prompt is not empty
Feb 23 06:37:34 <emanuele6>	if it's empty, the terminal interprets it and reports that it is at end of file to bash
Feb 23 06:38:16 <emanuele6>	maybe bash only enables raw mode when the terminal is not empty, and disables it when it becomes empty
Feb 23 06:40:44 <emanuele6>	hmm, no it is always in raw mode
Feb 23 06:41:22 <danza>	yeah so i would ^D on empty prompt to rerun a command, but forgot how to override the signal handler
Feb 23 06:41:58 <emanuele6>	something in bash handles ^D (0x4) from the terminal before sending it to readline i guess
Feb 23 06:42:21 <danza>	nevermind it is not important
Feb 23 06:42:25 <emanuele6>	danza: ^D is not a signal; normally in a cooked terminal it is a binding that flushes what you have currently typed in to the terminal file
Feb 23 06:43:20 <emanuele6>	^D with nothing typed in, flushes nothing, but still wakes up readers; and if a reader wakes up reading nothing, it interprets that as "there is nothing left to read"
Feb 23 06:44:04 <emanuele6>	^C (SIGINT) and ^\ (SIGQUIT) are signals for example, but ^D is not
Feb 23 06:44:47 <emanuele6>	to disable ^D you just put the terminal in raw mode, but it is already in raw mode in an interactive bash prompt
Feb 23 06:45:38 <emanuele6>	something in bash is handling it before readline can handle it if the prompt is empty
Feb 23 06:46:30 <mute>	danza: help bind
Feb 23 06:48:49 <emanuele6>	it seems there is no way to make that not handle ^D before readline
Feb 23 06:49:15 <danza>	thanks mute. I would bind to ^\ then emanuele6, seems to do nothing in my shell
Feb 23 06:49:17 <emanuele6>	but if you change the eof character of the terminal then that does not happen
Feb 23 06:50:00 <emanuele6>	e.g. if you run   stty eof $'\ct'    then ^D with an empty prompt does not exit, and instead runs the readline binding
Feb 23 06:50:24 <emanuele6>	but then you have to press ^T instead of ^D when running anything :/
Feb 23 06:50:36 <emanuele6>	danza: hmm, why ^\?
Feb 23 06:50:37 <mute>	i would probably not mess with stty.  i use to and it always ends in tears.
Feb 23 06:50:41 <emanuele6>	you can bind any key
Feb 23 06:50:59 <danza>	yeah good point
Feb 23 06:51:23 <emanuele6>	so why ^\? :)
Feb 23 06:51:39 <danza>	yeah good point, i would bind something else
Feb 23 06:55:19 <emanuele6>	oh, you were telling me that ^\ does not do anything in your shell
Feb 23 06:55:34 <emanuele6>	^\ and ^C are terminal bindings not bash bindings
Feb 23 06:56:06 <emanuele6>	when you are running a command you can use them to kill the foreground processes with that SIGQUIT/SIGINT
Feb 23 06:56:52 <emanuele6>	if you run a program that does not exit immediately e.g.  cat    and then press  ^\  you should see that it dies
Feb 23 06:57:17 <emanuele6>	and you will probably also see a message that says   Quit (core dumped)
Feb 23 06:58:24 <emanuele6>	^\ is used to stop processes, so it is kind of like ^C, but it uses a different signal number, and generates a coredump of the program as if it crashed
Feb 23 06:59:07 <danza>	i see, nice
Feb 23 07:10:04 <rkta>	Is there an FAQ entry about launching a long running background job from a script? I want the script to exit after starting the job.
Feb 23 07:14:04 <emanuele6>	you cannot start a job from a script; you could do it declaring a function in your bashrc or calling the script as   . myscript   instead of just   myscript
Feb 23 07:14:35 <emanuele6>	the code needs to run in the interactive shell to add a job
Feb 23 07:14:48 <rkta>	s/job/task
Feb 23 07:15:05 <emanuele6>	then i do not understand the question
Feb 23 07:15:41 <emanuele6>	to run something in the background you just use &
Feb 23 07:15:54 <rkta>	I want to start a long running command from a script. I did not mean a job in the sense of job control.
Feb 23 07:17:21 <emanuele6>	& runs a command in the background   cmd &
Feb 23 07:17:45 <rkta>	With & alone the script does not exit.
Feb 23 07:17:55 <emanuele6>	what do you mean?
Feb 23 07:18:06 <emanuele6>	to exit you use exit
Feb 23 07:19:53 <rkta>	I take that back. Too early in the morning... Anyways, is there an FAQ entry? I don't trust StackOverflow.
Feb 23 08:27:23 <geirha>	heh, someone discovered asort https://old.reddit.com/r/bash/comments/1axonee/how_to_sort_arrays_natively_in_bash/
Feb 23 08:45:59 <ormaaj>	\o/
Feb 23 08:48:09 <ormaaj>	:3
Feb 23 08:49:12 <ormaaj>	mew
Feb 23 10:26:03 <depesz>	hi. is there a way to view history of commands ran in other terminal? they haven't been written to bash_history because this bash hasn't exited yet, and histappend was not set.
Feb 23 10:29:11 <depesz>	geirha: i'm on bash 5.2.21, and enable -p doesn't show asort. any idea as to why?
Feb 23 10:33:01 <emanuele6>	enable -p shows the builtins that are currently loaded, so just the default ones by default
Feb 23 10:33:19 <emanuele6>	you would not see asort there unless you enable it. with enable asort
Feb 23 10:33:41 <emanuele6>	but iirc asort is not installed by default
Feb 23 10:34:21 <depesz>	ah. ok. looks like i don't have it.
Feb 23 10:34:45 <depesz>	they way geirha wrote it seemed to me that asort is well known, broadly available. doesn'
Feb 23 10:34:51 <depesz>	doesn't look like this from my place in debian :)
Feb 23 10:34:56 <ormaaj>	all of the "examples" are installed if they're enabled in the build, generally.
Feb 23 10:35:07 <emanuele6>	it is not a good idea to use it anyway, i remember it had some memory leaks, and maybe it even crashed for some inputs
Feb 23 10:35:23 <emanuele6>	ormaaj: not all, some are blacklisted in the makefile
Feb 23 10:35:38 <emanuele6>	e.g. necho
Feb 23 10:35:48 <emanuele6>	and asort :D
Feb 23 10:36:03 <emanuele6>	those --> OTHERPROG = necho hello cat pushd asort
Feb 23 10:36:21 <ormaaj>	I have both
Feb 23 10:36:45 <emanuele6>	did you install them manually?
Feb 23 10:37:23 <ormaaj>	no
Feb 23 10:38:18 <ormaaj>	I have my own blacklist for skipping over the useless loadables and "greylist" for renaming some crappy ones with function wrappers.
Feb 23 10:41:39 <ormaaj>	like head
Feb 23 10:41:52 <emanuele6>	the makefile does install OTHERPROG in any configuration
Feb 23 10:41:52 <ormaaj>	piece of crap
Feb 23 10:42:02 <emanuele6>	s/does/& not/
Feb 23 10:42:36 <ormaaj>	(the  -c is for "not crap)
Feb 23 10:42:46 <emanuele6>	# enable asort; a=( z y x ); asort -i a a; typeset -p a
Feb 23 10:42:48 <shbot>	emanuele6: declare -a a=([0]="-3472328296227680305" [1]="4049355305727046445" [2]="1")
Feb 23 10:42:52 <ormaaj>	(the  -c is for "not crap")
Feb 23 10:42:59 <emanuele6>	# enable asort; typeset a=(z y x) b c=1; asort -i b a; asort -i c a
Feb 23 10:43:00 <shbot>	emanuele6: no output
Feb 23 10:43:06 <emanuele6>	# enable asort; typeset a=(z y x) b c=1; asort -i b a; asort -i c a; typeset -p a b c
Feb 23 10:43:08 <shbot>	emanuele6: declare -a a=([0]="z" [1]="y" [2]="x")
Feb 23 10:43:08 <shbot>	emanuele6: declare -a b
Feb 23 10:43:08 <shbot>	emanuele6: declare -a c=([0]="2" [1]="1" [2]="0")
Feb 23 10:43:54 <emanuele6>	i sent a patch for those bugs, and other internal bugs in asort, 11 months ago, but it was ignored :/
Feb 23 10:44:16 <ormaaj>	WTF
Feb 23 10:44:24 <ormaaj>	>:(
Feb 23 10:45:40 <emanuele6>	if you use it in a function you have to remember to declare the local with  arrname=()   instead of just arrname or it will not find it
Feb 23 10:46:06 <ormaaj>	I will just find your patchs and apply them
Feb 23 10:47:19 <Aryan>	is there any tool to recursively run the commands behind the pipe, so I could understand what each portion of pipe does?
Feb 23 10:47:21 <Aryan>	EXEC=$(grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2 | cut -d " " -f 1)
Feb 23 10:48:10 <ormaaj>	recursively?
Feb 23 10:48:49 <ormaaj>	What the commands in the pipeline actually do has no impact on the way the redirections are set up.
Feb 23 10:49:26 <Aryan>	I mean it executes grep -e '^Exec=.*' "${HERE}"/*.desktop, shows the output, then "grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1" , so on
Feb 23 10:50:33 <ormaaj>	You can use tee but the output will be in a random order unless you aggregate the results.
Feb 23 10:51:54 <ormaaj>	You should replace the head and cut with sed anyway
Feb 23 10:54:25 <ormaaj>	or awk
Feb 23 10:54:45 <ormaaj>	(the entire thing can be replaced with awk)
Feb 23 10:56:23 <emanuele6>	the entire awk can be replaced by cut head and grep
Feb 23 10:56:35 <ormaaj>	gross tho
Feb 23 10:57:59 <emanuele6>	hmm, what is the point of head -n1 if you are checking multiple files that all have Exec=?
Feb 23 10:58:20 <emanuele6>	i just looked at that query; i think you can replace the entire thing with just one gnu grep command :D
Feb 23 10:58:24 <Aryan>	emanuele6, ask him: https://github.com/AppImage/AppImageKit/blob/master/resources/AppRun
Feb 23 10:58:39 <Aryan>	emanuele6, really?
Feb 23 10:58:42 <emanuele6>	yes
Feb 23 10:58:53 <Aryan>	thank you ormaaj for the tee
Feb 23 10:59:09 <emanuele6>	Aryan: grep -om1 -- '^Exec=\K[^ ]*' "${HERE}"/*.desktop
Feb 23 10:59:12 <emanuele6>	err
Feb 23 10:59:17 <emanuele6>	  grep -Pom1 -- '^Exec=\K[^ ]*' "${HERE}"/*.desktop
Feb 23 10:59:36 <Aryan>	dammn
Feb 23 11:00:25 <Aryan>	awsome! :D
Feb 23 11:00:33 <emanuele6>	yes!
Feb 23 11:01:22 <ormaaj>	can't use -- with grep
Feb 23 11:01:50 <emanuele6>	?
Feb 23 11:02:07 <emanuele6>	why not?
Feb 23 11:02:15 <ormaaj>	--  will be treated as the pattern. grep doesn't accept --
Feb 23 11:02:29 <emanuele6>	lol, no
Feb 23 11:02:38 <emanuele6>	# grep -m1 -- . .bashrc
Feb 23 11:02:39 <shbot>	emanuele6: # disable history expansion
Feb 23 11:04:14 <ormaaj>	why does that work?
Feb 23 11:04:32 <emanuele6>	why would that not work?
Feb 23 11:05:07 <emanuele6>	the first positional argument is patterns, and the other arguments are file when you don't use -e
Feb 23 11:05:28 <emanuele6>	like sed
Feb 23 11:05:44 <emanuele6>	except for sed is commands instead of just patterns
Feb 23 11:06:18 <ormaaj>	heh I thought the manual said it doesn't work
Feb 23 11:06:24 <Aryan>	so what causes it to not print the Exec=? how does the regex do that?
Feb 23 11:06:52 <Aryan>	you do this with \K?
Feb 23 11:07:16 <emanuele6>	foo\K is short for  (?<=foo)
Feb 23 11:07:36 <emanuele6>	it's a lookbehind assertion; there must be foo before the match, but foo is not part of the match
Feb 23 11:08:05 <Aryan>	ok I get it, wow. awsome.
Feb 23 11:08:25 <emanuele6>	aw
Feb 23 11:08:30 <Aryan>	pretty handy
Feb 23 11:10:22 <ormaaj>	(?^=foo) for look up assertion.
Feb 23 11:13:19 <emanuele6>	(?😎=foo) for look cool assertion
Feb 23 11:24:07 <ormaaj>	what is the point of -e then?'
Feb 23 11:28:09 <emanuele6>	same as sed; it is more convenient to write   -e foo -e bar   instead of   $'foo\nbar'
Feb 23 11:29:14 <ormaaj>	hm? why would you have more than one?
Feb 23 11:29:25 <ormaaj>	they do totally different things
Feb 23 11:30:00 <ormaaj>	multiple -e's in sed allow you to run another expression against the same input line
Feb 23 11:30:55 <emanuele6>	sed $'cmd\ncmd' also lets you do that
Feb 23 11:31:49 <emanuele6>	hmm, i use grep with multiple patterns very often
Feb 23 11:40:55 <balrog_>	hi, I have an issue with a rather large sample of data I'd like to create b2sums for. After a long time investigating the issue I had about missing samples in my script, I encircled the error here. I think b2sum has issues with those wired filenames. https://0x0.st/H5Op.txt
Feb 23 11:42:50 <ormaaj>	newline in a pattern in grep turns into an or?
Feb 23 11:44:31 <emanuele6>	yes
Feb 23 11:45:02 <emanuele6>	-e foo -e bar  prints line that match "foo" or match "bar"   -e $'foo\nbar'  is the same
Feb 23 11:45:27 <balrog_>	to be more precise http://0x0.st/H5OO.txt that's a bug in b2sum?
Feb 23 11:45:35 <Earnestly>	ormaaj: foo\nbar == -e foo -e bar
Feb 23 11:45:46 <ormaaj>	:o
Feb 23 11:46:05 <Earnestly>	ormaaj: how -f works too, with newline separation
Feb 23 11:46:50 <Earnestly>	balrog_: It doesn't have an issue, what happens is if you have a weird filename it'll prefix the checksum with \ that indicates it's using an escaping scheme to represent it
Feb 23 11:46:59 <emanuele6>	balrog_: the "\"? that is correct; sum programs use a leading \ to indicate that \\ \n \r in the path are special
Feb 23 11:48:36 <balrog_>	oh, so in my follow up scripts I was searching for
Feb 23 11:49:15 <balrog_>	sed 's|\([a-z0-9]*\).*$|\1|g' - this way I wanted to extract the b2sum and strip the filenames. I have to correct it then
Feb 23 11:49:45 <Earnestly>	balrog_: You can safely extract the first field without such complexity, but you must check if the first character is \ and handle it
Feb 23 11:51:02 <ormaaj>	I didn't know that
Feb 23 11:52:02 <ormaaj>	I would just use -z
Feb 23 11:53:26 <ormaaj>	or switch to rhash
Feb 23 11:53:30 <balrog_>	<Earnestly> I guess you are correct, that was the first solution to that came to my mind displaying the first field without the ":" b2sum inserts. Can you give me an example please, without just adding '\' to the sed thing as a possibility outside the group? I don't even know how to write the sed rule for the *possibility* of a matching "\" right after "$"
Feb 23 11:55:04 <balrog_>	sample output here https://0x0.st/H5Op.txt , I do have 670000~ files in total
Feb 23 11:55:08 <ormaaj>	ugh -z is so much better.
Feb 23 11:55:19 <Earnestly>	balrog_: awk '{if(substr($1, 1, 1) == "\\") print substr($1, 2); else print $1}'
Feb 23 11:57:33 <Earnestly>	balrog_: And as ormaaj suggests, -z won't include the \. Generally nul termination is correct when working with filenames/paths. E.g. gawk -v RS='\0' '{print $1}'
Feb 23 11:58:13 <balrog_>	<Earnestly> this doesn't replace my sed followup script I think, any way to do it all in one command from "\hash: filename" or "hash: filename" to "hash"?
Feb 23 11:58:25 <balrog_>	ok
Feb 23 11:58:48 <Earnestly>	Actually, don't need that substr, can: awk 'index($1, "/") == 1 {print substr($1, 2); next} {print $1}'
Feb 23 11:59:03 <Earnestly>	balrog_: I think the solution you need is to stop using sed
Feb 23 11:59:30 <ormaaj>	sed -z also handy
Feb 23 11:59:32 <Earnestly>	balrog_: The format does not include a : btw
Feb 23 11:59:54 <balrog_>	<ormaaj> rhash anyhow has lower collision resistence and worse performance? I need to run the script on armv7h 32bit cpu
Feb 23 12:00:35 <Earnestly>	balrog_: If you can recreate the data, use -z instead. You might also want to use b3sum if performance is a concern as it is /significantly/ faster
Feb 23 12:00:39 <Earnestly>	b2sum's defaults are a bit silly
Feb 23 12:01:02 <balrog_>	<Earnestly> you are right, no Idea why I had the : in mind/where it's  from
Feb 23 12:01:16 <Earnestly>	balrog_: Btw, including <nick> in your reply makes it seems like you're quoting people
Feb 23 12:02:00 <Earnestly>	ormaaj: b3sum has no -z but it does have --no-names which obviates the need to remove the filename afterwards
Feb 23 12:03:26 <ormaaj>	I don't see why rhash would be different given same algo
Feb 23 12:04:20 <balrog_>	just to complete my whole issue: After made sure with rmlint (filesize/atime check by default I guess) there are no duplicates in my sample, I use find/b2sum for the above output and generate a sumsonly file. Doing "cat file|sort > file.sorted" && "cat file.sorted |sort -uc" I can be sure there are no collisions?
Feb 23 12:05:55 <Earnestly>	balrog_: b3sum --no-names | sort | uniq -d
Feb 23 12:06:28 <Earnestly>	balrog_: But rmlint already does this, it even has b2sum support
Feb 23 12:06:42 <Earnestly>	I think
Feb 23 12:07:02 <Earnestly>	Yeah blake2b and blake2bp
Feb 23 12:08:38 <balrog_>	https://bpa.st/VJQGQ
Feb 23 12:09:23 <Earnestly>	In fact, if all you're doing is rolling b2sum over your files and you want to list duplicates: find . -type f -exec b2sum {} + | sort -k1,1 | awk 'seen[$1]++'
Feb 23 12:09:32 <Earnestly>	Sorry, doesn't need sort there
Feb 23 12:09:46 <Earnestly>	find . -type f -exec b2sum {} + | awk 'seen[$1]++'
Feb 23 12:09:52 <Earnestly>	!euo > balrog_
Feb 23 12:09:52 <greybot>	balrog_: The so-called unofficial bash strict mode (set -euo pipefail) is overhyped nonsense. See https://lists.gnu.org/archive/html/help-bash/2020-04/msg00049.html and https://mywiki.wooledge.org/BashFAQ/105
Feb 23 12:10:14 <balrog_>	<Earnestly>, no I do need this file later on, comparing a local dataset with a remote one, using comm
Feb 23 12:10:23 <Earnestly>	balrog_: You might also want to consider just learning and using borgbackup (or anything that uses content-addressable storage)
Feb 23 12:10:33 <ormaaj>	I don't have a b3sum command
Feb 23 12:11:14 <Earnestly>	balrog_: Why are you calling b2sum for each file you find? That must be painfully slow
Feb 23 12:11:49 <emanuele6>	inb4sum command
Feb 23 12:14:58 <Earnestly>	ormaaj: You have to go a bit out of your way to get it if distro doesn't provide: https://github.com/BLAKE3-team/BLAKE3
Feb 23 12:15:25 <balrog_>	<Earnestly> isn't this covered by "pipefail"? I had a lot of situations where I've had minor bugs/uncatched errors in my scripts where "set -euo pipefail" saved me a lot of time, extending it to -euxo pipefail when needed to investigate. What would you use instead?
Feb 23 12:15:35 <Earnestly>	ormaaj: It's basically the same as blake2 but they use 7 rounds instead of 10
Feb 23 12:15:55 <Earnestly>	balrog_: Error checking
Feb 23 12:16:05 <ormaaj>	we have a blake3 library but no utility associated
Feb 23 12:18:37 <Earnestly>	balrog_: Or ideally read the links in that response
Feb 23 12:34:47 <balrog_>	<Earnestly> good to know. I see your point and had unexpected results in scripts like https://bpa.st/2NRH2 leading me to add a some tests. An error here leads to being stuck in kernelpanic/initramfs shell
Feb 23 12:41:21 <Earnestly>	balrog_: For a laugh, opinionated rewrite: https://0x0.st/H5On.sh - I'm not really sure what your goals are so this may be meaningless
Feb 23 12:41:28 <balrog_>	<Earnestly> will check blake3 out later, 7 instead of 10 only applies for blake2s, but I'm using blake2b I guess on my 64bit-arm/desktop? It seems to add a lot speed as more threads you have. Can't wait to see the results
Feb 23 12:42:26 <Earnestly>	ormaaj: Btw, do you know that GNU cksum(1) is quite similar to rhash now? I.e. check the manpage: https://0x0.st/H5O5.txt
Feb 23 12:45:56 <Earnestly>	balrog_: 2b is 12 rounds, 2s is 10
Feb 23 12:46:03 <Earnestly>	https://datatracker.ietf.org/doc/html/rfc7693#section-2.1
Feb 23 12:47:29 <balrog_>	<Earnestly> very nice, ty :) having a big set of data on my pc and other sets on different machines. (I can't/don't know how to use rmlint via ssh). I basicly have three buckets of data: Bad, unviewed, good. Bad and good are local. Unviewed are remote, talking about terrabytes. I want to delete the dups in remote "unviewed" datasets by using those b2sum lists and "comm" program in bash
**** BEGIN LOGGING AT Fri Feb 23 14:47:00 2024

Feb 23 14:47:00 *	Now talking on #bash
Feb 23 14:47:00 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 23 14:47:00 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 23 14:49:22 <rlikon>	nvm
Feb 23 14:49:26 <rlikon>	solved
**** BEGIN LOGGING AT Fri Feb 23 14:52:01 2024

Feb 23 14:52:01 *	Now talking on #bash
Feb 23 14:52:01 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 23 14:52:01 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 23 15:01:39 <maccampus>	 My Mac went into recoverymode & i noticed zsh was changed to bash. is Bash still the standard sh in recovery mode ? Why ?
Feb 23 15:03:24 <phy1729>	!os
Feb 23 15:03:24 <greybot>	Take it to your OS channel. Your issue is specific to your Operating System or Distribution.
Feb 23 15:10:30 <tirnanog>	if that environment drops you in as root, it's probably because the login shell for the root user is defined as /bin/sh.
Feb 23 15:15:32 <Lynx->	Hello tirnanog
Feb 23 15:16:25 <tirnanog>	good day.
Feb 23 15:16:27 <Lynx->	I just wanted to thank you for your suggestion from ages ago
Feb 23 15:16:29 <Lynx->	https://github.com/lynxthecat/adblock-lean/blob/9de4b1ba855a76306ec977146d61e22e4af8d963/adblock-lean#L308
Feb 23 15:16:40 <tirnanog>	oh, I remember that.
Feb 23 15:17:08 <Lynx->	Yes, it saved quite a bit of memory. Now a user reported using huge 220K blocklist on 64MB router.
Feb 23 15:17:14 <tirnanog>	splendid.
Feb 23 15:18:42 <lopid>	marvellous
Feb 23 15:30:55 <Masklin>	I'm having a meltdown. I have two files containing newline-separated number strings, length 1-10. I want to see how many strings are shared between the two.
Feb 23 15:31:06 <Masklin>	I thought grep -F would match whole lines, but I get no matches?
Feb 23 15:32:20 <Masklin>	Uh
Feb 23 15:32:48 <llua>	man comm
Feb 23 15:33:11 <selckin>	cat a b | sort | uniq -c | sort -n
Feb 23 15:33:13 <tirnanog>	# grep -cxFf <(printf %s\\n {1..20}) <(printf %s\\n {10..15})
Feb 23 15:33:14 <shbot>	tirnanog: 6
Feb 23 15:33:28 <tirnanog>	grep is fine. just have to know how to use it.
Feb 23 15:35:31 <tirnanog>	although, I didn't specify the operands in the order I intendeed. -f needles haystack, basically.
Feb 23 15:36:05 <Earnestly>	(grep also doesn't need inputs to be sorted, which is nice)
Feb 23 15:40:16 <tirnanog>	if you were not using -f, of course you'd get no matches.
Feb 23 15:40:35 <tirnanog>	(but it's generally sensible to show what you are doing when asking such questions)
Feb 23 15:41:42 <Masklin>	[1-9][0-9]{1,10}
Feb 23 15:41:44 <Masklin>	What am I missing?
Feb 23 15:41:47 <Masklin>	I'm going crazy
Feb 23 15:41:59 <Masklin>	This should match two or more digits, the first one of which is never zero.
Feb 23 15:42:03 <Masklin>	Does it not???
Feb 23 15:42:12 <tirnanog>	you don't need a number-matching pattern. it has no bearing on the stated goal.
Feb 23 15:42:14 <Masklin>	This is grep.
Feb 23 15:42:31 <tirnanog>	you are asking for the count of the intersection of lines.
Feb 23 15:42:39 <Masklin>	Oh you mean I should diff?
Feb 23 15:43:05 <tirnanog>	I'm not sure how a working example employing grep and "grep is fine" translates as "you should use diff".
Feb 23 15:43:41 <tirnanog>	grep -cxFf file1 file2
Feb 23 15:44:19 <tirnanog>	preferably with the shorter of the two files being "file1" there, but it's not a requirement.
Feb 23 15:53:07 <tirnanog>	by the way, -F does not instruct grep to match whole lines. it's -x that has that particular effect.
Feb 23 16:00:49 <Riviera>	maybe one should collect option combinations that form words.
Feb 23 16:01:39 <Riviera>	like grep -Fixe or rsync -Pavian (which is German for baboon:P)
Feb 23 16:03:16 <tirnanog>	it's a good idea but I can't in this instance.
Feb 23 16:06:32 <tirnanog>	the notion reminds me of a document I read a few days ago in which one author of a library was criticising another, similar, one on the basis of its lack of "huffmanization"; the common case not being reflected by the defaults and requiring too many rote options.
Feb 23 16:08:56 <tirnanog>	gentoo is a good example. upgrading is easy. just run emerge -uaDNv @world. couldn't be simpler! oh, but go back and repeat with --with-bdeps=y if one's later emerge --depclean/c phase fails because ... reasons.
Feb 23 16:11:48 <tirnanog>	-DuaN works there, I suppose.
Feb 23 16:32:11 <emanuele6>	geirha: ah, thank you. i didn't notice
Feb 23 16:48:53 <Momentum>	Hi
Feb 23 16:49:35 <Momentum>	is there anything wrong about this bit to include the git branch in PS1?
Feb 23 16:49:37 <Momentum>	https://sprunge.us/Kf4vna?sh
Feb 23 16:50:25 <Momentum>	sometimes when i use the up arrow to look at the commands history some commands get stuck
Feb 23 16:51:36 <emanuele6>	Momentum: yes, you should print the colour codes between \1 and \2 or bash will think they occupy space in the terminal
Feb 23 16:51:37 <tirnanog>	you haven't escaped the non-printing characters. also, it has to be done in a particular way for functions called by PS1.
Feb 23 16:51:39 <tirnanog>	!faq fancy
Feb 23 16:51:40 <greybot>	https://mywiki.wooledge.org/BashFAQ/053 -- I have a fancy prompt with colors, and now bash doesn't seem to know how wide my terminal is.  Lines wrap around incorrectly.
Feb 23 16:52:15 <emanuele6>	with echo -e the codes for \1 and \2 are \01 and \02
Feb 23 16:53:40 <Momentum>	ah! interesting
Feb 23 16:53:44 <Momentum>	thank you let me try that
Feb 23 17:04:25 <Momentum>	solved the original problem but now the space after the $ disappears when i go through the history
Feb 23 17:06:14 <Soliton>	not sure why you think you solved anything then.
Feb 23 17:06:36 <Soliton>	you need to tell bash what parts of the prompt do not move the cursor.
Feb 23 17:07:37 <Soliton>	if you do not do it properly then it does not know where the cursor is and the prompt will get messed up.
Feb 23 17:08:28 <Momentum>	okay
Feb 23 17:08:59 <Momentum>	i think this idea of evaluating the function in the PS1 variable is messing it up
Feb 23 17:10:02 <Soliton>	for dynamic strings in the prompt you do need to use \01 and \02 as mentioned in the faq.
Feb 23 17:10:56 <Momentum>	well i did that i think
Feb 23 17:10:58 <Momentum>	https://sprunge.us/yhuwPn?sh
Feb 23 17:12:11 <Soliton>	what is the last " " supposed to do?
Feb 23 17:12:40 <Momentum>	to add a space between the branch name and the $
Feb 23 17:12:47 <Soliton>	printf will repeat the format string if you give more arguments than required.
Feb 23 17:13:04 <Soliton>	just put it in the format then.
Feb 23 17:13:25 <Momentum>	if i put it in the format and there's not git repo initialized it would be an additional space
Feb 23 17:13:32 <Soliton>	printf '\001%s\002%s\001%s\002 ' "$blue" "$branch" "$reset"
Feb 23 17:13:39 <Momentum>	AH!
Feb 23 17:13:49 <Momentum>	pfft i forgot how printf works
Feb 23 17:14:19 <Momentum>	yeah this is perfect
Feb 23 17:14:21 <Momentum>	thank you so much
Feb 23 17:14:47 <Soliton>	you're welcome.
Feb 23 17:14:48 <Momentum>	i thought by format you meant i add it in the PS1
Feb 23 17:14:59 <Momentum>	evaluation
Feb 23 17:15:03 <Momentum>	but yeah that's good
Feb 23 17:15:49 <Soliton>	you could add the color formatting in PS1 directly and use \[\] since that'll look fine even if the function prints nothing.
Feb 23 17:16:22 <Momentum>	oh
Feb 23 17:16:35 <Soliton>	you'd just have superfluous escape codes in there if there is no branch.
Feb 23 17:16:55 <Momentum>	i kinda tried that but i don't remember what went wrong
Feb 23 17:17:14 <Momentum>	this looks clean enough to me though so
Feb 23 17:21:27 <Soliton>	well calling tput all the time is not so great. if you put the color in PS1 you'd just call it once when building PS1.
Feb 23 17:22:03 <Soliton>	or you could cache tput output in a global variable.
Feb 23 17:22:49 <Momentum>	aah i see
Feb 23 17:23:01 <Momentum>	i will do that
Feb 23 17:30:58 <cart_>	Is there a bash command that I can use to make another program execute and quit after a certain timeout?
Feb 23 17:31:23 <lopid>	there are various 'timeout' implementations
Feb 23 17:31:33 <lopid>	!timeout
Feb 23 17:31:33 <greybot>	http://mywiki.wooledge.org/BashFAQ/068 -- How do I run a command, and have it abort (timeout) after N seconds?
Feb 23 17:55:35 <flower_>	Earnestly: one more question about process management in the realm of non-session-manager (NSM), which starts a audio application, gets it's pid and stops the application by using SIGTERM. Now there is a terminal application which will reexecute itself into a xterm. When that application announces itself to the NSM server with a pid (which it got using getpid() ), that pid differs from the process started
Feb 23 17:55:41 <flower_>	by the NSM server. Now I did a little test and used getppid() instead of getpid() and the server now gets the expected pid. I assume, that is the pid of the terminal in which the application was launched, and so the NSM server sends SIGTERM to the terminal, when it wants to stop the application. It it a safe way to handle a application which is started in a terminal in this situation?
Feb 23 17:56:26 <Inline>	ppid and pid,hmmm
Feb 23 17:56:47 <flower_>	https://www.man7.org/linux/man-pages/man2/getpid.2.html
Feb 23 17:57:09 <Inline>	uncatchable signals and signals that have to be handled hmmmm
Feb 23 17:57:42 <Inline>	async safe and thread safe signals
Feb 23 17:57:48 <Inline>	oh man
Feb 23 17:57:59 <flower_>	normally the server launched a application and knows it's pid. But now there is a terminal as extra layer so to say
Feb 23 17:58:41 <flower_>	I assume that terminal is the parent of the application which is started in that terminal
Feb 23 17:59:31 <flower_>	I think here it is started in the terminal: https://github.com/jpcima/adljack/blob/master/sources/jackmain.cc#L260
Feb 23 18:09:42 <phox>	hey, wondering if there's a "not putting conditionals inside of config files" tidy way to make stuff like ~/.bash_profile and friends conditional, specifically I want to have a macOS terminal profile get me a different bash environment than I normally have... the farthest it more or less lets me go is executing a command when the shell starts (which is pretty janky as last I checked it was an input race ugh)
Feb 23 18:09:48 <phox>	... but maybe specify an alternate config as a parameter to bash -l there?
Feb 23 18:11:14 <tirnanog>	if you are only concerned with Terminal.app, alternative parameters could be reasonable.
Feb 23 18:11:36 <phox>	yeah that's the only way I care about getting into this shell configuration
Feb 23 18:12:11 <tirnanog>	it lets you configure a program to run. uncheck "Run inside shell", presumably.
Feb 23 18:12:18 <phox>	yeah
Feb 23 18:13:30 <phox>	so just create an alternative ~/.bash_profile and pass it via whatever option and call it good I guess?
Feb 23 18:13:49 <phox>	just wanting to avoid finding out later on that there's something janky and problematic about how I did this :P
Feb 23 18:15:01 <tirnanog>	I just gave it a try. doesn't work as I expect. hmm.
Feb 23 18:16:05 <phox>	seems to work for me?
Feb 23 18:16:23 <phox>	the command is a /path/to/other/bash -l
Feb 23 18:16:42 <tirnanog>	yes. but I can't get it to work with --rcfile for some reason.
Feb 23 18:16:45 <tirnanog>	trying to figure out how it's being parsed.
Feb 23 18:17:20 <phox>	ah yeah I didn't try that part yet
Feb 23 18:17:37 <tirnanog>	huh. it's order-sensitive. didn't know that.
Feb 23 18:17:38 <phox>	(part of the thing was also using an alternate bash binary so that works)
Feb 23 18:18:05 <tirnanog>	/other/bash --rcfile /path/to/file -il works
Feb 23 18:18:27 <phox>	ah right -i so it doesn't go "ha you're not a tty"
Feb 23 18:18:36 <phox>	forgot about that
Feb 23 18:19:18 <tirnanog>	this is what I did initially:
Feb 23 18:19:36 <tirnanog>	# bash -il --rcfile /dev/null |& head -n1
Feb 23 18:19:39 <shbot>	tirnanog: bash: --: invalid option
Feb 23 18:19:47 <tirnanog>	can't put --rcfile there.
Feb 23 18:19:58 <phox>	mm, good find heh
Feb 23 18:21:08 <tirnanog>	I don't use long options much, as you may have surmised :D
Feb 23 18:22:55 <phox>	same
Feb 23 18:26:03 <phox>	related question, I have ulimit -u in my .bash_profile and of course if I `bash -l` within the shell it complains it can't set it because it's one-time (even though the value is the same it still tries), is there a tidy way to make that go away?  I guess I could just put a conditional that checks the current value and doesn't try to increase it if it's already increased
Feb 23 18:27:38 <tirnanog>	perhaps check $SHLVL
Feb 23 18:30:35 <phox>	ahh that's a point
Feb 23 18:31:15 <phox>	lol I used to have more of that in my head, now I just make my variable expansions and conditionals safe and consider that enough :)
Feb 23 18:31:40 <bent_fingers>	i don't have anything in my head :(
Feb 23 18:37:54 <fdan>	hi there, do we have a global bashrc file for all remote users
Feb 23 18:38:34 <phox>	can you explain what you're trying to do so we understand the terminology more clearly?
Feb 23 18:39:17 <fdan>	hey we used to have aliases set for all users for eg
Feb 23 18:39:18 <fdan>	if i login as my user and type ubu, it would do a sudo su -l ubuntu
Feb 23 18:39:24 <Earnestly>	!dotfiles
Feb 23 18:39:24 <greybot>	Set up your environment (PATH, LANG, EDITOR, ...) in ~/.bash_profile. Set up your bash shell (PS1, functions, shopts, ...) in ~/.bashrc. Then source .bashrc from .bash_profile. See <http://mywiki.wooledge.org/DotFiles>. For GUI logins, SEE YOUR DOCUMENTATION or ask your OS channel because they're all different and we don't know.
Feb 23 18:39:29 <fdan>	or if i do ec2, it would do a sudo su -l ec2-user
Feb 23 18:40:03 <phox>	it should be the ones in /etc (see documentation as linked above), so maybe they were overwritten, or permissions snafu, or...
Feb 23 18:41:10 <phox>	`man bash` discusses the order they're loaded in and when and why (different between login and non-login shells; others are assumed to inherit environment from a login shell in concept)
Feb 23 18:41:44 <Soliton>	if you want system wide commands then just write a script and put it somewhere in PATH.
Feb 23 18:42:19 <fdan>	Soliton i want the aliases to be available to all users when they ssh
Feb 23 18:42:31 <tirnanog>	whether there is a system-wide bashrc depends on whether your package maintainer decided to define SYS_BASHRC at the time of building bash. by default is is unset. quite a few operating systems have an /etc/profile (for login shells) that source from /etc/profile.d/*.sh, so that couldb e another way to do it.
Feb 23 18:42:33 <Soliton>	because you want to make it complicated or why?
Feb 23 18:42:45 <Soliton>	!aliases
Feb 23 18:42:46 <greybot>	Aliases suck. They don't work in scripts. They can't take arguments. They have special evil magical powers that break all expectations. See http://mywiki.wooledge.org/BashFAQ/080 for starters.
Feb 23 18:42:46 <tirnanog>	or you could do what Soliton said and create scripts.
Feb 23 18:44:20 *	ormooj like aliases
Feb 23 18:44:31 <tirnanog>	you mentioned ubuntu so an /etc/profile.d/ snippet that checks for an interactive shell would suffice: if [[ $- == *i* ]]; then alias foo=bar; fi
Feb 23 18:44:34 <fdan>	tirnanog i dont see anything in *.sh in /etc/profile.d
Feb 23 18:44:53 <tirnanog>	there's a solution for things not existing, though, which is to create them.
Feb 23 18:45:08 <fdan>	when i do which ubu, it says the aliases
Feb 23 18:45:12 <phox>	tirnanog: ahh weird it's not using my .bash_profile =/
Feb 23 18:45:18 <fdan>	but how do i find where exactly is the aliases are present
Feb 23 18:46:23 <tirnanog>	fdan: BASH_XTRACEFD=1 PS4='+$BASH_SOURCE:$LINENO: ' bash -ixlc '' | grep '\balias\b'
Feb 23 18:46:32 <fdan>	ok i see it in ~/.bashrc
Feb 23 18:46:37 <ormooj>	Aliases make the cthuhlu happy. ~~(~.~)~~
Feb 23 18:46:44 <fdan>	other users are also able to use the aliases, how is it possible?
Feb 23 18:46:53 <tirnanog>	I already told you how to do it.
Feb 23 18:47:16 <tirnanog>	"an /etc/profile.d/ snippet that checks for an interactive shell would suffice: if [[ $- == *i* ]]; then alias foo=bar; fi"
Feb 23 18:48:17 <fdan>	tirnanog when i cd to /etc/profile.d and then do grep -i 'ubu' .
Feb 23 18:48:21 <fdan>	i dont see any result
Feb 23 18:48:24 <tirnanog>	it doesn't matter what is there.
Feb 23 18:48:28 <tirnanog>	what matters is what you want.
Feb 23 18:48:41 <tirnanog>	call it /etc/profile.d/local-aliases.sh or something.
Feb 23 18:49:54 <fdan>	no i dont find any occurences
Feb 23 18:50:04 <fdan>	for eg: when i do grep -r 'ubu' .
Feb 23 18:50:04 <tirnanog>	occurences of what?
Feb 23 18:50:06 <phox>	tirnanog: ugh it looks like --rcfile only works if it's not a login shell?  booo  heh
Feb 23 18:50:10 <tirnanog>	what is grep even supposed to prove?
Feb 23 18:50:19 <tirnanog>	I'm literally telling you how to custome system-wide login shells.
Feb 23 18:50:36 <fdan>	i was expecting alias ubu='sudo su -l ubuntu'
Feb 23 18:50:49 <fdan>	i was expecting to see this somewhere inside /etc/profile.d?
Feb 23 18:50:51 <tirnanog>	I also told you how to trace to find where existing aliases are defined.
Feb 23 18:50:53 <tirnanog>	already.
Feb 23 18:51:00 <ormooj>	phox: really? :o
Feb 23 18:51:05 <tirnanog>	it's very frustrating that you are not (seemingly) acknowledging my responses.
Feb 23 18:51:14 <fdan>	yes tirnanog, i got that, but my question is how other users are able to have it in their own ~/.bashrc
Feb 23 18:51:34 <phox>	ormooj: documentation seems to agree and I'm using --rcfile ~/.bash_profile_other and it's still sourcing ~/.bash_profile
Feb 23 18:51:38 <tirnanog>	fdan: I don't understand the question. other users can have it in their own ~/.bashrc by ... editing their ~/.bashrc?
Feb 23 18:51:48 <tirnanog>	fdan: but you're asking for system-wide aliases
Feb 23 18:52:17 <tirnanog>	fdan: I'm telling you that creating a sourceable file under /etc/profile.d is one way to achieve that.
Feb 23 18:52:17 <fdan>	tirnanog so we have an image, and everyone is able to ssh to the instance and then everyone is able to just type ubu
Feb 23 18:52:27 <phox>	i.e. --rcfile only has an effect when it would have read .bashrc instead of .bash_profile
Feb 23 18:52:27 <tirnanog>	fdan: ok. and?
Feb 23 18:52:28 <fdan>	which switches user to ubuntu user
Feb 23 18:52:42 <tirnanog>	fdan: what does "type ubu" say it is?
Feb 23 18:52:52 <phox>	so maybe there's no option for overriding the interactive login shell config paths?!
Feb 23 18:53:13 <fdan>	tirnanog ubu is aliased to `sudo su -l ubuntu`
Feb 23 18:53:28 <tirnanog>	fdan: again, I told you how to trace where aliases are defined. do I need to write it out again?
Feb 23 18:53:28 <ormooj>	# exec -- bash --rcfile /proc/self/fd/3 -lc exit 3<<<'echo moo'
Feb 23 18:53:34 <shbot>	ormooj: no output within the time limit
Feb 23 18:53:38 <tirnanog>	fdan: BASH_XTRACEFD=1 PS4='+$BASH_SOURCE:$LINENO: ' bash -ixlc '' | grep '\balias\b'
Feb 23 18:53:41 <ormooj>	D:
Feb 23 18:54:09 <fdan>	tirnanog my question is simple, how is it available to all users?
Feb 23 18:54:24 <tirnanog>	don't ask me. RUN A TRACE.
Feb 23 18:54:27 <fdan>	lets say i want to configure a system wide aliases, how do i do that
Feb 23 18:54:34 <tirnanog>	christ almighty.
Feb 23 18:54:41 <phox>	^
Feb 23 18:54:51 <tirnanog>	do you think I'm going to give a different answer the second, third, fourth time you ask the question?
Feb 23 18:55:05 <tirnanog>	to know where existing aliases are defined, run a trace.
Feb 23 18:55:15 <tirnanog>	to define aliases system-wide, consider /etc/profile.d/.
Feb 23 18:55:19 <fdan>	how to run a trace?
Feb 23 18:55:23 <tirnanog>	this can't be real.
Feb 23 18:55:28 <ormooj>	lol
Feb 23 18:55:49 <phox>	further to the dotfiles blurb, wouldn't it make more sense to also create a .profile and then source .bashrc and then .profile from .bash_profile, to keep the other PATH and whatever stuff portable to other shells (if you use them)?  :P
Feb 23 18:55:58 <phox>	fdan: scroll up, it was explained
Feb 23 18:56:09 <tirnanog>	walking away. this is too much.
Feb 23 18:56:33 <ormooj>	!cookie > tirnanog
Feb 23 18:56:33 <greybot>	tirnanog: 🍪
Feb 23 18:56:45 <phox>	tirnanog: srsly though, any idea if I can override login shell init?  looks like --rcfile only affects non-login shells and I'm not seeing another option unless I'm blind here lol
Feb 23 18:56:59 <phox>	I will actually do as I am told too (within reason, ahem)
Feb 23 18:57:56 <ormooj>	phox well there's --profile , so
Feb 23 18:58:09 <phox>	only that, but I want to feed it an alternative
Feb 23 18:58:27 <bxsx>	x="$(find .)"; echo $x gives me an empty output and I have to use the -print option..why?
Feb 23 18:58:34 <phox>	oh wait derp, I read that as --noprofile
Feb 23 18:58:37 *	phox checks docs
Feb 23 18:59:20 <phox>	ormooj: I don't seem to have that, I'm on 5.2 or something
Feb 23 18:59:23 <ormooj>	nevermind I thought --noprofile might trigger it
Feb 23 18:59:41 <phox>	oh there's --init-file
Feb 23 18:59:45 <phox>	that might be it, let's see
Feb 23 19:00:17 <phox>	nope wth, wonder if that's an alias for rcfile
Feb 23 19:00:26 <phox>	oh of course it is, fallthrough description duh
Feb 23 19:01:06 <ormooj>	BASH_INIT is another but it also has stupid limitations
Feb 23 19:01:31 <Soliton>	bxsx: what does  type find  output?
Feb 23 19:02:12 <ormooj>	I'll see about polishing my bash-based bash and put it on github or something maybe. bash's interactive mode is utterly broken and useless really. The ultimate solution is to just discard it.
Feb 23 19:02:38 <phox>	heh
Feb 23 19:02:50 <phox>	yeah making crap like that go away long term would be amazing
Feb 23 19:02:52 <ormooj>	it requires bash 5.3
Feb 23 19:03:01 <phox>	I can probably have that soon idk
Feb 23 19:03:08 <bent_fingers>	phox: you can make stuff go away with ^Z
Feb 23 19:03:17 <bent_fingers>	perhaps you missed my lecture
Feb 23 19:03:21 <bxsx>	Soliton: find is hashed (/usr/bin/find) and find is /usr/bin/find
Feb 23 19:03:34 <bxsx>	Soliton: I tested it on 2 envs
Feb 23 19:04:00 <Soliton>	# x="$(find .)"; echo $x
Feb 23 19:04:01 <shbot>	Soliton: . ./.mkshrc ./.bashrc
Feb 23 19:04:05 <phox>	bent_fingers: I like to sigtstp first
Feb 23 19:04:08 <phox>	it's more fun that way
Feb 23 19:04:16 <Soliton>	you have a weird find then.
Feb 23 19:04:57 <bxsx>	find (GNU findutils) 4.8.0; Features enabled: D_TYPE O_NOFOLLOW(enabled) LEAF_OPTIMISATION FTS(FTS_CWDFD) CBO(level=2)
Feb 23 19:05:19 <Soliton>	# find --version
Feb 23 19:05:21 <shbot>	Soliton: find (GNU findutils) 4.7.0-git
Feb 23 19:05:21 <shbot>	Soliton: Copyright (C) 2017 Free Software Foundation, Inc.
Feb 23 19:05:21 <shbot>	Soliton: etc... ( http://paste.wooledge.org/28806 )
Feb 23 19:05:56 <Soliton>	unless they changed GNU find a lot that is not how it works.
Feb 23 19:06:17 <bxsx>	well, i'm surprised too
Feb 23 19:06:48 <Soliton>	i have find 4.9.0 here and it works normally as well.
Feb 23 19:08:52 <bxsx>	ok, it's working fine
Feb 23 19:08:54 <bxsx>	my fault
Feb 23 19:09:16 <ormooj>	~~(~.~)~~
Feb 23 19:09:17 <bxsx>	Soliton: -quit :P
Feb 23 19:09:21 <bent_fingers>	where's the documentation for C-S and C-Q?
Feb 23 19:09:35 <bent_fingers>	ctrl-s says it's bound to forward search
Feb 23 19:09:44 <bent_fingers>	i'm looking for the pause or freeze function
Feb 23 19:11:23 <ormooj>	bent_fingers: the info page is more complete than the manual with regards to interactive features.
Feb 23 19:12:10 <bent_fingers>	good point, i prefer the html version though, thanks
Feb 23 19:12:34 <phox>	while the content is useful, it is a known fact that nobody likes GNU Info
Feb 23 19:13:18 <ormooj>	it's called infopage regardless of output format
Feb 23 19:14:27 <bent_fingers>	it's not in there
Feb 23 19:14:42 <bent_fingers>	i think this is a terminal thing
Feb 23 19:14:54 <ormooj>	I doubt it says anything other than listing the default bindings
Feb 23 19:18:20 <Soliton>	if flow control is enabled then ^S will stop output. that's a feature of the terminal.
Feb 23 19:19:43 <balrog_>	I wrote a script with some improvements by Earnestly https://bpa.st/3W3NQ : it returns a file with nul separated "b2hash filename" pairs. I'd now like to have a method getting the filename by hash. `awk -v 'RS=\0' "/^$hash/ {print \$2}" filename` however fails whenever the filename contains spaces. Any suggestions?
Feb 23 19:20:18 <tirnanog>	phox: no means is apparent to me.
Feb 23 19:20:28 <bent_fingers>	Soliton: yeah, i see
Feb 23 19:21:16 <tirnanog>	phox: what effect do you require of it? perhaps sourcing /etc/profile from your rcfile would suffice?
Feb 23 19:22:47 <ormooj>	balrog_: There is no point in post-processing command output to substitute in nul delimiters. You must use the built-in -z option or it's useless.
Feb 23 19:23:20 <phox>	tirnanog: different environment, so far I just went and added conditionals to .bash_profile which is working for me
Feb 23 19:23:38 <phox>	just interesting that you can only override one config file search and not the other
Feb 23 19:24:17 <tirnanog>	phox: yeah.
Feb 23 19:24:31 <tirnanog>	it's bash. hope springs infernal.
Feb 23 19:24:45 <phox>	anyways at least the thing works
Feb 23 19:25:57 <phox>	thanks again for all the help :D
Feb 23 19:28:43 <Earnestly>	balrog_: If you don't like borg, look into restic
Feb 23 19:28:51 <balrog_>	ormooj I don't know what you want to say - my above command snippet works, but for some data like "1234 path-to-dir/long spaced file name\0ffff path-to-dir/another file" looking for "1234" it returns only "path-to-dir/long" and not "path-to-dir/long spaced file name" as I want it to.
Feb 23 19:30:01 <Earnestly>	balrog_: Don't use code injection like dumping $hash into awk like that
Feb 23 19:30:04 <Earnestly>	!inject
Feb 23 19:30:04 <greybot>	Injecting data into a type of code is always wrong. Convert your data into code that represents that data before injecting it. This is called quoting or escaping. See ![language]quote (eg. !bashquote !jsonquote !htmlquote !mysqlquote !requote !urlquote)
Feb 23 19:30:38 <Earnestly>	E.g. hash=$hash awk 'index($0, hash) == 1' # also avoids regex entirely
Feb 23 19:31:18 <Earnestly>	(Because you don't actually want regex interpretation of the content of $hash)
Feb 23 19:31:32 <Earnestly>	index($0, ENVIRON["hash"]) == 1 # sorry
Feb 23 19:31:54 <JAA>	`awk -v hash="$hash" ...`
Feb 23 19:32:04 <tanath>	i understand escaping, but that bot quote is hard to understand
Feb 23 19:32:08 <Earnestly>	JAA: Nah
Feb 23 19:32:25 <phox>	tanath: +1
Feb 23 19:32:26 <ormooj>	balrog_: The entire point in using nul as a delimiter is to facilitate arbitrary names in pathnames. (and a solution that involves injecting output into a command is even worse than useless)
Feb 23 19:32:46 <Earnestly>	JAA: I wouldn't want the values of shell variables to be interpreted as awk values
Feb 23 19:33:13 <phox>	tanath: also "before injecting it" so you should use injection anyways :D
Feb 23 19:33:26 <Earnestly>	balrog_: To emphasis what ormooj wrote, nul separation is the /only/ correct way to delimit filenames, it is correct by definition of what a filename is
Feb 23 19:33:45 <JAA>	Earnestly: Oh, does it not always treat them as strings?
Feb 23 19:33:52 <Earnestly>	phox: You have to if you use openssh or dropbear `ssh command'
Feb 23 19:34:11 <Earnestly>	JAA: It treams them like awk variables, so \n means newline and not \n
Feb 23 19:35:17 <JAA>	Earnestly: Ah, huh, TIL.
Feb 23 19:35:35 <ormooj>	Well, it's not the only way, there are many ways, it is one good way. But all such solutions only work when the command producing the output is written to write output unambiguously. You can't fix up a broken command with shell hacks.
Feb 23 19:35:48 <Earnestly>	# awk -v foo='a\nb' 'BEGIN {printf "%s", foo}' | od -cAn
Feb 23 19:35:50 <shbot>	Earnestly:    a  \n   b
Feb 23 19:35:59 <Earnestly>	ormooj: It is the only correct way
Feb 23 19:36:07 <JAA>	Yeah, that's the exact test I just did as well. :-)
Feb 23 19:36:16 <JAA>	Like, to the letter. lol
Feb 23 19:36:17 <Earnestly>	Or I suppose it's the only minimally correct way, I guess
Feb 23 19:36:32 <balrog_>	Earnestly, will look into restic, ty. https://bpa.st/3W3NQ is the new script, took yours and adjusted it abit for my needs (no more regex I think?). I somehow attempted to output the *full* filename out of the given data... so there is no easy solution and I should "learn" awk syntax you say like "index($0, ENVIRON["hash"]) == 1"(I don't understand this)
Feb 23 19:36:35 <Earnestly>	I'm not interested in stupid shit like converting everything to a custom encoding like base64
Feb 23 19:36:52 <ormooj>	Another method is to output a "netstring". They are actually pretty ok.
Feb 23 19:37:02 <Earnestly>	ormooj: netstrings require nul too
Feb 23 19:37:20 <Earnestly>	Or does it
Feb 23 19:37:42 <Earnestly>	ormooj: I'm thinking of a djb thing sorry
Feb 23 19:37:51 <ormooj>	I don't think so. a pathname wouldn't contain a nul anyway so.
Feb 23 19:37:58 <ormooj>	yeah, the djb thing.
Feb 23 19:39:14 <Earnestly>	ormooj: It just uses , as an optional sanity check sentinel. I remember implementing this in bash but in the context of scgi which uses nul to separate key and value, hence my confusion
Feb 23 19:39:51 <Earnestly>	ormooj: https://0x0.st/H5te.txt (turning scgi into cgi, wiping out all the benefits \o/)
Feb 23 19:39:53 <balrog_>	<ormooj> nul is required, as "b2sum" misbehaved without -z option :/ my sample of mixed windows/unix files has all sort of "unusual" characters as filenames, I try to catch them *all* this way
Feb 23 19:41:21 <Earnestly>	balrog_: Windows is different, but under unix a filename is defined as literally any sequence of bytes in any order that cannot contain NUL or /
Feb 23 19:41:53 <Earnestly>	Hence, / for separating filenames in a path is correct, and NUL for separating filenames or paths is correct. It's not merely preference
Feb 23 19:42:54 <emanuele6>	# printf -v x x%.s {1..256}; pathchk -- "$x"
Feb 23 19:42:56 <shbot>	emanuele6: pathchk: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: File name too long
Feb 23 19:42:56 <balrog_>	<Earnestly> just wanted to say some user data was created under ntfs and later/currently stored under ext4. Will change to btrfs later. Changing the filenames would be the easiest way, but that's not an option
Feb 23 19:43:22 <Earnestly>	There's no need to change filenames, just understand the datatype and do it properly, it's not hard
Feb 23 19:44:05 <Earnestly>	At least, I think it's not so hard once you accept the reality of the situation
Feb 23 19:47:35 <flower_>	Earnestly: saw my process management question?
Feb 23 19:48:29 <Earnestly>	ormooj: I was remember djb's qmail "data structure" which was something called string0 iirc. The "structure" was single bytes written to a file such that if it was interrupted during the right it could still easily recover it (unlike say json)
Feb 23 19:49:04 <Earnestly>	flower_: Yeah but it kind of washed over me. I sort of just abandon investigation if pidfiles come into play and things which spawn terminals, etc.
Feb 23 19:50:00 <Earnestly>	ormooj: https://blog.plover.com/prog/erlang-race-condition-2.html nice little article
Feb 23 19:50:12 <ormooj>	I mostly like that you get the field widths up front, so it works without delimiters and is efficient. You can read an array with a single read per element without over-consuming or hunting for a delmiter.
Feb 23 19:50:38 <Earnestly>	I hadn't thought of that, yeah really nice
Feb 23 19:50:50 <flower_>	Earnestly: ok, no problem. Anyway, when the application (launched in the terminal) announced using getpid(), the pid was unexpected to the NSM server, using getppid() not. Hm
Feb 23 19:51:08 <Earnestly>	ormooj: I the old 'Fish' book talks about a C joke that most C programs read bytes and do nothing with them
Feb 23 19:51:36 <Earnestly>	flower_: The ppid would be the terminal itself, usually, unless there's even more forking around
Feb 23 19:52:04 <Earnestly>	pstree should help, or you can make your own PPID chaser back to PID1
Feb 23 19:54:09 <flower_>	Earnestly: that's what I was assuming indeed. So the question is probably, does it hurt to kill the parent by SIGTERM, e.g. the terminal, of the application. Itt seems to work fine, also when the application quits itself.
Feb 23 19:54:17 <flower_>	will check pstree
Feb 23 19:55:49 <Earnestly>	flower_: Make sure your own script responds by signalling its own children too, i.e. trap 'kill 0' EXIT (bash). You can try and send the same signal or just term, whichever
Feb 23 19:57:05 <ormooj>	well, not single read. There has to be a delimiter between the length and value, so it's n + 2 reads per element where n is the number of bytes in the length mod the radix used for the length representation which is probably 10 normally.
Feb 23 19:58:39 <ormooj>	it's an efficiency win if the values aren't itsy bitsy.
Feb 23 19:58:54 <Soliton>	flower_: why do you need to deal with this at all? either the client tells you a PID and that's what you deal with or you use the PID you got when starting the client. any other shenanigans the client does are on them to handle surely.
Feb 23 20:00:41 <ormooj>	you could use fixed-width length fields, at a small cost in space usage and max field length limit
Feb 23 20:03:17 <Earnestly>	ormooj: About your radix, just for reasonability here, a radix of 6 would mean a million bytes long, 15 would be a quadrillion...
Feb 23 20:04:58 <Earnestly>	ormooj: memchr(buf, ':', 10); is probably reasonable
Feb 23 20:05:22 <Earnestly>	I'd probably just limit it to 5 and error out telling users their string is too long
Feb 23 20:05:55 <balrog_>	!bashquote
Feb 23 20:05:55 <greybot>	Prepare literal data for injection into bash code: printf %q "$data". Eg. ssh host bash <<< "$(printf 'rm %q' "$localvar")"
Feb 23 20:06:57 <ormooj>	balrog_: that's different. that is for the specific situation where you're escaping strings for use by the shell. You must already have the data read into bash for that to be useful.
Feb 23 20:07:07 <Earnestly>	ormooj: (6* sorry, 6 is 1M string. 5 would be a 100kB)
Feb 23 20:08:52 <balrog_>	<ormooj> yea, it's more hope. Just struggling / researching right now how to read in/process the data into pairs
Feb 23 20:12:23 <ormooj>	I don't know lvm. I must learn this. :(
Feb 23 20:13:12 <Riviera>	why
Feb 23 20:15:42 <ormooj>	to use, for things. I'm switching my root volume to xfs and moving it to an SSD, because btrfs is slow and stupid, and kind of want the flexibility to mutate the partitioning.
Feb 23 20:16:48 <Riviera>	so just do the thing
Feb 23 20:16:53 <Riviera>	no need to "learn" anything
Feb 23 20:17:02 <Riviera>	but ok, thanks for answering :)
Feb 23 20:17:37 <ormooj>	:|
Feb 23 20:17:44 <ormooj>	moo
Feb 23 20:21:57 <ormooj>	might try bcachefs eventually but probably wait for a few release cycles to shoot myself with that
Feb 23 20:22:40 <balrog_>	<ormooj> to my knowledge btrfs is just *very* slow (compared to xfs/ext4) for specific data samples, like databases. For other purposes btrfs has some nice features, like automatic defrag, deduplication and/or compression
Feb 23 20:24:09 <balrog_>	my root volume on my desktop is ext4 or xfs, while home is btrfs - cow as main reason
Feb 23 20:52:58 <Tadgy>	shopt -s extglob; foo="Bar Baz   <   <barbaz>"; echo "X${foo%*( )<*>}X"  # Anyone know why the spaces after the < aren't removed despite the extglob?
Feb 23 20:53:51 <larryv>	% does shortest match
Feb 23 20:54:18 <Tadgy>	That's not the issue.
Feb 23 20:54:22 <larryv>	# foo="Bar Baz   <   <barbaz>"; echo "X${foo%*( )<*>}X"; echo "X${foo%%*( )<*>}X"
Feb 23 20:54:23 <shbot>	larryv: XBar Baz   <   X
Feb 23 20:54:23 <shbot>	larryv: XBar BazX
Feb 23 20:54:34 <Tadgy>	I don't want the first < removed.
Feb 23 20:55:22 <Tadgy>	The extglob *( ) should match any number of spaces before the <*> glob....
Feb 23 20:55:25 <Tadgy>	It doesn't...
Feb 23 20:55:58 <Soliton>	it should match the least amount of spaces which is zero.
Feb 23 20:56:23 <Tadgy>	Sure, but it should also match *any* number of spaces.
Feb 23 20:56:32 <Tadgy>	Try it with + and it's the same.
Feb 23 20:56:38 <Soliton>	yes, the least amount of any is zero.
Feb 23 20:57:10 <Soliton>	it's not the same with +. that matches one space.
Feb 23 20:57:35 <Tadgy>	Matches one or more occurrences of the given patterns
Feb 23 20:57:41 <Tadgy>	"or more"
Feb 23 20:57:50 <Tadgy>	Not exactly one.
Feb 23 20:57:53 <Soliton>	and the least amount of one or more is one.
Feb 23 20:58:40 <Tadgy>	So, how do you say "any spaces before <*>" but after < ?
Feb 23 20:59:18 <Soliton>	well, put the < in there.
Feb 23 21:00:03 <larryv>	# foo="Bar Baz   <   <barbaz>"; echo "X${foo%<*( )<*>}<X"
Feb 23 21:00:05 <shbot>	larryv: XBar Baz   <X
Feb 23 21:00:42 <Tadgy>	The first < may or may not be a < though - could be any char - I just tested with < because it matched the <*>
Feb 23 21:01:06 <Soliton>	perhaps figure out the complete goal first then.
Feb 23 21:01:15 <larryv>	could have said that earlier.
Feb 23 21:02:45 <Tadgy>	Soliton: That's the only goal.
Feb 23 21:02:58 <balrog_>	I found a solution (second link/script) for my issue. Please feel free to rate/improve. https://bpa.st/SR34S https://bpa.st/GTJHG
Feb 23 21:05:59 <Tadgy>	So, +( ) isn't a "greedy" match in extglob?  It'll only match the shortest of "one or more" occurances?
Feb 23 21:06:00 <Soliton>	why are you looking in different fields? the hash is in the first field.
Feb 23 21:06:24 <larryv>	Tadgy: as already noted, it depends on whether you use % or %%.
Feb 23 21:07:51 <Tadgy>	OK, thanks.
Feb 23 21:08:00 <larryv>	# foo='Bar Baz   <   <barbaz>'; printf %s\\n "X${foo%%+( )<!(*<*)>}X"
Feb 23 21:08:01 <shbot>	larryv: XBar Baz   <X
Feb 23 21:08:02 <Soliton>	i don't understand why it's not just $1 == search_hash.
Feb 23 21:08:06 <larryv>	# foo='Bar Baz   <   <barbaz>'; printf %s\\n "X${foo%%+( )<*([!<])>}X"
Feb 23 21:08:07 <shbot>	larryv: XBar Baz   <X
Feb 23 21:12:53 <Soliton>	# printf '%s  %s\0' hash1 '  file  1  ' hash2 file2 | hash=hash1 awk -v 'RS=\0' '$1 == ENVIRON["hash"] {print substr($0,length($1)+3)}'
Feb 23 21:12:54 <shbot>	Soliton:   file  1
Feb 23 21:13:05 <balrog_>	<Soliton> the hash most likely is not in the first field. The first field looks like 'b2sumhash1  somedir/some filename+with)spaces and $ymb0ls\0' I think - in case I got "field" right here.
Feb 23 21:13:36 <Soliton>	most likely?? you don't know the format you're parsing?
Feb 23 21:14:24 <Soliton>	is  b2sumhash1  is the hash then that is the first field there, no?
Feb 23 21:14:35 <balrog_>	I do, I just do not know the exact meaning of "field" - the data is harvested by the first script/link.
Feb 23 21:15:04 <Soliton>	you're using awk. awk splits input lines into fields. $1 is the first field etc.
Feb 23 21:15:39 <balrog_>	yea, but I chose \0 as delim, so each hash/filename pair is a seperate field?
Feb 23 21:16:15 <Soliton>	each pair is a line. your lines just end in \0 not \n.
Feb 23 21:16:52 <Soliton>	or rather record is what awk calls it.
Feb 23 21:17:02 <Soliton>	RS being the record separator.
Feb 23 21:17:03 <balrog_>	okay, so each hash is a field then.
Feb 23 21:17:20 <balrog_>	each hash is in the first field then*
Feb 23 21:17:27 <Soliton>	each record consists of: <hash>  <path>
Feb 23 21:17:50 <Soliton>	so first field is the hash and the rest is the path.
Feb 23 21:18:34 <Soliton>	so for the path you don't try to cobble together the fields but look into $0 which is the record.
Feb 23 21:18:42 <balrog_>	it's generated by `find "${dir}" -type f -exec b2sum -z {} +|sort -z`
**** BEGIN LOGGING AT Fri Feb 23 21:29:50 2024

Feb 23 21:29:49 *	Now talking on #bash
Feb 23 21:29:49 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 23 21:29:49 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 23 21:31:32 <Earnestly>	balrog_: To be clear, that format which b2sum prints (along with all the other *sum utils) is: [hash][type][space][filename]. [type] is almost always "text" which is a space so it appears as '[hash] [space][filename]'
Feb 23 21:32:10 <Earnestly>	Sorry, [hash][space][type][filename]
Feb 23 21:33:26 <twkm>	hmm.
Feb 23 21:33:33 <Earnestly>	That means you extract the filename reliably from awk's $0 by using substr($0, length($1) + 3)
Feb 23 21:34:27 <Earnestly>	(According to that format, anyway)
Feb 23 21:37:09 <Earnestly>	# for a in oawk nawk; do printf '%s\0' a b | "$a" -v RS='\0' 'END {printf " %s: [%s]", $0, ARGV[0]}'; done # I forget how these handle unspecified use of RS
Feb 23 21:37:11 <shbot>	Earnestly: oawk: syntax error near line 1
Feb 23 21:37:11 <shbot>	Earnestly: oawk: bailing out near line 1
Feb 23 21:37:11 <shbot>	Earnestly: etc... ( http://paste.wooledge.org/28808 )
Feb 23 21:37:31 <Earnestly>	Yeah, both dislike it
Feb 23 21:43:02 <ba1r0g>	Soliton: this is how you did suggest it? https://bpa.st/37KAA
Feb 23 21:46:17 <Earnestly>	ba1r0g: (Do change progname to the name you want to give your script, e.g. hash2file or file-lookup, etc.)
Feb 23 21:54:04 <Earnestly>	balrog_: Consider https://0x0.st/H5vR.txt
Feb 23 21:54:37 <Earnestly>	balrog_: https://0x0.st/H5v7.sh missed the shebang
Feb 23 22:00:20 <Earnestly>	Next step would be to allow multiple hashes to be used at once and have the script output files with nul separation. Ideally also provide a hardcoded db path so you don't have to specify it every time with a flag like -d to let the user provide an alternative
Feb 23 22:04:47 <zxfx>	yo
Feb 23 22:10:21 <ormooj>	Earnestly: Another solution - two channels. One stream is an array of fixed-width offsets and another for data. That is both efficient and adds support for random access!
Feb 23 22:12:15 <Earnestly>	ba1r0g: That next step might look like this: https://0x0.st/H5wH.sh
Feb 23 22:12:40 <ormooj>	If one channel is bi-directional you could even ask for a specific offset or range of elements
Feb 23 22:13:23 <ormooj>	find does not support a %n-like thing D:
Feb 23 22:13:26 <Earnestly>	ormooj: I like that sort of approach, it suits C quite well too
Feb 23 22:14:37 <Earnestly>	ormooj: I did something like that for a basic xml parser, it stored offsets to elements in a fixed buffer. Had a bug though so when I fed it a file and /immediately/ ^C'd it, it already created a 4G file :(
Feb 23 22:15:10 <Earnestly>	Instead of all this memcpy nonsense, just store a pointer and length
Feb 23 22:15:47 <Earnestly>	(It didn't support arbitrarily sized documents)
Feb 23 22:19:08 <ormooj>	ooh could work nicely with linux O_DIRECT pipes too
Feb 23 22:24:40 <ormooj>	emanuele6 showed me those ^^. I think I knew about them but didn't know they were so easy.
Feb 24 02:12:56 <MagicMike>	https://i.redd.it/tofgpybli7x41.jpg
Feb 24 02:27:24 <Sparkles>	MagicMike, I would not call that a "real" hacker on the left, too.
Feb 24 02:27:50 <Sparkles>	There's a term "script kiddie" or "skiddie" you sure know I believe, too.
Feb 24 02:31:47 <MagicMike>	Sparkles, isnt the def of a skiddie someone that literally only writes Bash scripts (hence word script in skiddie)
Feb 24 02:32:33 <Sparkles>	I am sorry, but I will refrain answering this.
Feb 24 02:32:33 <MagicMike>	like someone that can only run someone elses program from Bash but has no idea how programming works because they only know Bash
Feb 24 02:34:24 <Sparkles>	I am not sure how Bash is ever remotely related to it here.
Feb 24 02:51:45 <Sparkles>	> When the hacker's system crashes in Windows, as with all typical Windows crashes, Heckman said the user would be prompted to send the error details — including the malicious code — to Microsoft. The funny thing is that many say yes, according to Heckman.
Feb 24 02:52:09 <Sparkles>	/ https://www.zdnet.com/article/hackers-accidentally-give-microsoft-their-code/
Feb 24 02:54:10 <Sparkles>	It's interesting that this article author's last post on this website was in 2015 and the most of their most recent posts there are "HTTP 401 Gone": https://www.zdnet.com/article/hackers-accidentally-give-microsoft-their-code/
Feb 24 02:54:34 <Sparkles>	er: https://www.zdnet.com/meet-the-team/josh-taylor/
**** BEGIN LOGGING AT Sat Feb 24 12:02:42 2024

Feb 24 12:02:41 *	Now talking on #bash
Feb 24 12:02:41 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 24 12:02:41 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 24 12:06:30 <balrog_>	<Sparkles> do you know whether is there an analogy from .bash_profile to .zprofile in terms of execution? I did change my login shell to zsh and use .zshrc and .xprofile for env right now. Internet also mentions .zshenv, I'm confused
Feb 24 12:14:02 <Earnestly>	`man zsh' and read the STARTUP/SHUTDOWN FILES section
Feb 24 15:06:34 <TKD_tower>	difference between /pathto/dir vs /pathto/dir/ ?
Feb 24 15:07:10 <lopid>	the /
Feb 24 15:07:17 <TKD_tower>	and
Feb 24 15:07:26 <lopid>	one came first
Feb 24 15:07:33 <TKD_tower>	wdym
Feb 24 15:07:41 <lopid>	you said the one without before the one with
Feb 24 15:08:27 <TKD_tower>	...
Feb 24 15:11:50 <Arumes>	  Let's say you want to move a file to the folder "dir".
Feb 24 15:12:08 <Arumes>	If you do mv myfile dir/, it'll move the file to dir/myfile if the folder exists. If the folder does not exist, you get an error message.
Feb 24 15:12:34 <Arumes>	If you do mv myfile dir, it'll rename the the file myfile to its new name "dir.
Feb 24 15:13:15 <selckin>	mkdir -p dir && mv file dir/
Feb 24 15:13:33 <tirnanog>	what's the question, though?
Feb 24 15:14:30 <Arumes>	The question is if there's a difference. And I try to explain that the asnwer is "yes" and give an example when that final / can really matter.
Feb 24 15:15:14 <tirnanog>	yes, indeed. the circumstances matter.
Feb 24 15:15:58 <tirnanog>	there are ways to go about avoiding an unwanted outcome, though. selckin mentioned one. GNU mv has -T, which is sometimes useful.
Feb 24 15:17:36 <Earnestly>	TKD_tower: See path_resolution(7) for an explanation and where a trailing / might matter
Feb 24 15:17:59 <Earnestly>	It even has a section called 'Trailing Slashes'
Feb 24 15:22:12 <greatgatsby_>	not sure where else to ask this, I'm looking for a way to update the checksum for a file in a SHA256SUMS file that contains hashes for multiple files.  Right now I'm using a tac/awk/sponge one-liner after appending the updated checksum, but I'm still looking for a less hacky solution
Feb 24 15:32:51 <Earnestly>	greatgatsby_: Do you have the original checksum?
Feb 24 15:33:27 <tirnanog>	I would say that using sponge is not ideal. tail end of pf 13 explains why.
Feb 24 15:33:34 <tirnanog>	!pf 13
Feb 24 15:33:34 <greybot>	https://mywiki.wooledge.org/BashPitfalls#pf13 -- Don't do this! -- cat file | sed s/foo/bar/ > file
Feb 24 15:36:30 <Earnestly>	greatgatsby_: Something like: newhash="$hash" file="$foo" awk 'substr($0, length($1)+3) == ENVIRON["file"] {printf "%s %s%s\n", ENVIRON["newhash"], substr($2, 1, 1), ENVIRON["file"]; next}; 1' < SHA256SUMS > SHA256SUMS.new; ...; mv -f SHA256SUMS.new SHA256SUMS # Don't use sponge, replace ... with sanity checks. You can clean up the repeated ENVIRONs in a BEGIN block to keep it tidy.
Feb 24 15:37:09 <Earnestly>	greatgatsby_: *sum format is: [hash] [type][filename]. type can be ' ', 'U' or '^'. Usually it's always ' '
Feb 24 15:38:03 <Earnestly>	greatgatsby_: If the filename has \ \n \r or such then the filename is c-style escaped and the hash is prefixed with \ to indicate this. This doesn't account for that but something to keep in mind
Feb 24 15:38:49 <greatgatsby_>	tirnanog: thanks, wasn't aware of that risk using sponge.  I think in this case I'm ok - the data is easily regenerated
Feb 24 15:39:24 <Earnestly>	greatgatsby_: A better strategy is to just forget that sponge exists
Feb 24 15:39:33 <Earnestly>	Like set -e and all the other class of bad ideas
Feb 24 15:39:37 <Earnestly>	classes*
Feb 24 15:40:09 <Earnestly>	greatgatsby_: See https://backreference.org/2011/01/29/in-place-editing-of-files/index.html for why using mv is always better
Feb 24 15:57:20 <greatgatsby_>	Earnestly: thanks, really good read
**** BEGIN LOGGING AT Sat Feb 24 16:29:06 2024

Feb 24 16:29:06 *	Now talking on #bash
Feb 24 16:29:06 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 24 16:29:06 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 24 16:29:45 <Earnestly>	I suppose you could use: while read -r line; do ... with $line and have bash trim the leading and trailing IFS chars
**** BEGIN LOGGING AT Sat Feb 24 16:32:03 2024

Feb 24 16:32:03 *	Now talking on #bash
Feb 24 16:32:03 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 24 16:32:03 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 24 16:32:31 <kurahaupo>	Hint: what is $#
Feb 24 16:32:52 <iconoclast_hero>	number of arguments of last command?
Feb 24 16:32:58 <Earnestly>	# var=foobar; echo "${#var}"
Feb 24 16:33:00 <shbot>	Earnestly: 6
Feb 24 16:33:02 <kurahaupo>	Yes.
Feb 24 16:33:21 <kurahaupo>	Number of args passed in
Feb 24 16:33:22 <iconoclast_hero>	so it's string length?
Feb 24 16:33:26 <Earnestly>	awk 'NF {$1=$1; printf "%s\t%s\n", length($0), $0}' < README | sort -k 1,1n | cut -f 2-
Feb 24 16:33:28 <kurahaupo>	Bingo
Feb 24 16:33:38 <koollman>	I wonder if someone could create the right LC_COLLATE to just sort by length. all symbols being equals :)
Feb 24 16:34:00 <iconoclast_hero>	ok, but the thing I'm confused about is WHERE did this variable '$REPLY' come from?
Feb 24 16:34:11 <iconoclast_hero>	which is probably a reserved variable?
Feb 24 16:34:20 <Earnestly>	iconoclast_hero: `help read'
Feb 24 16:34:22 <kurahaupo>	However, if you merely want to sort, counting doesn't have to be decimal. Unary works just fine
Feb 24 16:34:56 <kurahaupo>	iconoclast_hero: for example: sed -e 'h; s/./x/g; x; G; s/\n/+/' < file | sort | cut -d+ -f2-
Feb 24 16:34:58 <Earnestly>	iconoclast_hero: REPLY is a bit special in that works as though you did: IFS= read -r REPLY without needing to use IFS=
Feb 24 16:36:12 <Earnestly>	kurahaupo: But that doesn't sort by line length
Feb 24 16:36:22 <kurahaupo>	Earnestly: are you sure?
Feb 24 16:36:37 <Earnestly>	kurahaupo: Yes, it replaces the content of each line with 'x's
Feb 24 16:37:02 <kurahaupo>	And what is the sort order of those?
Feb 24 16:37:23 <Earnestly>	kurahaupo: Whatever sort applies to it via dictionary order, certainly not length
Feb 24 16:37:33 <Earnestly>	https://0x0.st/H5GN.txt
Feb 24 16:37:48 <kurahaupo>	Earnestly: what is the sort order of 'x' vs 'xx'?
Feb 24 16:37:53 <koollman>	if all lines are made of the same symbol, that would be by length
Feb 24 16:38:00 <iconoclast_hero>	i'm watching the back and forth here, but i've got the answers i needed...
Feb 24 16:38:06 <koollman>	(that was why I commented on LC_COLLATE)
Feb 24 16:38:35 <iconoclast_hero>	if it matters, i'm trying to find extraneous-length fields in the artist and title fields of my tagged music so they | sort --table better.
Feb 24 16:38:36 *	kurahaupo belatedly throws in LC_ALL=C sort
Feb 24 16:38:43 <Earnestly>	kurahaupo: That doesn't fix it either
Feb 24 16:38:56 <Earnestly>	kurahaupo: https://0x0.st/H5Gc.txt
Feb 24 16:39:25 <Earnestly>	Nice idea though, but you'd probably need a special COLLATE as koollman is suggesting
Feb 24 16:39:41 <tirnanog>	kurahaupo: it's correct. field splitting mechanics do not apply to bash in the absence of a name given to read.
Feb 24 16:40:27 <kurahaupo>	Hmm. I need to check sed G
Feb 24 16:40:37 <tirnanog>	so, "IFS= read -r", alone, is a meme.
Feb 24 16:40:39 <Earnestly>	kurahaupo: Hm, it should work though, but I guess you're not deleting the line when replacing it in the sed?
Feb 24 16:40:55 <Earnestly>	kurahaupo: So you just get: original_contentxxxxxxxxxxxxxxxx
Feb 24 16:41:02 <Earnestly>	And that's why it's breaking
Feb 24 16:41:12 <kurahaupo>	I intended "append hold space to current line"
Feb 24 16:41:27 <Earnestly>	kurahaupo: Uee g
Feb 24 16:41:30 <Earnestly>	Use*
Feb 24 16:41:48 <kurahaupo>	Isn't that "replace the current line with the hold space"?
Feb 24 16:42:06 <kurahaupo>	I mean, use it if it works
Feb 24 16:42:12 <Earnestly>	kurahaupo: > Replace the contents of the pattern space by the contents of the hold space
Feb 24 16:42:36 <kurahaupo>	Yeah that's not what's needed
Feb 24 16:42:58 <Earnestly>	kurahaupo: Perhaps sed -e 's/./x/g; h; s/\n/+/'
Feb 24 16:43:33 <Earnestly>	kurahaupo: Actually, why not just: sed 's/./x/g'
Feb 24 16:43:46 <Earnestly>	Or I suppose you want to recover the original text
Feb 24 16:44:32 <kurahaupo>	Save pattern space to hold space, replace each char with x, append hold space to pattern space, replace embedded newline with something other than x (and which precedes it lexicographically)
Feb 24 16:45:04 <Earnestly>	kurahaupo: sed 'h; s/./x/g; G; s/\n/+/'
Feb 24 16:45:31 <Earnestly>	The x command was putting the xxxxx's on the wrong side of the line
Feb 24 16:45:43 <kurahaupo>	I'm puzzled with G isn't working
Feb 24 16:45:57 <kurahaupo>	Ooh
Feb 24 16:45:58 <Earnestly>	It is working, it was the x
Feb 24 16:46:14 <Lynx->	https://github.com/lynxthecat/cake-autorate/blob/036ccf57786d4bccc69e1044da8eab87c3357ee1/cake-autorate.sh#L1581 <-- can this function be sped up in any way?
Feb 24 16:46:16 <Earnestly>	Should have clocked that after seeing xxxxxx's in output
Feb 24 16:47:13 <kurahaupo>	That'll teach me for writing code blind
Feb 24 16:47:23 <kurahaupo>	Without any means to test it
Feb 24 16:48:02 <Earnestly>	Lynx-: Maybe ((alpha*(value - prev_ewma)) / 1000000) + prev_ewma
Feb 24 16:48:06 <kurahaupo>	iconoclast_hero: for example: sed -e 'h; s/./x/g; G; s/\n/+/' < file | sort | cut -d+ -f2- # fixed now
Feb 24 16:49:15 <Earnestly>	Lynx-: Also don't use local -n
Feb 24 16:49:49 <Earnestly>	In general, avoid indirection
Feb 24 16:49:54 <kurahaupo>	Earnestly: I'm dearly wishing for "direct references" rather than "symbolic references"
Feb 24 16:50:56 <Earnestly>	Lynx-: Otherwise nope, unless you redesign away from programming-language-style to more functional/tacit pipelines, it'd be difficult to change that function in any way. You're stuck with bash's performance
Feb 24 16:51:46 <Earnestly>	Better would be to use python, which is much more suited to this style of coding, or lua
Feb 24 16:52:11 <kurahaupo>	Or Perl, or even *choke* PHP
Feb 24 16:52:17 <Earnestly>	Hmm
Feb 24 16:52:18 <Lynx->	Thanks for your help. Would function caching work here?
Feb 24 16:52:40 <Lynx->	Since function will often be called with same inputs
Feb 24 16:53:03 <kurahaupo>	Lynx-: you're under the misapprehension that the Bash "function" keyword actually means something with a return value
Feb 24 16:53:18 <Earnestly>	You could memoise the results, cache[inputs] = output. If inputs in cache, use cache[inputs]
Feb 24 16:53:32 <Lynx->	Earnestly that's what I was thinking. Would it help here do you think?
Feb 24 16:53:37 <kurahaupo>	Lynx-: most of the cost is in the argument passing and the 'local' commands
Feb 24 16:53:42 <Earnestly>	Try and see
Feb 24 16:53:44 <Lynx->	This is called at about maybe 40Hz or so
Feb 24 16:54:11 <tirnanog>	brutal.
Feb 24 16:54:12 <Earnestly>	Yeah, I'd remove local as well
Feb 24 16:54:12 <kurahaupo>	Lynx-: at 40 Hz - do you mean the function or the whole script?
Feb 24 16:54:20 <Lynx->	function
Feb 24 16:54:33 <Earnestly>	And I'd probably tell the cpu sorry for having to run bash scripts so often
Feb 24 16:54:50 <Lynx->	on my router it's circa 15%
Feb 24 16:54:58 <tirnanog>	kurahaupo: I didn't hear back from you as to the opengroup discussion. the impression I got from the ensuing stalemate is that Chet will probably never be amenable to such a thing.
Feb 24 16:55:09 <iconoclast_hero>	props on using circa
Feb 24 16:55:12 <tirnanog>	kurahaupo: but doesn't ksh93 have them?
Feb 24 16:55:13 <Earnestly>	If I was absolutely stuck with this design I might even consider running a long running calc daemon with its own in and out fifos and send inputs that way
Feb 24 16:55:23 <iconoclast_hero>	people usually look at me funny when i say ca. 15%
Feb 24 16:55:26 <Earnestly>	Lynx-: That's really ugly just for such a basic calc
Feb 24 16:55:54 <Lynx->	Earnestly how would the calc concept work. This seems interesting.
Feb 24 16:56:21 <Earnestly>	A program that can do math quickly, read input from stdin, write output on stdout
Feb 24 16:56:29 <Lynx->	ah
Feb 24 16:57:05 <Earnestly>	run it < in.fifo > out.fifo & print calc > in.fifo; read -r result < out.fifo, etc.
Feb 24 16:57:37 <Earnestly>	fifos act as buffered queues
Feb 24 16:58:07 <kurahaupo>	Lynx-: set numeval='ewma = (alpha*value+(1000000-alpha)*prev_ewma)/1000000' and then simple write ((numeval)) to set ewma to the new value
Feb 24 16:59:07 <Earnestly>	With '... ((alpha*(value - prev_ewma)) / 1000000) + prev_ewma' as possible simplification
Feb 24 17:00:10 <Lynx->	kurahaupo oh this is totally new to me - is there a name or example about this online I can check?
Feb 24 17:00:21 <kurahaupo>	Lynx-: but even on my ancient 800 MHz core duo CPU, Bash can invoke thousands of functions per second; it's the external commands that grind it to a crawl
Feb 24 17:00:52 <kurahaupo>	I suspect your bottleneck is elsewhere
Feb 24 17:00:55 <Earnestly>	Lynx-: This is sort of what I have in mind: https://0x0.st/H5Gw.png
Feb 24 17:01:22 <kurahaupo>	tirnanog: yeah and yes respectively
Feb 24 17:02:01 <Earnestly>	I should fix exec-with-pipe to allow arguments for the command
Feb 24 17:02:12 <kurahaupo>	Chet doesn't really seem to have any vision for keeping Bash relevant, and yet he keeps adding adhoc new features
Feb 24 17:02:57 <tirnanog>	kurahaupo: what did you make of Robert's recent response to you. was he just being a stick in the mud or did he have a point?
Feb 24 17:03:44 <tirnanog>	and yes, agreed.
Feb 24 17:04:11 <tirnanog>	on as adhoc a basis as adhoc can be.
Feb 24 17:04:12 <Lynx->	Earnestly I just got your simplification - can't believe I missed that
Feb 24 17:06:40 <tirnanog>	Lynx-: LESS=+/^ARITHMETIC man bash # there's a note to the effect of the rules of C being observed for arithmetic evaluation
Feb 24 17:07:14 <tirnanog>	so, (( a = 1 )) will perform an assignment, as well as being true.
Feb 24 17:07:16 <kurahaupo>	tirnanog: I haven't check my "list" email folder in the last 30 hours
Feb 24 17:07:51 <tirnanog>	kurahaupo: ah. well it wasn't that recent. I only skimmed it. seemed to be getting on his high horse as to how such a thing could never work properly in the shell.
Feb 24 17:08:24 <Lynx->	<kurahaupo> Lynx-: set numeval='ewma = (alpha*value+(1000000-alpha)*prev_ewma)/1000000' and then simple write ((numeval)) to set ewma to the new value <-- how does this work?
Feb 24 17:08:38 <kurahaupo>	tirnanog:  This is apropos  lexical local?
Feb 24 17:08:44 <tirnanog>	Lynx-: see above please.
Feb 24 17:08:47 <tirnanog>	kurahaupo: yeah
Feb 24 17:10:04 <kurahaupo>	tirnanog: there are some weird corner cases that need to be dealt with, but absolutely it can be made to work. The point is (partly) that the "broken" bits only hurt code that uses the new features
Feb 24 17:10:23 <TKD_tower>	Arumes: i was afk
Feb 24 17:10:26 <tirnanog>	kurahaupo: I see.
Feb 24 17:10:42 <TKD_tower>	also ty
Feb 24 17:11:03 <TKD_tower>	for others too
Feb 24 17:11:26 <tirnanog>	Lynx-: related to that section of the manual is https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_04
Feb 24 17:13:20 <Lynx->	OK I got it
Feb 24 17:13:26 <Lynx->	why would that be faster?
Feb 24 17:13:44 <tirnanog>	I think the idea was to avoid the overhead of function calling, variable localisation etc.
Feb 24 17:14:33 <Lynx->	ahhh
Feb 24 17:14:40 <tirnanog>	and, since the assignment can be performed in the arithmetic context, maybe that turns out to be a win also. (I don't know)
Feb 24 17:15:27 <kurahaupo>	tirnanog: I'm guessing there are people commenting on my proposal who don't actually understand how "local" works in Perl, which is to say, it temporarily pushes a new value onto an individual valuable, with a deferred pop
Feb 24 17:15:41 <tirnanog>	kurahaupo: right. yes.
Feb 24 17:15:50 <tirnanog>	kurahaupo: ignorance of prior art abounds in general.
Feb 24 17:15:58 <Lynx->	tirnanog with such a calculation performed circa 40Hz would you guess memoise would speed up?
Feb 24 17:16:19 <Earnestly>	Measure it
Feb 24 17:16:22 <Earnestly>	hyperfine(1)
Feb 24 17:16:28 <kurahaupo>	Which is pretty much indistinguishable from how local works in Bash
Feb 24 17:16:36 <tirnanog>	Lynx-: I would think so. either way, it sounds like ... yes, that. should be straightforward to implement and measure.
Feb 24 17:16:57 <Earnestly>	Turn it into a small script, supply it with inputs from a generator, see what happens
Feb 24 17:17:08 <Lynx->	is there a template for doing that - associative array?
Feb 24 17:17:09 <tirnanog>	using real world inputs, preferably.
Feb 24 17:17:27 <Earnestly>	Lynx-: I did pretty much write it, yeah with associative
Feb 24 17:17:36 <kurahaupo>	Lynx-: why do you think that function is the bottleneck?
Feb 24 17:17:39 <Earnestly>	index on inputs
Feb 24 17:17:52 <Earnestly>	kurahaupo: True, if it wasn't measured already, how
Feb 24 17:17:58 <cheater>	what whitespace does bash use normally to separate parameters?
Feb 24 17:18:01 <Lynx->	kurahaupo I just thought I'd try and speed it up because it's called by multiple processes so regularly
Feb 24 17:18:02 <cheater>	arguments
Feb 24 17:19:01 <kurahaupo>	Lynx-: the main way to speed it up is not to call a function at all, but rather to evaluate it in-line where required.
Feb 24 17:19:08 <Lynx->	[15:53:18] <Earnestly> You could memoise the results, cache[inputs] = output. If inputs in cache, use cache[inputs] <-- can I delete the first element in associative array easily to avoid it growing too much?
Feb 24 17:19:21 <Lynx->	kurahaupo yeah, got that - I'm going to implement that for sure
Feb 24 17:19:50 <Earnestly>	Lynx-: Now you want to implement an LRU cache on top of it? The problem is, bash is already slow and the more conditionals you use everywhere the worse it gets. You'd almost be better off making this function an alias... :x
Feb 24 17:20:23 <kurahaupo>	Eww! 🤮
Feb 24 17:20:28 <Earnestly>	But it is fast
Feb 24 17:20:34 <kurahaupo>	Indeed
Feb 24 17:20:54 <cheater>	how do you print out an array to see exactly what's in it? something with declare but i forgot
Feb 24 17:21:08 <kurahaupo>	cheater: declare -p name
Feb 24 17:21:10 <tirnanog>	cheater: blank (space or tab), or the characters of IFS, depending on the exact context.
Feb 24 17:21:34 <cheater>	thanks kurahaupo
Feb 24 17:21:40 <cheater>	tirnanog: i mean in a normal command line
Feb 24 17:21:44 <tirnanog>	blank then
Feb 24 17:21:46 <Earnestly>	alias ewma_iteration='(( ewma = (($2*($1 - ewma)) / 1000000) + ewma ))'
Feb 24 17:21:49 <cheater>	how do we know it's only space or tab?
Feb 24 17:21:53 <kurahaupo>	cheater: if you already have an idea that "declare" is the command to use, try "help declare"
Feb 24 17:22:02 <cheater>	hmm right thanks kurahaupo
Feb 24 17:22:08 <cheater>	that was lazy of me hehe
Feb 24 17:22:16 <kurahaupo>	Earnestly: with $2 inside an alias?
Feb 24 17:22:19 <tirnanog>	cheater: because the documentation says so. LESS='+/Simple Command' man bash
Feb 24 17:22:20 <cheater>	i'm writing that parser from the other day
Feb 24 17:22:41 <tirnanog>	cheater: also, the POSIX sh documentation should contain a formal grammer if you want to go deeper.
Feb 24 17:22:44 <tirnanog>	grammar*
Feb 24 17:23:18 <cheater>	ty
Feb 24 17:23:24 *	kurahaupo doesn't like grammers, they're too small. Kilogrammers are better
Feb 24 17:23:35 <Earnestly>	kurahaupo: Hm, possibly
Feb 24 17:24:05 <Earnestly>	Possibly not though
Feb 24 17:24:11 <tirnanog>	cheater: note that "blank" has a definition just above that in the bash man page.
Feb 24 17:24:30 <Earnestly>	kurahaupo: The idea being using set -- before calling it
Feb 24 17:24:45 <cheater>	yeah i found it thanks :)
Feb 24 17:24:50 <cheater>	appreciated :)
Feb 24 17:24:53 <Lynx->	Earnestly how would that work in terms of the calls to alias set against what I have now e.g.: https://github.com/lynxthecat/cake-autorate/blob/036ccf57786d4bccc69e1044da8eab87c3357ee1/cake-autorate.sh#L713
Feb 24 17:25:36 <kurahaupo>	Earnestly: true, but recall that ewma is local -n in the function
**** BEGIN LOGGING AT Sat Feb 24 17:28:08 2024

Feb 24 17:28:07 *	Now talking on #bash
Feb 24 17:28:07 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 24 17:28:07 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 24 17:29:08 <Earnestly>	kurahaupo: I'm sort of mentally blanking that out
Feb 24 17:30:07 <Earnestly>	Lynx-: set -- "${dl_owd_us}" "${dl_alpha}" "dl_owd_baselines_us[${reflector}]"; thealias
Feb 24 17:31:26 <Lynx->	and with that dl_owd_baselines_us[${reflector}] will get updated?
Feb 24 17:32:37 <Earnestly>	Lynx-: No you'll have to rework things to not need -n/indirection
Feb 24 17:33:11 <Earnestly>	And I don't know if set+alias is faster or slower than func calls
Feb 24 17:35:00 <kurahaupo>	Lynx-: line 249 change «#!/usr/bin/env bash» to «#!$BASH» since by that point you actually know where THIS Bash is located
Feb 24 17:35:14 <kurahaupo>	(keep the indenting, of course)
Feb 24 17:35:32 <kurahaupo>	!env2
Feb 24 17:35:41 <kurahaupo>	!#!env2
Feb 24 17:37:59 <Lynx->	Earnestly or kurahaupo do you understand why the difference noted here: https://forum.openwrt.org/t/cake-w-adaptive-bandwidth/135379/2063?u=lynx
Feb 24 17:38:14 <Lynx->	see my post then the next post on different system
Feb 24 17:38:56 <Lynx->	I was trying to remember why: https://github.com/lynxthecat/cake-autorate/blob/036ccf57786d4bccc69e1044da8eab87c3357ee1/cake-autorate.sh#L1587
Feb 24 17:39:06 <Lynx->	then I remembered that on some systems it seemed necessary
Feb 24 17:39:32 <Earnestly>	Lynx-: Please learn lua and use luajit
Feb 24 17:40:58 <Lynx->	using passed by reference array value inside arithmetic expansion to update the value based an old value
Feb 24 17:41:19 <Lynx->	that seems to fail for a small number of specific systems
Feb 24 17:44:15 <kurahaupo>	Lynx-: in general, scripts installed on your own machines should use the direct path to the interpreter, not env. As for the oddball reference stuff, write (( $3 = ($2 * alpha + $3 * (100000-alpha))/100000 ))
Feb 24 17:44:47 <kurahaupo>	Errr, $1 for the last
Feb 24 17:45:07 <Lynx->	ahh
Feb 24 17:45:09 <kurahaupo>	Lynx-: (( $3 = ($2 * alpha + $1 * (100000-alpha))/100000 ))
Feb 24 17:45:21 <Lynx->	using alias style?
Feb 24 17:45:50 <kurahaupo>	That has to be inside a function for the $1 etc to work
Feb 24 17:46:49 <kurahaupo>	(check that I have the params in the right order)
Feb 24 17:47:22 <kurahaupo>	Lynx-: afaik "logger" is an external program; that might be what's slowing down your script
Feb 24 17:48:55 <Lynx->	alias ewma_iteration='(( $3 = (($2*($1 - $3)) / 1000000) + $3 ))';  set -- "${dl_owd_us}" "${dl_alpha}" "dl_owd_baselines_us[${reflector}]"; thealias <-- would this work?
Feb 24 17:52:11 <Earnestly>	Lynx-: https://0x0.st/H5Dn.txt
Feb 24 17:52:56 <Earnestly>	20,000 pairs of random numbers
Feb 24 17:53:29 <Earnestly>	So I can suggest the set + alias is a bit crap
Feb 24 17:53:32 <Lynx->	excellent analysis
Feb 24 17:53:38 <Earnestly>	Lynx-: You can do this shit too
Feb 24 17:54:09 <Earnestly>	Lynx-: How many places to you call this ewma_iteration?
Feb 24 17:55:02 <Lynx->	about 3 I think
Feb 24 17:55:35 <kurahaupo>	Earnestly it's mentioned 9 times in the code, including the definition, so I assume 8 invocations
Feb 24 17:56:06 <Lynx->	well there is some redundancy since it depends on which ping binary user runs - fping, iputils-ping or tsping
Feb 24 17:56:42 <Lynx->	so I think 2 invocations for any running instance of cake-autorate for given ping binary
Feb 24 17:58:21 <Earnestly>	Lynx-: memoisation is more expensive than just doing the calc
Feb 24 17:58:31 <Lynx->	ahh, good to know
Feb 24 17:58:31 <Earnestly>	1.2x slower
Feb 24 17:58:52 <Earnestly>	Because the shell is a slow language and you should not use it
Feb 24 17:59:02 <Earnestly>	openwrt comes with lua, use that instead. Start porting to it
Feb 24 17:59:11 <Lynx->	openwrt has ditched lua now
Feb 24 17:59:34 <Lynx->	a port was made to lua but it was actually found to be really hard to get it to work well
Feb 24 17:59:36 <Earnestly>	Lynx-: I don't think you've even measured the performance of this, and isolated hotspots considering you couldn't even make small test cases and compare them
Feb 24 17:59:52 <Earnestly>	Lynx-: Well luci is still lua
Feb 24 18:00:32 <Lynx->	Yes, my skills are limited. I appreciate your input.
Feb 24 18:00:48 <kurahaupo>	Does openwrt have perl or python? Or awk?
Feb 24 18:00:49 <Earnestly>	You must measure
Feb 24 18:00:55 <Earnestly>	kurahaupo: It can, it's linux after all
Feb 24 18:01:01 <Earnestly>	But I don't think so by default
Feb 24 18:01:04 <Lynx->	kurahaupo yes perl/python/awk all available
Feb 24 18:01:27 <Lynx->	but many considerations like space for small routers
Feb 24 18:01:49 <kurahaupo>	My main router at home is a Ubiquiti EdgeMAX which comes with Perl installed
Feb 24 18:01:58 <tirnanog>	hence lua being an excellent suggestion.
Feb 24 18:02:11 <Lynx->	bash on many devices seems to work just fine. lua failed miserably but maybe the coders
Feb 24 18:02:15 *	kurahaupo danced a little jig on discovering that
Feb 24 18:02:35 <Earnestly>	Lynx-: I use openwrt, and tbh the code is pretty scary. luci seems fine though
Feb 24 18:03:00 <Lynx->	heh. well.... you are obviously an expert
Feb 24 18:03:20 <Lynx->	I like bash, even if I'm crap at it.
Feb 24 18:03:50 <Earnestly>	kurahaupo: You can stick openwrt on that (if you mean edgerouter x)
Feb 24 18:03:59 <Earnestly>	Lynx-: lua is very similar
Feb 24 18:04:07 <Lynx->	evedn ony devices from like 2013 the bash implementation has been pretty much fine.. but it seems fun to try to speed up things, and yes I need to get better at working out how to profile aspects of the code
Feb 24 18:04:13 <Earnestly>	It uses 'tables' as its central data structure, which is basically a giant dict
Feb 24 18:04:35 <Lynx->	I guess I need to find bash programmers who are personally affected by bufferbloat on 4G/5G/Starlink
Feb 24 18:04:55 <Earnestly>	bash is fine, so is the shell, for many purposes. But bash /itself/ is crap; any shell is crap when not calling highly optimised, high performance utilities
Feb 24 18:05:23 <Earnestly>	You need to design your shell scripts to take advantage of these tools, and do so in a way that avoids constantly forking them
Feb 24 18:05:30 <tirnanog>	it's better at playing the role of a coordinator, so to speak.
Feb 24 18:05:48 <Earnestly>	It's unrivalled in a way, imo
Feb 24 18:06:13 <Earnestly>	The best shell is basically just |
Feb 24 18:07:11 <Earnestly>	And tbh, dash is also very much faster than bash. It's a little embarassing
Feb 24 18:08:05 <Lynx->	https://0x0.st/H5Dn.txt <-- the alias + inline works pretty well doesn't it?
Feb 24 18:08:08 <Earnestly>	Lynx-: You'll like lua, you code bash very much like lua: https://learnxinyminutes.com/docs/lua/
Feb 24 18:08:42 <Lynx->	Earnestly port already exists here: https://github.com/sqm-autorate/sqm-autorate/
Feb 24 18:08:45 <Earnestly>	Lynx-: The 'inline' in that means you include the variable names as-is. To use such an alias in real code would mean making sure the variables are set before calling it
Feb 24 18:08:58 <Lynx->	ah, I see
Feb 24 18:09:05 <Earnestly>	alias f='echo "$foo"' for example, would need foo=yourstring set before calling f
Feb 24 18:09:33 <Lynx->	so ultimately inline is going to win out
Feb 24 18:10:07 <Earnestly>	It's the benchmark for everything else to meet
Feb 24 18:10:36 <Earnestly>	Oh for fucks sake, why is this lua port implementing function "currying" in lua
Feb 24 18:11:07 <Earnestly>	I mean it can return a function, but still. Keep it simple
Feb 24 18:11:18 <Lynx->	well that was a team of like 5 people
Feb 24 18:11:36 <Lynx->	and it just got abandoned for bugs and stuff
Feb 24 18:12:01 <Lynx->	the bash implementation uses like 15-20% on fairly bog-standard router
Feb 24 18:12:09 <Earnestly>	:(
Feb 24 18:12:26 <Lynx->	well ok, but in my case I don't mind - my router has CPU to spare
Feb 24 18:12:43 <kurahaupo>	Why would Lua need "porting" from Linux to Linux, when just the CPU changes?
Feb 24 18:13:28 <Earnestly>	tirnanog: The nicest thing about lua vs. python is that you can do multi-assigns like: a, b, c = whatever and not have it whine at you because you had too many or too few results from 'whatever'. a, b = 1, 2, 3 # 3 here is just discarded
Feb 24 18:13:38 <Earnestly>	kurahaupo: I think the port was from the bash script to lua
Feb 24 18:14:12 <tirnanog>	Earnestly: great. like just like in perl.
Feb 24 18:14:28 <Earnestly>	~ lua -e 'a, b, c = 1, 2; print(a, b, c)'
Feb 24 18:14:30 <Earnestly>	1       2       nil
Feb 24 18:14:49 <Earnestly>	tirnanog: Yeah I don't get python's design here. You have to use a "capture" like a, b, *c and c becomes a list
Feb 24 18:15:03 <kurahaupo>	Earnestly: yes it's the EdgeRouter-X-SPF
Feb 24 18:15:26 <Earnestly>	kurahaupo: Yeah openwrt should be able to install to that just using its own firmware update web uio
Feb 24 18:15:50 <Earnestly>	Hm
Feb 24 18:15:50 <tirnanog>	Earnestly: I've never been able to get along with python, for whatever reason. I don't even python code written by others easy to read.
Feb 24 18:15:55 <tirnanog>	even find, rather.
Feb 24 18:16:00 <Earnestly>	kurahaupo: Note quite, apparently https://openwrt.org/toh/ubiquiti/edgerouter_x_er-x_ka
Feb 24 18:16:33 <Earnestly>	tirnanog: This is more or less all I've done: https://0x0.st/H5kK.bin (and that pdf/epub progress count thing I showed you)
Feb 24 18:16:47 <kurahaupo>	Earnestly: that's an experiment for another day (or when I get a spare one), because it's currently critical for other household members' remote working
Feb 24 18:17:12 <Earnestly>	kurahaupo: Yeah, just nice to know it won't become ewaste
Feb 24 18:17:25 <Earnestly>	(A lot of ubiquiti stuff is)
Feb 24 18:17:30 <Earnestly>	ewaste that is
Feb 24 18:17:52 <tirnanog>	Earnestly: what's the utility of this SimpleNameSpace thing here?
Feb 24 18:18:08 <Earnestly>	tirnanog: Gives me a namespace, so I can put stuff inside it without polluting global
Feb 24 18:18:14 <kurahaupo>	The -SPF variant has an additional SPF socket (for a fibre upstream, which I don't have) and PoE output
Feb 24 18:18:33 <Earnestly>	tirnanog: It's basically a class with a few __methods__ added like __repr__
Feb 24 18:18:36 <tirnanog>	Earnestly: what does it do that a dict doesn't?
Feb 24 18:18:50 <Earnestly>	tirnanog: It is basically a dict
Feb 24 18:19:05 <tirnanog>	Earnestly: is it just for reasons of syntax?
Feb 24 18:19:49 <Earnestly>	tirnanog: Well, it's "the way" to do it. The implementation of simplenamespace for python is in its C codebase
Feb 24 18:20:29 <Earnestly>	tirnanog: Someone suggested that it's basically this if it were written in python: https://0x0.st/H5kZ.bin
Feb 24 18:20:32 <tirnanog>	Earnestly: ok, but what's the selling point? why and when would I reach for it over a dict?
Feb 24 18:22:58 <Earnestly>	tirnanog: That more or less comes down to dicts vs. namespaces, where namespaces can sometimes be implemented using dicts. But namespaces get all the other bits, subclassing, lookups, scoping, etc. But simplenamespace, is just basically a pretty dict
Feb 24 18:23:33 <tirnanog>	pretty because of dot notation, I take it.
Feb 24 18:23:37 <Earnestly>	tirnanog: You can even take a dict and turn it into a SimpleNamespace(**d)
Feb 24 18:23:48 <Earnestly>	tirnanog: Yes, and not having to quote so much
Feb 24 18:23:51 <tirnanog>	ah.
Feb 24 18:23:58 <tirnanog>	right, I see.
Feb 24 18:24:49 <Earnestly>	(And variable scoping)
Feb 24 18:25:07 <tirnanog>	Earnestly: I hung out in #python for a bit but all they ever seem to talk about is 'AI'. was boring.
Feb 24 18:26:47 <Earnestly>	I don't see python losing its thrown in data science, some of the good ones will find R or Julia or Chapel but most will get their stuff done just fine with what python has to offer
Feb 24 18:26:53 <Earnestly>	throne*
Feb 24 18:26:55 <tirnanog>	yes.
Feb 24 18:31:16 <Earnestly>	tirnanog: python is working towards a jit, that will be nice
Feb 24 18:31:34 <Earnestly>	https://github.com/python/cpython/pull/113465
Feb 24 18:31:53 <Earnestly>	(Cringe message though)
Feb 24 18:33:28 <Earnestly>	https://tonybaloney.github.io/posts/python-gets-a-jit.html (probably more useful)
Feb 24 18:34:09 <tirnanog>	creative writing? don't give up the day job, mate.
Feb 24 18:34:19 <tirnanog>	anyway, yeah - I heard something about this.
Feb 24 18:41:17 <iconoclast_hero>	(hopefully) quick regex question... https://regex101.com/r/SMzu1r/6
Feb 24 18:41:17 <iconoclast_hero>	I want grep to highlight just the file name, so what in bash parm. sub. would be "${VAR##*/}" and with the regex, i've got the file name in the second capture group but i don't know what i can do with it from there
Feb 24 18:42:47 <tirnanog>	well, ${VAR##pattern} isn't regex, for a start.
Feb 24 18:44:29 <iconoclast_hero>	"so what **in bash parm. sub.** would be "${VAR##*/}" "
Feb 24 18:44:41 <Earnestly>	iconoclast_hero: These are paths, you don't need regex at all
Feb 24 18:45:05 <Earnestly>	Split over / into the individual paths, you're done
Feb 24 18:45:55 <Earnestly>	If /a/b/c splits into files[a, b, c] then you can get the 3rd element with files[2] = c
Feb 24 18:46:28 <iconoclast_hero>	does that assume a certain number of nests in the file tree?
Feb 24 18:46:40 <iconoclast_hero>	because they're not the same.
Feb 24 18:47:02 <Earnestly>	You don't need regex for that either, these are paths. They have a well defined format
Feb 24 18:47:37 <iconoclast_hero>	ok, the regex question is something i still want an answer to so i can learn something about regex, but let's follow this first.
Feb 24 18:48:05 <Earnestly>	Yeah but this is PCRE, it's not really ontopic
Feb 24 18:48:10 <Earnestly>	(I don't really know PCRE either)
Feb 24 18:48:25 <Earnestly>	Other than non-capturing groups with (? ._.
Feb 24 18:48:56 <iconoclast_hero>	oh...  well...i want to use grep...whatever regex grep uses... i started with grep -E but it looks like regex101 doesn't have that
Feb 24 18:49:26 <Earnestly>	I also tend to avoid regex as much as possible just because it's slower than string matching (i.e. grep -F)
Feb 24 18:49:33 <Earnestly>	iconoclast_hero: -E is ERE
Feb 24 18:49:40 <iconoclast_hero>	yes
Feb 24 18:49:43 <tirnanog>	GNU grep supports -P (usually).
Feb 24 18:49:47 <iconoclast_hero>	yes.
Feb 24 18:49:59 <iconoclast_hero>	while read -r line; do i="${line/ : player: played /: }"; echo "$i"|grep -P "(?<=\/)(.*?)(?=\/)\/(.*?)(?=\")"; done <<< $(mpd.played)
Feb 24 18:50:05 <Earnestly>	But yeah, for paths you absolutely do not need regex
Feb 24 18:50:48 <iconoclast_hero>	i mean there are other ways to highlight that file name
Feb 24 18:51:07 <Earnestly>	iconoclast_hero: Show me mpd.played and what you want
Feb 24 18:51:30 <iconoclast_hero>	Feb 24 12:43 : player: played "Stevie Ray Vaughan/Stevie Ray Vaughan and Double Trouble -- The Complete Epic Recordings Collection (2014)/Stevie Ray Vaughan and Double Trouble -- Soul to Soul (1985)/Stevie Ray Vaughan and Double Trouble -- 10 - Life Without You.flac"
Feb 24 18:51:30 <iconoclast_hero>	Feb 24 12:47 : player: played "Van Morrison/Van Morrison with Georgie Fame & Friends -- How Long Has This Been Going On (1995) (mp3)/Van Morrison -- 02 - The New Symphony Sid.mp3"
Feb 24 18:51:37 <iconoclast_hero>	that's the format.
Feb 24 18:51:39 <Earnestly>	iconoclast_hero: mpd.played is a command, right?
Feb 24 18:51:42 <iconoclast_hero>	yes.
Feb 24 18:52:31 <Earnestly>	That's good, so you can drop ever using <<< "$(mpd.played)". You'd use < <(mpd.played) instead, although I think you can avoid that here too
Feb 24 18:52:53 <iconoclast_hero>	it's tail -500 /var/log/mpd.log or thereabouts.
Feb 24 18:53:48 <Earnestly>	iconoclast_hero: How does it handle " inside the filename? Curious mostly, not going to use that
Feb 24 18:55:01 <iconoclast_hero>	it doesn't.  that would probably result in something that displayed incorrectly, but this is just for my quick evaluation of the playlist/library
Feb 24 18:55:15 <Earnestly>	iconoclast_hero: So " just appears as a normal character?
Feb 24 18:56:03 <iconoclast_hero>	if you're asking about " occurring in a file name, $ find. "*\"*flac"|wc -l
Feb 24 18:56:03 <iconoclast_hero>	400
Feb 24 18:56:07 <Earnestly>	iconoclast_hero: And you want to highlight the filename?
Feb 24 18:56:20 <iconoclast_hero>	yes with grep --color=auto
Feb 24 18:56:29 <iconoclast_hero>	or maybe --color=always
Feb 24 18:56:41 <iconoclast_hero>	no, the latter.
Feb 24 18:56:53 <iconoclast_hero>	but i can use tput...
Feb 24 18:58:21 <Earnestly>	iconoclast_hero: https://0x0.st/H5kO.png
Feb 24 18:58:53 <Earnestly>	iconoclast_hero: Split on /, select last field, add colour, print it
Feb 24 18:59:44 <iconoclast_hero>	i definitely see the adding color ; printing part
Feb 24 18:59:59 <iconoclast_hero>	OFS is ? Field Separator?
Feb 24 19:00:02 <Earnestly>	iconoclast_hero: If you want to do this in bash you can read each line into an array delimited by / then access and update the last element using slicing
Feb 24 19:00:10 <Earnestly>	iconoclast_hero: output field separator, yeah
Feb 24 19:00:21 <Earnestly>	Default is space
Feb 24 19:00:45 <iconoclast_hero>	-F /  and -v are doing?
Feb 24 19:01:17 <iconoclast_hero>	oh that's also field separator
Feb 24 19:01:24 <iconoclast_hero>	the IFS i guess
Feb 24 19:03:40 <Earnestly>	iconoclast_hero: With just bash, https://0x0.st/H5k4.png -F is FS field separator
Feb 24 19:04:08 <Earnestly>	You can tidy it up to not include the quotes etc. but it'd look a bit crowded on a single line
Feb 24 19:04:38 <Earnestly>	iconoclast_hero: I'd use awk though, bash for this might be a bit slow
Feb 24 19:04:45 <iconoclast_hero>	awk field separator is / and define variable OFS=/ and then '{ }' is telling it what to do with that.
Feb 24 19:04:45 <iconoclast_hero>	once inside there, I see that you're defining $NF against itself wrapped in the escape codes (?) for highlighting the file
Feb 24 19:05:17 <iconoclast_hero>	but i don't see where you get $NF from nor do I see how you get the match after the last /
Feb 24 19:05:19 <Earnestly>	iconoclast_hero: NF is the number of fields, say 4. $NF is like $4
Feb 24 19:05:30 <Earnestly>	NF is a variable that awk synthesises for you
Feb 24 19:05:41 <iconoclast_hero>	that's what i suspected
Feb 24 19:06:00 <iconoclast_hero>	so $NF always prints last field.
Feb 24 19:06:35 <Earnestly>	But the principle is the same, split over / and access the last element. arr = line.split('/'); arr[-1] = ... arr[-1] ...; print(arr.join('/'))
Feb 24 19:06:43 <Earnestly>	iconoclast_hero: Yep
Feb 24 19:06:57 <Earnestly>	You can assign to it as well
Feb 24 19:07:20 <Earnestly>	# printf '/a/b/c/d' | awk -F / 'NF = 2'
Feb 24 19:07:21 <shbot>	Earnestly:  a
Feb 24 19:07:28 <Earnestly>	# printf '/a/b/c/d' | awk -F / 'NF = 4'
Feb 24 19:07:30 <shbot>	Earnestly:  a b c
Feb 24 19:07:37 <Earnestly>	# printf '/a/b/c/d' | awk -F / -v OFS=/ 'NF = 4'
Feb 24 19:07:39 <shbot>	Earnestly: /a/b/c
Feb 24 19:08:56 <Earnestly>	iconoclast_hero: awk is: pattern {action}.  pattern is boolean. If no pattern, default is true. If no {action} default is 'print', 'print' without arguments is the same as 'print $0'. That's pretty much all you need to understand the structure of an awk program
Feb 24 19:11:39 <iconoclast_hero>	ok.
Feb 24 19:13:25 <iconoclast_hero>	so above is the action to define the FS as / and what I assume to be a defined awk variable OFS that it then uses in the action?
Feb 24 19:13:49 <iconoclast_hero>	which since it isn't listed is print $0
Feb 24 19:13:56 <iconoclast_hero>	the action is print $0
Feb 24 19:14:05 <iconoclast_hero>	err...
**** ENDING LOGGING AT Sat Feb 24 19:15:17 2024

**** BEGIN LOGGING AT Sun Feb 25 02:09:51 2024

Feb 25 02:09:50 *	Now talking on #bash
Feb 25 02:09:50 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 25 02:09:50 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 25 02:15:30 <iconoclast_hero>	i'm reading something to verify that my heuristically-defined understanding of "pipe" dating back to the Clinton Presidency
Feb 25 02:15:42 <larryv>	!pf 63 > iconoclast_hero
Feb 25 02:15:42 <greybot>	iconoclast_hero: https://mywiki.wooledge.org/BashPitfalls#pf63 -- Don't do this! -- while … done <<< "$(foo)"
Feb 25 02:16:06 <iconoclast_hero>	well...
Feb 25 02:16:08 <ormaaj>	Bash has 3 asynchronous pipe-making gizmos - pipelines, procsubs, and coprocs. Plus one synchronous one - command substitutions. (soon to be two kinds)
Feb 25 02:16:28 <iconoclast_hero>	i'm a bit more curious about this parallel forking with pipes.
Feb 25 02:17:24 <cheater>	rate my parser https://github.com/cheater/prompt/blob/master/prompt
Feb 25 02:17:43 <ormaaj>	!check
Feb 25 02:17:44 <checkbot>	cheater: Line 202: Argument mixes string and array. Use * or separate argument. Line 547: Want to escape a single quote? echo 'This is how it'\''s done'. Line 568: Check exit code directly with e.g. 'if ! mycmd;', not indirectly with $?. See https://shellcheck.net/?id=cb23864 for all 13 issues.
Feb 25 02:18:03 <iconoclast_hero>	is understanding what a named pipe is critical at this juncture?
Feb 25 02:18:30 <larryv>	!fifo
Feb 25 02:18:30 <greybot>	http://mywiki.wooledge.org/NamedPipes
Feb 25 02:18:31 <tirnanog>	mkfifo, essentially.
Feb 25 02:18:47 <ormaaj>	not really.
Feb 25 02:19:08 <ormaaj>	named pipes are almost never necessary in bash.
Feb 25 02:19:47 <iconoclast_hero>	ok, i'm sold on not using <<<$(...)
Feb 25 02:19:53 <iconoclast_hero>	k
Feb 25 02:20:04 <cheater>	lol all of those results are stupid
Feb 25 02:20:17 <cheater>	mayyyyybe the first one
Feb 25 02:20:21 <cheater>	anyways
Feb 25 02:20:30 <cheater>	what do you think of the code?
Feb 25 02:23:14 <cheater>	btw, fuckin hell... https://www.baeldung.com/linux/bash-case-relational-operators
Feb 25 02:23:34 <cheater>	now, i ain't saying it's wrong
Feb 25 02:23:41 <cheater>	i'm just saying it's perverted and against nature
Feb 25 02:27:29 <tirnanog>	bail-dung
Feb 25 02:27:33 <tirnanog>	it's wrong, unsurprisingly.
Feb 25 02:27:49 <tirnanog>	  [0-80])
Feb 25 02:27:51 <tirnanog>	   echo "the number is between 0 and 80";;
Feb 25 02:27:53 <tirnanog>	wrong. very wrong.
Feb 25 02:28:19 <tirnanog>	has all the hallmarks of 'AI' generated nonsense.
Feb 25 02:29:02 <tirnanog>	though it's not as bad as that one somebody mentioned recently which contains imaginary syntax.
Feb 25 02:31:39 <Riviera>	tirnanog: uhm, that's what the text says :)
Feb 25 02:31:54 <Riviera>	"However, the above solution won’t work as the case statement isn’t capable of handling a character range. [0-80] is a character group and the numbers between […] are treated as separate characters by Bash. To compare numeric values, we can use the pipe operator (|), AND operator (&&), and ternary operator among others.
Feb 25 02:31:59 <Riviera>	"
Feb 25 02:32:12 <tirnanog>	I sit corrected then.
Feb 25 02:32:28 <tirnanog>	weird way of going about it, though.
Feb 25 02:33:26 <Riviera>	when i write stuff like that i add comments like "# broken"
Feb 25 02:34:16 <Riviera>	similar to how linguists prefix non-grammatical / artificial examples with an asterisk, like *thirnanog
Feb 25 02:36:12 <tirnanog>	however:
Feb 25 02:36:29 <tirnanog>	  [8-9]|[1-9][0-9]|100)
Feb 25 02:36:31 <tirnanog>	   echo ">=81<=100"
Feb 25 02:36:55 <tirnanog>	it goes off the rails anyway.
Feb 25 02:38:17 <tirnanog>	and this time, it doesn't mention that it's broken :D
Feb 25 02:38:20 <Riviera>	hehe
Feb 25 02:38:47 <Riviera>	true, i did not read that far :)
Feb 25 02:39:31 <tirnanog>	it does not seem organic in nature. but it's hard to say.
Feb 25 02:44:53 <cheater>	no one gonna say anything about my code? :(
Feb 25 02:45:08 <ormaaj>	cheater: the single quote warnings are usually pretty pointless unless you have no clue what they do. :/
Feb 25 02:45:43 <cheater>	that's such a weird sentence
Feb 25 02:47:51 <cheater>	ormaaj: did you mean "have a clue"?
Feb 25 02:48:47 <ormaaj>	I don't think so :o
Feb 25 02:49:00 <ormaaj>	have a clue = warnings unnecessary
Feb 25 02:50:00 <ormaaj>	 $ zsh -c 'function function for for do do case case in esac done for for'; echo "$?"
Feb 25 02:50:01 <ormaaj>	0
Feb 25 02:50:06 <ormaaj>	:S
Feb 25 02:51:54 <phy1729>	parsers hate this one nick
Feb 25 03:02:09 <ormaaj>	I assume that includes some zshisms because I have no idea why that's valid
Feb 25 03:03:40 <ormaaj>	ksh mode appears to enforce { after function like ksh93
Feb 25 03:06:47 <ormaaj>	# function function for for do case case in esac done; \function; echo "$?"
Feb 25 03:06:49 <shbot>	ormaaj: 0
Feb 25 03:13:36 <ormaaj>	Oh no there's more
Feb 25 03:13:45 <ormaaj>	# for for do select select do case case in esac done done; echo "$?"
Feb 25 03:13:46 <shbot>	ormaaj: 0
Feb 25 03:13:50 <ormaaj>	:D
Feb 25 03:15:22 <GTAXL>	is there a way to find the directory the script itself is stored on disk in, not necessarily what directory it was executed from?
Feb 25 03:16:31 <phy1729>	!faq location
Feb 25 03:16:31 <greybot>	https://mywiki.wooledge.org/BashFAQ/028 -- How do I determine the location of my script?  I want to read some config files from the same place.
Feb 25 03:16:32 <ormaaj>	The former yes. The latter I don't think is possible.
Feb 25 03:16:48 <phy1729>	The script might not be on disk at all
Feb 25 03:16:51 <ormaaj>	what does executed from mean?
Feb 25 03:16:59 <phy1729>	PWD
Feb 25 03:17:05 <ormaaj>	mh :/
Feb 25 03:18:59 <GTAXL>	if the script is called from a crontab, where does cron execute it from, a home dir or the directory the script is in? I want to set a variable of the directory the script is in
Feb 25 03:19:44 <ormaaj>	I would assume cron doesn't alter its pwd
Feb 25 03:19:48 <phy1729>	depends on which cron you have but many let you set the current dir
Feb 25 03:20:19 <ormaaj>	`env -C dir` otherwise
Feb 25 03:21:44 <ormaaj>	Best if your scripts aren't sensitive to PWD
Feb 25 03:24:23 <ormaaj>	Is there a BASH_SOURCE thing in zsh?
Feb 25 03:28:09 <ormaaj>	There are hardly even any arrays defined by the shell
Feb 25 03:29:38 <GTAXL>	realpath $(dirname $0)
Feb 25 03:29:41 <GTAXL>	gave me what I wanted
Feb 25 03:29:50 <GTAXL>	lots of googling
Feb 25 03:30:36 <ormaaj>	it's not really what you want.
Feb 25 03:31:06 <GTAXL>	it gave me the output I wanted
Feb 25 03:32:29 <GTAXL>	I made a test script as /root/test/test.sh but executed it in the home directory
Feb 25 03:32:39 <GTAXL>	the output, The script is located in: /root/test
Feb 25 03:33:43 <ormaaj>	just don't use it for anything important
Feb 25 03:33:55 <GTAXL>	how would you do it?
Feb 25 03:42:49 <ormaaj>	err well "depends". Ideally my scripts are in a known location. E.g. my bashrc uses several libraries. It finds them by querying fstab for the filesystem associated with the current root directory, then it finds the mountpoint of a subvolume containing my scripts that are in a known location relative to that subvolume.
Feb 25 03:43:02 <ormaaj>	\source "$(\findmnt -umlnfo target -O subvol=/vol/dotfiles "PARTLABEL=$(\findmnt -uslnfo partlabel -T /)")/common/home/shell/functions"
Feb 25 03:49:14 <ormaaj>	That faq doesn't even discuss the most reliable option - replace /bin/sh with a wrapper that tells you where the script is. :D
Feb 25 03:58:10 <lolok>	i have a long running program cmd1; it spits out a bunch of diagnostic to stdout and then hangs. i want to process its stdout with cmd2, but cmd2 wont start processing until its hit eof, and since cmd1 will hang, cmd2 will block on read. doing `cmd1 | head -n $N | cmd2` works if i can guess how much data i will get. doing `cmd1 | ( cat & sleep $N ; kill $! ) | cmd2` will work if i know how long cmd1 will run. is there some way i can know when a pipe is blocking
Feb 25 03:58:11 <lolok>	and give sigpipe or something?
Feb 25 04:00:05 <lolok>	i guess that probably wont work but idk
Feb 25 04:01:16 <ormaaj>	lolok: If there is nothing to indicate where the output ends then there's nothing you can do.
Feb 25 04:04:24 <ormaaj>	lolok: If the "hang" is in a known location or you know of a particular unique state that indicates where you wan to stop, then you could attach a debugger and use it to trigger an action on a breakpoint or other condition.
Feb 25 04:04:37 <lolok>	i can probably settle for a timeout, but it would be much better to timeout after some time of nothing in the pipe, rather than the start of the program
Feb 25 04:09:52 <lolok>	and a while loop... maybe... i might just rubber duck this...
Feb 25 04:10:03 <ormaaj>	I would run it through ltrace first and see if it stops on a predictable function call.
Feb 25 04:10:29 <ormaaj>	A timeout is easy. Use read -t
Feb 25 04:14:05 <ormaaj>	There aren't really that many things that can cause a program to just stop without being caught in a loop that don't involve waiting on a system call too
Feb 25 04:26:11 <lolok>	actually i just noticed it does print something predictable as the last line so i can sed or grep for that
Feb 25 04:26:26 <lolok>	yea i know what its waiting for but thats a whole can of worms
Feb 25 04:26:57 <lolok>	cmd1 is not so simple as it may appear
Feb 25 04:29:29 <lolok>	yea `cmd1 | sed /"$marker"/q | cmd2` works
Feb 25 04:37:57 <llua>	code injection is bad mkay.
Feb 25 04:38:54 <lolok>	if i intended to deploy any of this i would deserve to be shot
Feb 25 04:58:49 <emanuele6>	how ba-a-a-ad could it be?
Feb 25 05:01:35 <lolok>	basically code golf
Feb 25 06:22:03 <sphertext_>	hmm socat is very interesting. if i'm not mistaken, it implements the concept of pipe and fd redirections, as well as extending it to network connections
Feb 25 06:36:09 <emanuele6>	hmm
Feb 25 06:46:58 <emanuele6>	basically dd, but for networks
Feb 25 06:48:13 <arraybolt3>	I regularly use socat, it burns me up though that it can only handle one connection at a time.
Feb 25 06:48:35 <emanuele6>	what?
Feb 25 06:48:41 <arraybolt3>	I'm using it to brute-force my way through a crazy port forwarding scenario - it works *iff* only one connection needs made to the port in question.
Feb 25 06:49:13 <emanuele6>	you can connect multiple things with the fork flag
Feb 25 06:49:23 <arraybolt3>	orly, nice
Feb 25 06:51:15 <arraybolt3>	hmm, but confusing
Feb 25 06:51:26 <arraybolt3>	I never did figure out how socat's syntax works and just used an example they had
Feb 25 06:53:34 <emanuele6>	hey, at least in socat syntax you don't index array with  array⚡number
Feb 25 06:53:48 <arraybolt3>	hey!
Feb 25 06:54:15 <emanuele6>	ehi
Feb 25 10:47:46 <trev>	hi, requesting another bash code review from the bash wizards, if it's ok. It's a rofi/dmenu alternative: https://github.com/trevarj/dotfiles/blob/master/sxhkd/.config/sxhkd/bin/tmenu
Feb 25 10:52:06 <ormaaj>	cthuhlu reviewing... ~~(~.~)~~
Feb 25 10:55:23 <ormaaj>	what? :o
Feb 25 10:55:51 <trev>	please don't eat my soul cthuhlu
Feb 25 10:57:36 <geirha>	will that regex handle the Exec= line being before the Name= line?
Feb 25 10:59:31 <trev>	no, sadly. the previous iteration used awk which would handle that and also filter out applications that are NoDisplay=true or Terminal=true. My regex-fu stinks though and this felt good enough and is much faster
Feb 25 10:59:42 <trev>	before i had to do caching of the entries which felt yucky
Feb 25 11:00:25 <ormaaj>	I need a json formatter
Feb 25 11:00:41 <geirha>	also, why isn't it looking through XDG_DATA_HOME (~/.local/share)?
Feb 25 11:01:34 <trev>	nice catch. i should add that in there
Feb 25 11:02:09 <trev>	i don't have anything in there, that's probably why
Feb 25 11:03:00 <geirha>	I'd go through "${XDG_DATA_HOME:-~/.local/share}" and "$XDG_DATA_DIRS", but the latter is colon separated list like PATH so you'll need to split it first
Feb 25 11:04:04 <trev>	ok
Feb 25 11:05:03 <geirha>	ormaaj: jq
Feb 25 11:05:34 <geirha>	or python3 -mjson.tool
Feb 25 11:05:51 <Earnestly>	I'd probably suggest ignoring XDG_DATA_DIRS, I have some reasons which are a bit much for an irc response; I would even not bother checking if XDG_DATA_HOME is absolute, simply `datadir=${XDG_DATA_HOME:-$HOME/.local/share}/progname' is enough
Feb 25 11:07:26 <Earnestly>	(XDG_DATA_DIRS are paths to search /in addition to/ XDG_DATA_HOME. But no one uses it and it's a bit of an awkward entry into the spec, which itself is a very awkward collection of ideas that weren't very well thought through)
Feb 25 11:09:28 <geirha>	well it does include directories with desktop entries here, that trev's ripgrep would miss
Feb 25 11:09:42 <Earnestly>	trev: Why not support multi selection btw?
Feb 25 11:10:15 <geirha>	or actually, since they're searching through entire /usr I gues they will find them after all. Anyway, should avoid needlessly searching through a bunch of dirs
Feb 25 11:10:44 <Earnestly>	I just kind of hope XDG_DATA_DIRS gets forgotten about and I encourge people to just not support it
Feb 25 11:11:39 <geirha>	certainly seems like gnome uses it actively
Feb 25 11:12:26 <Earnestly>	Yeah, it does
Feb 25 11:12:54 <Earnestly>	I imagine KDE does too, since XBDS is historically their internal-use-only spec
Feb 25 11:13:26 <Earnestly>	People have somewhat incorrectly latched onto it for other stuff but it is better than nothing and better than littering HOME with dotfiles so I'm not complaining much
Feb 25 11:13:39 <trev>	Earnestly: you're right, multi-select would work
Feb 25 11:14:00 <Earnestly>	geirha: But imagine how beautiful the symmetry would have been if they just put FHS under .local, mirroring /usr/local
Feb 25 11:14:26 <Earnestly>	You get multi-arch for free, everything just works, make PREFIX=.local install just works, etc.
Feb 25 11:15:16 <Earnestly>	trev: But you would have to loop. I'd also suggest getting rid of functions here, they exist to be called /once/
Feb 25 11:15:26 <trev>	another good point
Feb 25 11:15:30 <Earnestly>	Hm lets see
Feb 25 11:17:44 <Earnestly>	trev: I'll leave some notes, so at some point I'll give you a paste
Feb 25 11:18:07 <trev>	Earnestly: thanks! please be earnest
Feb 25 11:23:12 <Earnestly>	trev: This rg command doesn't work for me btw
Feb 25 11:23:16 <Earnestly>	Just exists 1
Feb 25 11:23:18 <Earnestly>	exits*
Feb 25 11:23:53 <trev>	which version?
Feb 25 11:24:14 <trev>	14.1 for me
Feb 25 11:24:31 <Earnestly>	Same
Feb 25 11:24:42 <Earnestly>	The regex is wrong, seemingly
Feb 25 11:25:11 <Earnestly>	Ah nevermind
Feb 25 11:30:55 <Earnestly>	trev: Is it meant to be quite limited btw? I get about 9 results with rg out of 103 .desktop entries
Feb 25 11:32:37 <trev>	Earnestly: not intentionally...shows me a good amount
Feb 25 11:34:23 <Earnestly>	trev: 78 unique. Anyway, you're just after the Name= after [Desktop Entry] if it also contains an Exec=? (There is also Hidden= you might want to care about)
**** BEGIN LOGGING AT Sun Feb 25 18:41:34 2024

Feb 25 18:41:33 *	Now talking on #bash
Feb 25 18:41:33 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 25 18:41:33 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** ENDING LOGGING AT Sun Feb 25 18:41:52 2024

**** BEGIN LOGGING AT Tue Feb 27 23:15:59 2024

Feb 27 23:15:58 *	Now talking on #bash
Feb 27 23:15:58 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 27 23:15:58 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 27 23:19:19 <Al2O3>	the ${f%.foo}.bar did the trick TY again
Feb 27 23:44:54 <clarkk>	Why does this command ignore `grep -v`?   ping -DO 8.8.8.8 | stdbuf -oL awk -F "[][]" "/^\[/{print strftime(\"%Y-%m-%d %H:%M:%S\", \$2), \$3; next} 1" | stdbuf -oL grep -v "bytes from" > network-ping.txt
Feb 27 23:46:08 <clarkk>	Actually this may be the wrong channel for this. Not sure. Let me know if so
Feb 27 23:47:53 <ormaaj>	Maybe because stdbuf does absolutely nothing. Still have never seen an example where it makes any difference at all. :o)
Feb 27 23:48:21 <JAA>	It does make a difference with GNU grep at least.
Feb 27 23:48:43 <JAA>	(Although you can probably achieve the same thing with --line-buffered.)
Feb 27 23:49:01 <ormaaj>	yeah those options seem to work much better.
Feb 27 23:49:33 <ormaaj>	and sed -u generally works
Feb 27 23:49:42 <JAA>	I don't think stdbuf works at all for mawk. You need `-W interactive` there instead.
Feb 27 23:50:44 <JAA>	I think I've also seen an effect on GNU's tail.
Feb 27 23:51:01 <JAA>	For -f with multiple files IIRC.
Feb 27 23:51:13 <emanuele6>	stdbuf only works for non-statically linked programs that use glibc
Feb 27 23:51:44 <emanuele6>	and only for things that use stdio functions to read/write; not if the program uses something else to print
Feb 27 23:52:20 <emanuele6>	ormaaj: you can use it to change the buffering of bash (for printf/echo)
Feb 27 23:52:46 <emanuele6>	but it generally works on most tools, at least if they are written in C, use stdio, and are not built statically
Feb 27 23:53:45 <JAA>	That makes sense, yeah.
Feb 27 23:54:16 <larryv>	clarkk: you can probably augment the awk script to get the same effect as grep -v. as an aside, single quotes would REALLY help you there.
Feb 27 23:56:15 <emanuele6>	# type stdbuf
Feb 27 23:56:16 <shbot>	emanuele6: bash: type: stdbuf: not found
Feb 27 23:56:29 <emanuele6>	hmm, shbot does not have it
Feb 27 23:56:33 <cappy>	http://www.pixelbeat.org/programming/stdio_buffering/
Feb 27 23:56:50 <emanuele6>	ormaaj: try   stdbuf -o0 bash -c '{ enable fdflags; fdflags -s+direct 1; printf abcdef;} | while dd status=none count=1; do printf \\n; done' | sed '/f/q'    vs without stdbuf -o0
Feb 27 23:57:17 <ormaaj>	Oh heh it says gnu tee screws with the buffering itself. Funny I'm usually using tee when I want to change how things buffer
Feb 27 23:57:41 <clarkk>	actually, I pasted the wrong command, due to all the troubleshooting I've already done. This is it. tee won't work without stdbuf  `ping -DO 8.8.8.8 | stdbuf -oL awk -F "[][]" "/^\[/{print strftime(\"%Y-%m-%d %H:%M:%S\", \$2), \$3; next} 1" | tee -a network-ping.txt`
Feb 27 23:59:20 <ormaaj>	that sucks. Normally the exact time you want to control is is when you need to split some output into multiple channels, and tee is like pretty much the main way to do that
Feb 28 00:02:06 <clarkk>	larryv, do you mean like this, using single quotes?  ping -DO 8.8.8.8 | stdbuf -oL awk -F '[][]' '/^\[/{print strftime("%Y-%m-%d %H:%M:%S", $2), $3; next} 1' | tee -a network-ping.txt
Feb 28 00:02:06 <ormaaj>	:o interesting
Feb 28 00:03:10 <clarkk>	larryv, if I try to add in the filter, it breaks tee.  ping -DO 8.8.8.8 | stdbuf -oL awk -F '[][]' '/^\[/{if($3 !~ /bytes from /) print strftime("%Y-%m-%d %H:%M:%S", $2), $3; next} 1' | tee -a network-ping.txt
Feb 28 00:04:56 <ormaaj>	emanuele6: why does the direct pipe matter in that case?
Feb 28 00:07:40 <clarkk>	emanuele6, sorry, I didn't see your message. That returns bash: line 1: enable: fdflags: not a shell builtin
Feb 28 00:10:51 <emanuele6>	ormaaj: with a direct pipe every write() is boxed in a packet, and every read() only reads one packet. if it were not a direct pipe, write()s would just accumulate in the pipe's buffer, and when a process read()s the pipe, the kernel will just give it as much data from the buffer as it can. so it would not show the difference
Feb 28 00:11:25 <emanuele6>	clarkk: well, it sounds like you don't have fdflags
Feb 28 00:12:33 <clarkk>	emanuele6, I can't find it in the apt repo, on debian 12
Feb 28 00:13:21 <emanuele6>	it should be the bash-builtins package if you want it
Feb 28 00:13:46 <ormaaj>	Many distros don't bother to include them or have bash configured to use them by default.
Feb 28 00:13:56 <emanuele6>	another way to see the difference more explicitly without a direct pipe is  strace -qqefd=1 -ewrite stdbuf -o0 bash -c 'printf abc' >/dev/null    vs without  stdbuf -o0
Feb 28 00:15:45 <emanuele6>	with -o0 bash (or any other compatible program) writes one character at the time, with -o10  in chunk of 10 character, with -oL up to a newline (except if the line is too long), etc
Feb 28 00:16:35 <emanuele6>	note that i have noticed some time ago that bash printf is "bugged", and always flushes the buffer after a newline even if the buffering is not -oL, so maybe use  /bin/printf  to see how it is actually supposed to work
Feb 28 00:23:34 <ormaaj>	Does it have a separate effect on the read and write ends or does setting the flag on either end affect functions on both ends?
Feb 28 00:23:59 <emanuele6>	it affects both ends
Feb 28 00:25:14 <emanuele6>	well, really it does not actually
Feb 28 00:25:31 <ormaaj>	:O
Feb 28 00:25:49 <emanuele6>	but if you set on the write end, it seems to be enough
Feb 28 00:25:50 <ormaaj>	!coffee
Feb 28 00:25:50 <greybot>	c[_]
Feb 28 00:27:53 <emanuele6>	# enable fdflags; (sleep 1; printf x; printf y) | (fdflags -s+direct 0; sleep 2; dd count=1)
Feb 28 00:27:56 <shbot>	emanuele6: xy0+1 records in
Feb 28 00:27:56 <shbot>	emanuele6: 0+1 records out
Feb 28 00:27:56 <shbot>	emanuele6: 2 bytes copied, 0.00692369 s, 0.3 kB/s
Feb 28 00:28:27 <emanuele6>	setting it on the read end does nothing; the only one that matters is the write end i think
Feb 28 00:31:55 <emanuele6>	afaics if you set direct on a write end after there is already some data on the pipe, the pipe does not start behaving like a direct pipe until it gets emptied
Feb 28 00:39:51 <emanuele6>	and if you have a direct pipe already, but you open a second write end to that pipe that does not have O_DIRECT, if you write with the non-direct end first, and then the direct end; the packet contains what was written by the non-direct end followed by what was written by the direct end
Feb 28 00:40:43 <emanuele6>	if you write the other way around, the packet only contains what was written by the direct end, but the next packet will be prefixed by what was written by the non-direct end
Feb 28 00:41:22 <emanuele6>	and if the read end reads while the pipe only contains stuff written by the non-direct end, it still returns and reads the stuff written by the non-direct end
Feb 28 00:42:09 <emanuele6>	so probably O_DIRECT makes write() inject some magic end of packet marker in the pipe, that is why it only matters on the write end
**** BEGIN LOGGING AT Wed Feb 28 02:09:40 2024

Feb 28 02:09:40 *	Now talking on #bash
Feb 28 02:09:40 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 28 02:09:40 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 28 02:09:43 <pj>	okay
Feb 28 02:10:22 <emanuele6>	the first substitution command always only expands literal code of your script, so it is always safe as long as you only expand those values before the next substitution
Feb 28 02:11:32 <pj>	okay, yeah this is completely out of my league, heh.
Feb 28 02:11:34 <ormaaj>	(where "their arguments" is the entire remainder of the script)
Feb 28 02:12:46 <emanuele6>	like this https://0x0.st/HRj_.txt
Feb 28 02:13:25 <emanuele6>	err,  importas -ui c c   https://0x0.st/HRjL.txt
Feb 28 02:14:58 <ormaaj>	:O
Feb 28 02:20:32 <ormaaj>	double multisubstitute cute
**** ENDING LOGGING AT Wed Feb 28 02:32:44 2024

**** BEGIN LOGGING AT Thu Feb 29 01:02:42 2024

Feb 29 01:02:42 *	Now talking on #bash
Feb 29 01:02:42 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 29 01:02:42 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 29 01:02:58 <bxsx>	It would be very nice if I break the loop on the first occurrence, but I don't it, well, still not that bad..
Feb 29 01:04:25 <bxsx>	larryv: any real difference between setting the flag to 1 or true?
Feb 29 01:04:38 <larryv>	why bother with a flag? just use the loop variable
Feb 29 01:04:46 <bxsx>	ahhhhhh
Feb 29 01:04:56 <bxsx>	it's not cleared after the loop?
Feb 29 01:05:14 <larryv>	no
Feb 29 01:05:15 <larryv>	# shopt -s nullglob; f=; for f in .*; do :; done; declare -p f
Feb 29 01:05:17 <shbot>	larryv: declare -- f=".mkshrc"
Feb 29 01:05:23 <larryv>	# shopt -s nullglob; f=; for f in foo*; do :; done; declare -p f
Feb 29 01:05:24 <shbot>	larryv: declare -- f=""
Feb 29 01:06:16 <larryv>	it's not cleared before the loop either, which is why you have to do it yourself
Feb 29 01:06:30 <larryv>	# shopt -s nullglob; f=x; for f in foo*; do :; done; declare -p f
Feb 29 01:06:31 <shbot>	larryv: declare -- f="x"
Feb 29 01:06:37 <bxsx>	I see
Feb 29 01:07:00 <bxsx>	no, the nullglob makes a lot of sense
Feb 29 01:08:19 <bxsx>	s/no/now
Feb 29 01:09:28 <bxsx>	larryv: thanks
Feb 29 01:09:37 <larryv>	np
Feb 29 01:10:58 <bxsx>	I guess in the final solution it would the [[ -z $f ]] or should I use declare -p for that (I'm assuming you used that only to demo the output now?)
Feb 29 01:11:36 <larryv>	yeah, that was just for show. you would do something like if [[ -z $f ]]; then echo oh no; exit 1; fi
Feb 29 01:13:02 *	Disconnected ()
**** ENDING LOGGING AT Thu Feb 29 01:13:02 2024

**** BEGIN LOGGING AT Thu Feb 29 01:15:36 2024

Feb 29 01:15:36 *	Now talking on #bash
Feb 29 01:15:36 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 29 01:15:36 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 29 02:59:47 <sphertext>	i've tested the code for the mac osx -exec bug in the find utility on 10.14 and it's still broken. even tho the wiki claims it's been fixed after 10.8 https://mywiki.wooledge.org/UsingFind#Nasty_OS_X_bug
Feb 29 03:00:54 <sphertext>	wait no
Feb 29 03:01:56 <sphertext>	well i tried copy pasting the commands in a script instead of writing them by hands and i got the correct outcome
Feb 29 03:02:10 <sphertext>	so i made a mistake the first time
Feb 29 03:08:32 <sphertext>	ok i found the problem. it's unrelated to the mac osx bug
Feb 29 03:15:45 <alguien>	how do i terminate the pipe (only) as soon as one part fails?
Feb 29 03:16:21 <alguien>	i can get get the error code of the failing part with `set -o pipefail`, but it still seems to execute the rest of the pipe
Feb 29 03:23:42 <tirnanog>	that's how they work; they are fully asynchronous in nature. the question is: why is it a problem in your case? a program attempting to read from its end of a closed pipe will encounter EOF, whereas a program attempting to write to its end of a closed pipe will receieve SIGPIPE.
Feb 29 03:23:48 <tirnanog>	alguien: ^
Feb 29 03:25:11 <alguien>	hm, maybe it isn't a problem then, thanks
Feb 29 03:26:11 <tirnanog>	as a silly little example, if you run seq 1 1000000 | head -n1, it will get nowhere near writing one million lines.
Feb 29 03:27:05 *	alguien nods
Feb 29 03:27:41 <tirnanog>	https://termbin.com/v4d3u
Feb 29 03:29:06 <tirnanog>	also, try man 7 pipe. if you don't have it: https://www.man7.org/linux/man-pages/man7/pipe.7.html
Feb 29 03:29:13 <alguien>	Prob was I tested with find nonexistent | echo yes, and I always got yes
Feb 29 03:29:22 <alguien>	but that's not equivalent to what i'm doing
Feb 29 03:29:38 <tirnanog>	I don't know what you expected to happen there. echo doesn't read anything.
Feb 29 03:29:42 <alguien>	my real RHS is read, and it will just not read anything
Feb 29 03:29:49 <tirnanog>	for example?
Feb 29 03:29:59 <tirnanog>	this sounds like !faq disappear, honestly.
Feb 29 03:30:08 <alguien>	!faq disappear
Feb 29 03:30:08 <greybot>	https://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop that's in a pipeline. Why do they disappear after the loop terminates? Or, why can't I pipe data to read?
Feb 29 03:30:24 <alguien>	nah, that was an earlier topic :)
Feb 29 03:30:31 <tirnanog>	what then?
Feb 29 03:30:49 <cornfeedhobo>	can someone suggest a good way to do a non-regex search-and-replace within a file?
Feb 29 03:30:51 <alguien>	you answered my question
Feb 29 03:31:17 <alguien>	cornfeedhobo, non-interactive vi
Feb 29 03:31:36 <tirnanog>	perl is very good at it.
Feb 29 03:31:38 <tirnanog>	https://mywiki.wooledge.org/BashFAQ/021#Just_Tell_Me_What_To_Do
Feb 29 03:31:45 <cornfeedhobo>	na, vi is too heavy. i need it to work in build container.
Feb 29 03:31:51 <tirnanog>	thanks to its quotemeta (\Q) functionality.
Feb 29 03:32:06 <cornfeedhobo>	perl is also an option that is commonly offered, but also not well suited to portability
Feb 29 03:32:12 <tirnanog>	awk then.
Feb 29 03:32:24 <alguien>	ed is posix
Feb 29 03:32:31 <tirnanog>	actually, it's awkward in awk (ha).
Feb 29 03:32:33 <alguien>	but i think it's complicated
Feb 29 03:32:46 <cornfeedhobo>	yeah, awk makes it difficult
Feb 29 03:32:47 <tirnanog>	"non-regex" was a component of the question.
Feb 29 03:32:55 <alguien>	sed has a switch i think, but i don' think it's posix
Feb 29 03:33:00 <cornfeedhobo>	it's really this non-regex that makes it hard
Feb 29 03:33:17 <cornfeedhobo>	which is surprising somewhat... like why isn't there a common tool or flag for this
Feb 29 03:33:28 <tirnanog>	well, how about bash then. it won't be as fast, but you can do line=${line//"$literal"/...} easily enough.
Feb 29 03:33:36 <cornfeedhobo>	but i also haven't had to deal with this before, so there's that :p
Feb 29 03:33:39 <sphertext>	re: the current question.. i had this idea but idk how to take it from here. the last echo could be substituted with kill, but idk how to choose a process id
Feb 29 03:33:41 <sphertext>	# set -o pipefail; echo f | grep b  | { ! [[ "$?" -eq 0 ]] && echo b ; }
Feb 29 03:33:43 <shbot>	sphertext: no output
Feb 29 03:33:45 <tirnanog>	not actually a literal but treating the content of the var literally there.
Feb 29 03:33:46 <alguien>	cornfeedhobo, agreed
Feb 29 03:34:34 <sphertext>	# set -o pipefail; echo "f" | grep b | { ! [[ "$?" -eq 0 ]] && echo g ; }
Feb 29 03:34:36 <shbot>	sphertext: no output
Feb 29 03:34:36 <cornfeedhobo>	yeah, i could read in the entire file and do the replace with native bash
Feb 29 03:34:43 <sphertext>	dunno why it's not working
Feb 29 03:35:09 <tirnanog>	# printf 'foo baboon bar baboon\n' > input; needle=baboon; while read -r; do REPLY=${REPLY//"$needle"/orangutan}; printf '%s\n' "$REPLY"; done < input > output; cat output
Feb 29 03:35:11 <shbot>	tirnanog: foo orangutan bar orangutan
Feb 29 03:35:20 <sphertext>	oh the `set-o pipefail` doesn't register
Feb 29 03:35:34 <sphertext>	if you run `set -o pipefail` as a separate command, then it will work
Feb 29 03:35:36 <tirnanog>	follow it up with a conditional mv and there you go.
Feb 29 03:35:38 <cornfeedhobo>	yeah, that's probably what i'll do, since the files aren't ever going to be that large
Feb 29 03:35:42 <tirnanog>	right. perfect then.
Feb 29 03:36:23 <cornfeedhobo>	thanks for the sounding board. I thought I was limited in my options, but needed a sanity check
Feb 29 03:37:18 <alguien>	cornfeedhobo, surely you're still missing a simple utility that would be able to do that?
Feb 29 03:37:44 <alguien>	sphertext, what will and what doesn't?
Feb 29 03:38:04 <tirnanog>	sphertext: it's not clear what you even expect $? to be there. it's a brand new subshell, it will have whatever value the parent shell had before it forked.
Feb 29 03:38:25 <tirnanog>	# false; true | true | echo "$?"
Feb 29 03:38:28 <shbot>	tirnanog: 1
Feb 29 03:38:29 <sphertext>	how do you `set -o` ?
Feb 29 03:38:35 <sphertext>	in one line
Feb 29 03:38:41 <tirnanog>	whatever it is you think you're doing there, it probably needs rethinking.
Feb 29 03:38:50 <sphertext>	i think it works
Feb 29 03:39:01 <sphertext>	but i don't know how to `set -o pipefail` in the same line
Feb 29 03:39:10 <tirnanog>	no it doesn't.
Feb 29 03:39:16 <tirnanog>	see above.
Feb 29 03:39:16 <cornfeedhobo>	alguien: it sounds like one doesn't exist, other than bash itself. to be fair, i probably should have asked in ##workingset
Feb 29 03:39:53 <alguien>	have to add that channel to autojoins i always forget its name
Feb 29 03:40:00 <sphertext>	if you run `set -o pipefail` and then ` false | { ! [[ "$?" -eq 0 ]] && echo failed ; }` you will get the outcome
Feb 29 03:40:03 <tirnanog>	if you want to know the exit status from a given portion of a pipline, issue the pipeline *first* then use PIPESTATUS.
Feb 29 03:40:04 <alguien>	i always think it's #posixset
Feb 29 03:40:10 <tirnanog>	no you bloody won't.
Feb 29 03:40:23 <sphertext>	why is it printing "failed" then?
Feb 29 03:41:09 <tirnanog>	# true | false; declare -p PIPESTATUS
Feb 29 03:41:11 <shbot>	tirnanog: declare -a PIPESTATUS=([0]="0" [1]="1")
Feb 29 03:41:22 <tirnanog>	that's how you get the status from a particular part of a pipeline.
Feb 29 03:42:25 <sphertext>	i ran the command `false | { ! [[ "$?" -eq 0 ]] && echo failed ; }` on my machine and it printed `failed`, i can show you the screen shot. but i'm getting unreliable results now, idk why
Feb 29 03:42:37 <tirnanog>	because you're not listening. that's why.
Feb 29 03:43:38 <tirnanog>	as I said earlier, the value of $? will initially be whatever it was when the parent shell forked, within all of the subshells implied by the pipeline.
Feb 29 03:44:04 <sphertext>	so it doesn't get updated by whatever happens in the pipe?
Feb 29 03:44:06 <tirnanog>	so doing foo | [[ "$?" -eq .. ]] in any capacity is nonsense code. all you're doing is testing the vaue of the _parent's_ copy of $? there.
Feb 29 03:44:12 <tirnanog>	just don't do this. it's completely wrong.
Feb 29 03:44:38 <tirnanog>	the value of $? will be meaningful after the pipeline has concluded execution.
Feb 29 03:44:46 <tirnanog>	that's where pipefail has a clear effect.
Feb 29 03:45:01 <tirnanog>	but just use PIPESTATUS if you need the exit status of anything but the final component of the pipeline.
Feb 29 03:45:04 <sphertext>	ok so it just gets inherited from the parent shell and won't be updated until the pipe finishes
Feb 29 03:45:12 <tirnanog>	it's not even that.
Feb 29 03:45:27 <tirnanog>	you have to understand that every single portion of a pipeline implies its on subshell.
Feb 29 03:45:47 <tirnanog>	if you do "foo | bar", there are two subshells. if you do "foo | bar | baz" there are three subshells.
Feb 29 03:45:56 <tirnanog>	all of them inherit the execution environment of the parent initially.
Feb 29 03:46:18 <sphertext>	ok i get it
Feb 29 03:46:18 <tirnanog>	each will manipulate $? in its own right. but each subshell will eventually die and the changes it makes are immaterial.
Feb 29 03:46:31 <tirnanog>	it is how the parent shell sets $? (and PIPESTATUS) that you care about.
Feb 29 03:46:48 <sphertext>	so all the subshells of a pipe are spawned by the original parent shell? they're not sub-subshells
Feb 29 03:47:08 <tirnanog>	yes. I mean, you could make more still.
Feb 29 03:47:46 <tirnanog>	# echo "parent = $$; left subshell = $BASHPID" >&2 | echo "parent = $$; right subshell = $BASHPID" >&2
Feb 29 03:47:48 <shbot>	tirnanog: parent = 44; right subshell = 52
Feb 29 03:47:48 <shbot>	tirnanog: parent = 44; left subshell = 51
Feb 29 03:47:55 <tirnanog>	those are pid numbers.
Feb 29 03:48:15 <lockywolf>	sphertext: you can pipe into a subshell
Feb 29 03:49:15 <tirnanog>	so all you have to ask yourself is "do I need anything other than the exit status of the right-most part of the pipeline". if the answer is no, you don't need pipefail, nor PIPESTATUS. if yes, then they have a use.
Feb 29 03:50:06 <tirnanog>	(pipefail can also have side effects if over-used or used blithely - it's often perfectly normal to expect for the 'left-most' parts to fail)
Feb 29 03:50:16 <tirnanog>	feeding something through head is a great example.
Feb 29 03:51:19 <tirnanog>	as with anything, it depends on the exact use case, though.'
Feb 29 03:51:36 <sphertext>	so you need to do a check of PIPESTATUS in every element of the pipe if you want to interrupt it whenever one element fails
Feb 29 03:51:53 <sphertext>	also, how do you interrupt it after the test shows an element has failed?
Feb 29 03:52:05 <tirnanog>	well, if you genuinely consider any element failing to be an error, pipefail will do that.
Feb 29 03:52:17 <sphertext>	do you kill the parent shell?
Feb 29 03:52:20 <tirnanog>	but be careful with it. it's one of those things that may look neat at first, but it's often not appropriate.
Feb 29 03:52:26 <sphertext>	so that it stops executing the rest of the pipe
Feb 29 03:52:45 <tirnanog>	PIPESTATUS lets you just examine any of its exit status values and do as you place.
Feb 29 03:53:42 <tirnanog>	there is no such thing as "stop executing the rest of the pipe". disavoid yourself of this notion immediately. you can expect for programs to terminate sooner than they otherwise might have, perhaps.
Feb 29 03:53:57 <tirnanog>	consider the seq | head example given earlier: https://termbin.com/v4d3u
Feb 29 03:54:16 <tirnanog>	you can stop neither seq nor head running there, but seq does finish quite early, owing to the pipe error.
Feb 29 03:54:24 <tirnanog>	er, disavow, even.
Feb 29 03:54:37 <lockywolf>	what about   echo test0 | ( set -e ; cat - ; ls /fail ; echo test1   | (cat - ; echo test2 ; ) )
Feb 29 03:54:53 <lockywolf>	the pipe will terminate after ls /fail
Feb 29 03:54:59 <tirnanog>	if you think it's important that programs execute strictly sequentially, you shouldn't even be using a pipe.
Feb 29 03:55:07 <tirnanog>	because pipes are async. always.
Feb 29 03:55:29 <tirnanog>	but that's what makes them so amazing.
Feb 29 03:56:59 <tirnanog>	you don't "interrupt". you just exit the subshell in question.
Feb 29 03:57:18 <tirnanog>	stop reading. close your end of the pipe.
Feb 29 03:57:18 <sphertext>	`false | { ! [[ ${PIPESTATUS[${#PIPESTATUS[@]}-1]} -eq 0 ]] && killpipe ; }`
Feb 29 03:57:27 <sphertext>	so this is not possible, nor recommended?
Feb 29 03:57:28 <tirnanog>	no. this is complete nonsense.
Feb 29 03:57:41 <tirnanog>	if you don't want to consume any more data, stop reading and exit!
Feb 29 03:58:05 <tirnanog>	please look at the earlier paste and try to understand what's going on there.
Feb 29 03:58:16 <tirnanog>	seq gets a broken pipe eventually and that is _fine_
Feb 29 03:58:23 <tirnanog>	head closed its end of the pipe.
Feb 29 03:58:41 <tirnanog>	because it exited after reading one line.
Feb 29 03:59:05 <tirnanog>	also, man 7 pipe (please)
Feb 29 04:00:09 <tirnanog>	you check PIPESTATUS only when the entire pipeline is don.
Feb 29 04:00:18 <tirnanog>	if it is needed at all.
Feb 29 04:02:35 <tirnanog>	at best, a writer may be able to fill up the pipe buffer (16 x page size on Linux, by default - so 64 KiB on x86_64). at that point, if the reading end is closed, it will get a signal. that's what you see happening with seq in the paste. it never gets to actually write 1 million numbers.
Feb 29 04:03:25 <tirnanog>	which is a good thing, of course. it would be silly if it were allowed to go all the way to the end.
Feb 29 04:03:48 <tirnanog>	anyway, this is explained in pipe(7).
Feb 29 04:08:42 <tirnanog>	I should add: there are certain, specific cases in which cleaning up after tasks can be useful. but they should be dealt with as and when they arise. most of the time, there is no need to bring homebrew process management into it (and even then, a simple trap can be a solution).
Feb 29 04:51:52 <ormaaj>	sphertext: Stupid thing about bash # 3 trillion and one - it forcibly calls wait when the command of the last pipe element completes, and no sooner. Therefore PIPESTATUS is not accessible from that command AND the forced wait will block further execution until all of the subshells are waited on. So it is impossible to access statuses from any command that can read from the pipe. Bash doesn't even
Feb 29 04:51:52 <ormaaj>	give you their pids.
Feb 29 04:52:26 <ormaaj>	 $ shopt -s lastpipe; function pp { exec -- getpid -E p print -rf '%-2s %s\n' -u "$2" -- "$1" \$p; }; ${| local -; set +m; { pp 0a 3 | pp 1 4 | printf '%-2s %s\n' 0b "${ jobs -p; }" 3 "$BASHPID"; } 3>&1 4>&1; }
Feb 29 04:52:26 <ormaaj>	0b 3642770
Feb 29 04:52:27 <ormaaj>	3  3375217
Feb 29 04:52:27 <ormaaj>	1  3642771
Feb 29 04:52:27 <ormaaj>	0a 3642770
Feb 29 04:53:13 <ormaaj>	you can get the pid of the first element from jobs, but the ones in the middle are inaccessible.
Feb 29 04:53:26 <ormaaj>	basically pipelines suck.
Feb 29 05:03:28 <emanuele6>	>:(
Feb 29 05:07:04 <ormaaj>	Almost like it's written by one whose Cranium Has Emptyness Throughout
Feb 29 05:26:09 *	ormaaj is mean D:
Feb 29 05:26:21 <emanuele6>	not by someone with an Outstanding Roasted Mixture Awesome Arabica Jar
Feb 29 05:29:08 <cult>	Is it possible to use ${@} properly in an alias or does it cause problems? Ideally I want to use something like alias foo='echo "${@:-bar}"' but bar is always printed with or without args
Feb 29 05:29:32 <emanuele6>	aliases just replace text
Feb 29 05:29:34 <ormaaj>	it can be done
Feb 29 05:29:52 <ormaaj>	ha wow
Feb 29 05:30:08 <emanuele6>	you could define a function in the alias and call that immediately; that is the usual technique for when you need to accept arguments
Feb 29 05:31:03 <emanuele6>	'f () { something "$@"; echo hi ;}; f'    e.g. in git aliases
Feb 29 05:31:04 <cult>	Hmm yes I had a function initially but I was wondering why doing it this way results in the weird behaviour. I'd expect just "bar" if no args and a list of args otherwise. But "foo 1 2 3" will print "bar 1 2 3"
Feb 29 05:32:18 <emanuele6>	i don't remember what @:- does in bash; i know it is unspecified in standard sh
Feb 29 05:32:43 <emanuele6>	# a=(1 2 3); set -- "${@:-foo}"; echo -E set -- "${@@Q}"
Feb 29 05:32:44 <shbot>	emanuele6: set -- 'foo'
Feb 29 05:32:48 <emanuele6>	# a=(); set -- "${@:-foo}"; echo -E set -- "${@@Q}"
Feb 29 05:32:49 <shbot>	emanuele6: set -- 'foo'
Feb 29 05:33:04 <ormaaj>	it's lame :(. Takes the overall result and flattens it, and expands the alternate if the resulting string is empty.
Feb 29 05:33:07 <emanuele6>	it just always expands to foo, it ieems
Feb 29 05:33:12 <emanuele6>	oh, oops
Feb 29 05:33:21 <emanuele6>	# set -- 1 2 3; set -- "${@:-foo}"; echo -E set -- "${@@Q}"
Feb 29 05:33:22 <shbot>	emanuele6: set -- '1' '2' '3'
Feb 29 05:33:26 <emanuele6>	# set --; set -- "${@:-foo}"; echo -E set -- "${@@Q}"
Feb 29 05:33:27 <shbot>	emanuele6: set -- 'foo'
Feb 29 05:33:44 <emanuele6>	so it expands to 'foo' if there are no arguments; that is what it does
Feb 29 05:34:00 <larryv>	# set ''; set -- "${@:-foo}"; echo -E set -- "${@@Q}"
Feb 29 05:34:01 <shbot>	larryv: set -- 'foo'
Feb 29 05:34:06 <ormaaj>	It's really like [[ $@ ]]
Feb 29 05:34:11 <emanuele6>	oh, it is like  ${!@}
Feb 29 05:34:40 <emanuele6>	if the concatenation of the arguments is empty, it expands to 'foo'
Feb 29 05:34:45 <ormaaj>	yep
Feb 29 05:35:00 <cult>	It seems to do that even if there are arguments though, or is that because I'm using it in an alias?
Feb 29 05:35:03 <emanuele6>	# IFS=; set '' a; set -- "${@:-foo}"; echo -E set -- "${@@Q}"
Feb 29 05:35:05 <shbot>	emanuele6: set -- '' 'a'
Feb 29 05:35:09 <emanuele6>	# IFS=; set '' ''; set -- "${@:-foo}"; echo -E set -- "${@@Q}"
Feb 29 05:35:11 <shbot>	emanuele6: set -- '' ''
Feb 29 05:35:19 <cult>	As I said "foo 1 2 3" will output "bar 1 2 3" when I would expect just "1 2 3"
Feb 29 05:35:29 <emanuele6>	and it is @, not *, so it is never empty if there are more than two arguments
Feb 29 05:35:56 <ormaaj>	Not a very useful behavior IMO
Feb 29 05:36:50 <emanuele6>	cult: that is not what "${@:-foo}" does; if you want to expand something else if there are no arguments, you would use something like    "${1-foo}" "${@:2}"
Feb 29 05:36:55 <ormaaj>	(it's so unuseful it could probably be changed since nobody uses it, at least not if they know what it actually does)
Feb 29 05:37:59 <ormaaj>	!ormaajrotate
Feb 29 05:37:59 <greybot>	# f() { echo "${@:2}"; ${!1+f $(($1+1)) "${!#}" "${@:2:$#-2}"}; }; f 3 {a..c}
Feb 29 05:38:01 <shbot>	greybot: a b c
Feb 29 05:38:01 <shbot>	greybot: c a b
Feb 29 05:38:01 <shbot>	greybot: b c a
Feb 29 05:42:15 <emanuele6>	cult: if you are saying you don't understand why your alias prints   bar 1 2 3    it is because the alias just replaces the text in the command
Feb 29 05:42:30 <emanuele6>	i said it earlier
Feb 29 05:43:08 <emanuele6>	foo 1 2 3    will run    echo "${@:-bar}" 1 2 3   because that is what is in the foo alias
Feb 29 05:43:48 <JAA>	Aliases are insanely stupid.
Feb 29 05:43:56 <emanuele6>	evidently your shell does not have any non-empty arguments, so it expands bar
Feb 29 05:44:05 <emanuele6>	JAA: no u >:(
Feb 29 05:44:15 <larryv>	D:
Feb 29 05:44:23 <emanuele6>	# set --; echo "${@:-bar}" 1 2 3
Feb 29 05:44:24 <shbot>	emanuele6: bar 1 2 3
Feb 29 05:44:28 <emanuele6>	# set -- foo bar; echo "${@:-bar}" 1 2 3
Feb 29 05:44:30 <shbot>	emanuele6: foo bar 1 2 3
Feb 29 05:44:36 <JAA>	:-)
Feb 29 05:44:38 <emanuele6>	# set -- zzz yyy; echo "${@:-bar}" 1 2 3
Feb 29 05:44:39 <shbot>	emanuele6: zzz yyy 1 2 3
Feb 29 05:44:55 <emanuele6>	# set -- zzz yyy; f () { echo "${@:-bar}";}; f 1 2 3
Feb 29 05:44:56 <shbot>	emanuele6: 1 2 3
Feb 29 05:45:17 <JAA>	TIL (or rather, realised) what that function trick is about though. Thanks, I hate it.
Feb 29 05:46:12 <emanuele6>	with a function, or an alias that defines a function and calls it, the arguments are 1 2 3, but "${@:-bar}" is still wrong; you want  "${1-bar}" "${@:2}"
Feb 29 05:46:54 <emanuele6>	JAA: if bash embraced eval, and dynamic scoping like tcl, we would have an apply builtin, and we would not need this :D
Feb 29 05:47:08 *	JAA slaps emanuele6 around a bit with a large trout
Feb 29 05:47:34 <emanuele6>	hmm, i thought of a cool use for "${@:-}" earlier
Feb 29 05:47:58 <emanuele6>	it is "$*", but it ignores IFS, and always uses space
Feb 29 05:48:10 <emanuele6>	could be useful in a pinch
Feb 29 05:48:49 <JAA>	Hmm, yeah
Feb 29 05:49:54 <emanuele6>	ormaaj: now, you can't change this behaviour because we would notice muhahaha
Feb 29 05:50:06 <cult>	emanuele6: thank you that makes sense now!
Feb 29 05:50:18 <JAA>	Well, it'd still be multiple values though, not one, unless you remove the quotes.
Feb 29 05:50:27 <JAA>	If you have args, that is.
Feb 29 05:50:56 <emanuele6>	if you don't have arguments, or have an empty argument "${@:-}" expands to '' which is correct
Feb 29 05:51:19 <emanuele6>	and if you have more than one argument, the delimiter is space, so it is still correct because the result is non-empty
Feb 29 05:51:38 <JAA>	# set -- 1 2 3; printf '%q ' "${@:-}"
Feb 29 05:51:40 <shbot>	JAA: 1 2 3
Feb 29 05:51:50 <JAA>	That's three args, not 1\ 2\ 3.
Feb 29 05:51:53 <emanuele6>	what the heck
Feb 29 05:52:02 <emanuele6>	then what does it do?
Feb 29 05:52:12 <emanuele6>	# set -- 1 2 3; printf '%q ' "${@:+baz}"
Feb 29 05:52:14 <shbot>	emanuele6: baz
Feb 29 05:52:14 <JAA>	Same as "$@", no?
Feb 29 05:52:47 <emanuele6>	so it is the same as "$@" if [[ $@ ]] ? wow
Feb 29 05:52:58 <emanuele6>	that does not make any sense
Feb 29 05:53:32 <JAA>	Seems reasonable enough to me.
Feb 29 05:53:53 <JAA>	Just like "${@/foo/bar}" expands to multiple words with the replacement.
Feb 29 05:54:36 <JAA>	It's just a bit whack to combine arrays and a default value.
Feb 29 05:54:43 <JAA>	Or array-ish, whatever.
Feb 29 05:55:21 <emanuele6>	but it checks $@ as a string and returns multiple values; if ' '.join(args): yield from expand(word) else: yield from args   :/
Feb 29 05:56:26 <emanuele6>	it does not check whether $@ is empty, it checks if the $@ is empty or the arguments concatenated by space are a non-empty string
Feb 29 05:56:32 <JAA>	Too bad you can't return another array like "${@:-(a b c)}". :-D
Feb 29 05:56:46 <emanuele6>	well, because it is quoted
Feb 29 05:58:06 <JAA>	# set -- '' ''; printf '%q ' "${@:-}"
Feb 29 05:58:08 <shbot>	JAA: '' ''
Feb 29 05:58:20 <JAA>	# set -- ' '; printf '<%q> ' "${@:-}"
Feb 29 05:58:22 <shbot>	JAA: <\ >
Feb 29 05:58:32 <emanuele6>	hmm, i don't remember if in quoted -WORD context, it is a string expansion or not
Feb 29 05:58:33 <JAA>	Seems to behave as expected to me.
Feb 29 05:59:21 <emanuele6>	# a=('a b' c d); echo -E set -- "${PWD+${a[@]@Q}}"
Feb 29 05:59:22 <shbot>	emanuele6: set -- 'a b' 'c' 'd'
Feb 29 05:59:28 <emanuele6>	JAA: you totally can do that
Feb 29 05:59:42 <JAA>	Hah
Feb 29 05:59:55 <JAA>	Yeah, makes sense.
Feb 29 06:00:06 <emanuele6>	D:
Feb 29 06:00:25 <emanuele6>	too JAA everything makes sense :o
Feb 29 06:00:36 <JAA>	lol
Feb 29 06:00:37 <emanuele6>	ooo
Feb 29 06:00:55 <emanuele6>	with a glob you normally have to choose if you want to quote the expansion or the glob
Feb 29 06:01:45 <emanuele6>	because "${PWD-*}"  will quote the glob, so you can only use the glob if you don't quote the expansion ${PWD-*}  which is not very useful except for +
Feb 29 06:02:13 <emanuele6>	but array expansions are special and they expand to multiple words even when the expansion is quoted, so you can do it
Feb 29 06:02:47 <JAA>	Hmm, right
Feb 29 06:04:16 <JAA>	"${PWD}"${PWD:-*}
Feb 29 06:04:37 <JAA>	Er, no, that makes no sense.
Feb 29 06:04:41 <emanuele6>	that expands PWD twice
Feb 29 06:04:45 <JAA>	Yeah
Feb 29 06:05:01 <emanuele6>	once quoted and the other time not quoted
Feb 29 06:05:15 <JAA>	Wouldn't it be nice if you could do ${PWD@Q-*}?
Feb 29 06:06:44 <emanuele6>	nah, you can just use   ${|[[ $PWD ]] && REPLY=*;}
Feb 29 06:06:59 <JAA>	Naturally
Feb 29 06:07:14 <emanuele6>	anyway that and even ${PWD+*}  are not great anyway because they will not work correctly with IFS=*
Feb 29 06:07:20 <JAA>	I'm not sure yet whether I love or hate those.
Feb 29 06:12:03 <emanuele6>	s/[&][&]/||/
Feb 29 06:14:04 <JAA>	Does this actually work?
Feb 29 06:14:08 <JAA>	Does [[ set REPLY?
Feb 29 06:14:14 <emanuele6>	no?
Feb 29 06:14:30 <emanuele6>	the only things that set REPLY are select and read afaik
Feb 29 06:14:49 <emanuele6>	some loadables too, i think, but i don't remember which ones
Feb 29 06:14:58 <JAA>	Oh, you mean as a replacement of the second part in my silly thing above, right.
Feb 29 06:15:25 <JAA>	So it'd expand to nothing if PWD is set and to the glob expansion if not.
Feb 29 06:15:55 <emanuele6>	yes, but that, like ${PWD+*} is actually expanded as if it were  x=*; ... $x
Feb 29 06:16:02 <emanuele6>	so if IFS contains * it will not work
Feb 29 06:16:29 <emanuele6>	and there is no workaround except setting IFS to ''
Feb 29 06:17:08 <JAA>	Hmm
Feb 29 06:18:27 <ormaaj>	# shopt -s expand_aliases; eval set function f { t } \; set -- '"${@/*/&=& }"' \; alias '"${@:1:3}"' '"u=${*%%=*}"' '"t=echo \"\$@\";"' \; eval u \; f moo
Feb 29 06:18:29 <shbot>	ormaaj: moo
Feb 29 06:20:37 <emanuele6>	with an apply builtin   (possible implementation   apply () { eval 'shift; '"$1";} ), you could write your gitalias as just   "apply 'something "$@"; somethingelse'"
Feb 29 06:20:50 <emanuele6>	also it would make aliases more nicer to use
Feb 29 06:21:01 <emanuele6>	s/more //
Feb 29 06:21:40 <emanuele6>	aliases can be nicer than functions because they can be bypassed easily with just a \
Feb 29 06:21:55 <JAA>	That is true, yeah.
Feb 29 06:23:26 <emanuele6>	hmm, i wonder
Feb 29 06:23:55 <emanuele6>	k# alias foo='echo hi'; eval 'function zzz { foo;}'; zzz; declare -f zzz
Feb 29 06:23:56 <shbot>	emanuele6: hi
Feb 29 06:23:56 <shbot>	emanuele6: ksh: declare: not found [No such file or directory]
Feb 29 06:24:02 <emanuele6>	k# alias foo='echo hi'; eval 'function zzz { foo;}'; zzz; typeset -f zzz
Feb 29 06:24:03 <shbot>	emanuele6: hi
Feb 29 06:24:03 <shbot>	emanuele6: function zzz { foo;}
Feb 29 06:24:06 <emanuele6>	hehe
Feb 29 06:25:00 <emanuele6>	ksh93 showing functiondeclaration+terminator instead of serialised code is a bit lame
Feb 29 06:25:10 <emanuele6>	k# alias foo='echo hi'; eval 'if :; then function zzz { foo;} end'; zzz; typeset -f zzz
Feb 29 06:25:12 <shbot>	emanuele6: ksh: eval: syntax error: `end' unexpected
Feb 29 06:25:12 <shbot>	emanuele6: ksh: zzz: not found [No such file or directory]
Feb 29 06:25:14 <emanuele6>	err
Feb 29 06:25:16 <ormaaj>	yea :(
Feb 29 06:25:22 <emanuele6>	k# alias foo='echo hi'; eval 'if :; then function zzz { foo;} fi'; zzz; typeset -f zzz
Feb 29 06:25:23 <shbot>	emanuele6: hi
Feb 29 06:25:23 <shbot>	emanuele6: function zzz { foo;} fi
Feb 29 06:26:03 <emanuele6>	it does not only mean that you get nonsense like fi or esac or ;; or } if the function is defined in a conditional; but it also means that aliases in typeset -f are not expanded
Feb 29 06:26:27 <ormaaj>	 $ ksh -c 'function f { :; }; typeset -fp f'
Feb 29 06:26:27 <ormaaj>	function f
Feb 29 06:26:27 <ormaaj>	{       :
Feb 29 06:26:27 <ormaaj>	}
Feb 29 06:26:29 <emanuele6>	but bash's declare -f sucks too \:
Feb 29 06:26:35 <emanuele6>	oh, wow
Feb 29 06:26:41 <emanuele6>	k# alias foo='echo hi'; eval 'if :; then function zzz { foo;} fi'; typeset -pf zzz
Feb 29 06:26:42 <shbot>	emanuele6: function zzz { foo;} fi
Feb 29 06:26:45 <emanuele6>	hmm
Feb 29 06:27:00 <emanuele6>	oh, i thought you were running that on shbot
Feb 29 06:31:35 <ormaaj>	!meta ormaajrotate
Feb 29 06:31:35 <greybot>	ormaaj 1366207861(2013-04-17) learn # f() { echo "${@:2}"; ${!1+f $(($1+1)) "${!#}" "${@:2:$#-2}"}; }; f 3 {a..c}
Feb 29 06:31:50 <ormaaj>	I should get rid of the field splitting :(
Feb 29 06:40:04 <emanuele6>	local - IFS=;set -f
Feb 29 06:40:28 <emanuele6>	err IFS=' ' in this case, and quoting 'f'
Feb 29 06:40:50 <emanuele6>	or "$FUNCNAME" instead of f
Feb 29 13:13:50 <Mo>	Hi, what is the best way to pipe a big script via ssh ? Currently I have a big string right after  ssh myserver ... with lots of escapes. Can I use a HERE document for that?
Feb 29 13:14:31 <emanuele6>	moo
Feb 29 13:16:15 <Mo>	for machine in myserver;do ssh $machine "echo \"select \\\* from v\\\$version;\" \\\|sqlplus foo/foo123@foo 2>&1|grep -m2 -e \"^Version\" -e \"^Oracle\"";done
Feb 29 13:16:40 <Mo>	Just as an example. The complete command is far bigger.
Feb 29 13:18:08 <Nintendo>	If you have ssh, you also have scp, right?  (If you don't want to use scp, a little ${s@Q} might help with the escape madness.)
Feb 29 13:19:01 <emanuele6>	hmm, is that command correct? that would not expand $version, i doubt it is supposed to be an environment variable on the repote
Feb 29 13:19:09 <emanuele6>	# echo "echo \"select \\\* from v\\\$version;\"
Feb 29 13:19:15 <shbot>	emanuele6: Missing terminating quote, bracket or keyword
Feb 29 13:19:16 <emanuele6>	# echo "echo \"select \\\* from v\\\$version;\""
Feb 29 13:19:18 <shbot>	emanuele6: echo "select \\* from v\$version;"
Feb 29 13:19:37 <emanuele6>	it does not expand $version; there are an odd number of \ before $
Feb 29 13:19:52 <emanuele6>	s/repote/remote/
Feb 29 13:20:17 <Mo>	I would like to have that as multi-line script without the awful escapes.
Feb 29 13:20:36 <Mo>	HERE doc sounds it could do it?
Feb 29 13:21:08 <emanuele6>	is $version a sql macro or similar?
Feb 29 13:21:25 <selckin>	yea, pipe that to ssh cat << EOF blbla  | ssh foo
Feb 29 13:21:36 <emanuele6>	anyway, you could use a here document; yes    ssh foo << 'EOF'
Feb 29 13:21:46 <emanuele6>	selckin: em, 'EOF' not EOF
Feb 29 13:22:09 <selckin>	blalbla is also wrong
Feb 29 13:22:12 <selckin>	suprise
Feb 29 13:22:28 <emanuele6>	they said they don't want to deal with awful escapes, not introduce awfuler escapes
Feb 29 13:24:29 <emanuele6>	but if you want to expand that $version on the local, and your example was wrong, than you cannot just ssh<<'EOF'
Feb 29 13:25:44 <emanuele6>	you could use two heredocs; one for the bash code, and one for the sql code
Feb 29 13:27:17 <emanuele6>	ssh -- "$machine" bash <<'SH' 3<<SQL    and then in SH you use   </dev/fd/3   instead of echo |
Feb 29 13:29:39 <emanuele6>	or <&3; or use stdin for the sql, and fd3 for the sh so you don't need any redirection  ssh -- "$machine" bash /dev/fd/3 3<<'SH' <<SQL
Feb 29 13:44:49 <fdan>	 sudo -H -u ec2-user nohup forever_running_process > nohup.out 2>&1 &
Feb 29 13:44:49 <fdan>	there is a script which we run by doing the above command
Feb 29 13:44:50 <fdan>	now this creates 2 processes one with sudo and a child process without sudo.
Feb 29 13:44:50 <fdan>	when we want to kill a process? which PID should we use. i know the way the command is started is not nice.
Feb 29 13:53:47 <wwilliam>	!echo
Feb 29 13:53:47 <greybot>	echo outputs a string. echo has many portability problems, and should never be used with option flags. Consider printf instead: printf 'name: %s\n' "$name". https://wiki.bash-hackers.org/commands/builtin/echo | https://cfajohnson.com/shell/cus-faq.html#Q0b | http://www.in-ulm.de/~mascheck/various/echo+printf | https://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html
Feb 29 14:02:24 <fdan>	when we want to kill a process? which PID should we use. i know the way the command is started is not nice.
Feb 29 14:04:25 <colo>	eh? the PID of the process is unique...
Feb 29 14:04:42 <fdan>	[18:14:49] <fdan>  sudo -H -u ec2-user nohup forever_running_process > nohup.out 2>&1 &
Feb 29 14:04:43 <fdan>	[18:14:49] <fdan> there is a script which we run by doing the above command
Feb 29 14:04:43 <fdan>	[18:14:49] <fdan> now this creates 2 processes one with sudo and a child process without sudo.
Feb 29 14:04:44 <fdan>	[18:14:49] <fdan> when we want to kill a process? which PID should we use. i know the way the command is started is not nice.
Feb 29 14:05:28 <colo>	ah. I would kill the child process below sudo.
Feb 29 14:05:49 <fdan>	why not the sudo process?
Feb 29 14:08:01 <fdan>	geirha can you help me here
Feb 29 14:08:18 <Soliton>	you can kill the sudo process as well. you didn't really say what the goal is.
Feb 29 14:08:53 <fdan>	we are trying to run a process as a ec2-user
Feb 29 14:09:28 <fdan>	this creates 2 processes
Feb 29 14:10:23 <Soliton>	you're asking about kill.
Feb 29 14:12:57 <colo>	fdan: so you use sudo as root to switch to another user?
Feb 29 14:13:45 <fdan>	yes
Feb 29 14:14:07 <colo>	you are better off using `setpriv` for that
Feb 29 14:14:14 <colo>	(on Linux, at least)
Feb 29 14:15:32 *	Disconnected ()
**** ENDING LOGGING AT Thu Feb 29 14:15:32 2024

**** BEGIN LOGGING AT Thu Feb 29 14:15:51 2024

Feb 29 14:15:51 *	Now talking on #bash
Feb 29 14:15:51 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 29 14:15:51 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 29 14:16:17 <emanuele6>	D:
Feb 29 14:16:31 <geirha>	something something systemd
Feb 29 14:27:04 <fdan>	if i start a process like this - sudo -H -u ec2-user nohup forever_running_process > nohup.out 2>&1 &
Feb 29 14:27:05 <fdan>	which process should i kill? the parent or the child process
Feb 29 14:32:20 <colo>	I would kill forever_running_process
Feb 29 14:32:22 <Soliton>	presumably you want to kill forever_running_process so the child.
**** BEGIN LOGGING AT Thu Feb 29 14:39:53 2024

Feb 29 14:39:53 *	Now talking on #bash
Feb 29 14:39:53 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 29 14:39:53 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 29 14:42:29 <fdan>	Soliton why not the parent process?
Feb 29 14:42:42 <fdan>	since we start with the Sudo, i think killing the parent would be much better right?
Feb 29 14:45:20 <fdan>	if we kill the parent process, will it not kill the child process too?
Feb 29 14:48:22 <colo>	the parent sudo will also terminate once the child exits. if you kill sudo, it will forwardthe signal to its children, and you have the ~ same effect.
Feb 29 14:54:47 <fdan>	we are observing an issue where the parent(sudo) process gets killed but the child process doesnt get killed or takes more time
Feb 29 14:57:05 <colo>	well, why do you not just kill the child process then? :)
Feb 29 14:57:30 <JanC>	nohup is sudo's child process...
Feb 29 14:58:08 <colo>	I mean the process that all this ill-fated attempt at managing a service is eventually all about
Feb 29 14:58:56 <JanC>	if that was an attempt at managing a service, then why use nohup?  that only makes it harder...
Feb 29 15:00:22 <colo>	I never implied that it was a particularly good attempt ;)
Feb 29 15:02:13 <JanC>	I wasn't telling that you particularly, it's fdan who should probably go read some documentation about what nohup does
Feb 29 15:12:38 <fdan>	Janc we wanted to have the logs
Feb 29 15:13:14 <JanC>	nohup has nothing to do with logs
Feb 29 15:14:48 <fdan>	we are running the process in background
Feb 29 15:14:54 <fdan>	we store the logs in nohup.out
**** BEGIN LOGGING AT Thu Feb 29 15:16:03 2024

Feb 29 15:16:03 *	Now talking on #bash
Feb 29 15:16:03 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Feb 29 15:16:03 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Feb 29 15:17:36 <colo>	have you considered to use systemd-run instead of nohup?
Feb 29 15:19:45 <JanC>	or just configure a service that you can start whenever you want to, especially if you need it more than once
Feb 29 15:26:38 <fdan>	colo not yet, since its a small service, we didnt plan
Feb 29 15:26:59 <fdan>	colo do we get the logs using systemd?
Feb 29 15:45:27 <colo>	fdan: yes, all streams of the child process are preserved in the resulting unit's journal
Feb 29 15:57:05 <volga629>	Hello Everyone, how to incorporate. index  with in for loop https://paste.centos.org/view/e32f5ddc
Feb 29 15:59:35 <volga629>	 opt_array is find out if domain already present in db
Feb 29 16:16:01 <Soliton>	just use the index? not sure what the issue is.
Feb 29 16:17:34 <Soliton>	weird code anyway so hard to tell what the goal is.
Feb 29 16:25:46 <volga629>	Index is domain group ID, logic is simple if domain not found in db, I am adding new entry with group ID ( index ). Issue that can't increment group ID in for loop I tried group_id=$(($idx+1)), but that only ones and not for each domain from the list
Feb 29 16:27:09 <Soliton>	i didn't understand much.
Feb 29 16:27:45 <Soliton>	# declare -A opt; while IFS=, read -r c; do opt+=([${c%%,*}]=${c#*,}); done <<< $'0,a\n1,b\n2,c'; idx=1 end=${#opt[@]}; for ((i=$idx; i<=$end; i++)); do printf "Key %s Value %s\n" "$i" "${opt[$i]}"; done
Feb 29 16:27:46 <shbot>	Soliton: Key 1 Value b
Feb 29 16:27:46 <shbot>	Soliton: Key 2 Value c
Feb 29 16:27:46 <shbot>	Soliton: Key 3 Value
Feb 29 16:28:29 <Soliton>	it's weird to set IFS and then not use it.
Feb 29 16:28:56 <Soliton>	the end check should be < not <=.
Feb 29 16:29:37 <volga629>	ok let me test
Feb 29 16:30:21 <Soliton>	no idea what the relationship between db and the file is or what any of the data looks like anyway.
Feb 29 16:45:28 <volga629>	file contain list domain,ip address which need to insert. DB contain domain,ip,attrs columns. I am pulling last entry as start index, end index is array count.
Feb 29 16:57:10 <Soliton>	so the index is not a number?
Feb 29 16:58:04 <Soliton>	this is still confusing. show an actual issue with actual data.
Feb 29 16:58:30 <volga629>	index is number attr column in db
Feb 29 16:59:06 <Soliton>	but domain is surely not a number?
Feb 29 16:59:17 <volga629>	yes
Feb 29 16:59:20 <volga629>	domain.com
Feb 29 16:59:28 <volga629>	as example
Feb 29 16:59:29 <Soliton>	so i have no idea what you're trying to do.
Feb 29 17:00:33 <Soliton>	declare -A is an assoc array and apparently the keys are domain names. what do you expect to do with some index number?
Feb 29 17:00:40 <djph>	Soliton: it's okay, neither do they!
Feb 29 17:01:47 <Soliton>	if your index corresponds to some line in that file then remove the assoc array and look at that line.
Feb 29 17:02:19 <volga629>	index is attr column in db where in script it should  increment by one  to get next attr number
Feb 29 17:02:49 <Soliton>	i have no idea what an attr number is.
Feb 29 17:03:10 <volga629>	right now last entry is 15 in db
Feb 29 17:03:16 <volga629>	that attr
Feb 29 17:03:41 <volga629>	I am pulling that number as start index
Feb 29 17:03:47 <Soliton>	and what does that have to do with the file?
Feb 29 17:05:51 <volga629>	file contain list domains to insert into db, when script located list of domains which not present in db, PSQL do insert (domain,ip,attr) value  ($domain,$ip,$i);
Feb 29 17:06:43 <volga629>	$i is number index incremented by one from start index
Feb 29 17:07:41 <Soliton>	so you just want to increment the index you got from the DB?
Feb 29 17:07:50 <volga629>	yes
Feb 29 17:07:55 <volga629>	inside the loop
Feb 29 17:08:03 <volga629>	to get next number
Feb 29 17:08:09 <Soliton>	idx=$((idx+1))
Feb 29 17:09:08 <volga629>	Yes, I tried that, it increment only first run through domain array
Feb 29 17:09:16 <volga629>	Let me try again
Feb 29 17:09:37 <Soliton>	so some code you didn't show does something you don't expect.
Feb 29 17:10:46 <ano>	# echo MOVIE - TXT FILES STARTED WITH \"MOVIE\" AREN\'T TXT FILES > f.txt; file -i f.txt
Feb 29 17:10:47 <shbot>	ano: f.txt: video/x-sgi-movie; charset=us-ascii
Feb 29 17:24:40 <volga629>	Soliton thank you for all help, script is working here the whole think https://paste.centos.org/view/77f831c9
Feb 29 17:27:07 <Soliton>	still weird why you set IFS. it does nothing.
Feb 29 17:27:31 <Soliton>	i would remove the array since it seems useless.
Feb 29 17:28:01 <Soliton>	i assume you're aware that you're doing sql injection and know it is safe.
Feb 29 17:31:50 <volga629>	yes
Feb 29 17:32:08 <volga629>	localhost only and by me only
Feb 29 17:33:02 <volga629>	yes I just set so it in this case IFS is not splitting
Feb 29 17:33:17 <volga629>	I will remove it
Feb 29 17:33:32 <volga629>	that because I tried -a array to test
Feb 29 17:34:40 <Soliton>	no real point in an array that you use a single time.
Feb 29 17:34:58 <Soliton>	just wasting time writing to and reading from the array.
Feb 29 17:35:09 <volga629>	correct
Feb 29 17:37:16 <Soliton>	btw, the way to make sure that sql injection is safe is thinking about what the data that you inject can be. it has nothing to do with your user or localhost.
Feb 29 17:55:53 <kurahaupo>	!pipe
Feb 29 17:55:53 <greybot>	(Anonymous) pipes use the | character to connect the standard output of one command to the standard input of another. Each command is executed in a subshell (but see !subshell, !lastpipe, !faq 24).
Feb 29 17:56:15 <kurahaupo>	!notapipe
Feb 29 17:58:51 <kurahaupo>	!learn notapipe "Pipe" is not a catch-all term for feeding a file into a program. On the contrary, it specifically means connecting the output of one program as the input of another program, both of which run concurrently. The word you're probably looking for is "redirect".
Feb 29 17:58:51 <greybot>	OK, kurahaupo
Feb 29 17:59:07 <kurahaupo>	!notapipe
Feb 29 17:59:07 <greybot>	"Pipe" is not a catch-all term for feeding a file into a program. On the contrary, it specifically means connecting the output of one program as the input of another program, both of which run concurrently. The word you're probably looking for is "redirect".
Feb 29 18:01:06 <Inline>	 pipe it but instead of letting the sdinput catch it redirect it
Feb 29 18:01:12 <Inline>	|> file
Feb 29 18:01:35 <Inline>	hmmm
Feb 29 18:27:34 <kurahaupo>	Inline: So what do you think is in "file"  after you go: echo foxfog |>file tr fgox ienl
Feb 29 18:29:15 <kurahaupo>	# echo foxfog |>file tr fgox ienl ; cat file
Feb 29 18:29:17 <shbot>	kurahaupo: inline
Feb 29 19:12:38 <ormaaj>	:o   10:46:05  <-- │ pgas (~pgas@user/pgas) has quit (Ping timeout: 250 seconds)
Feb 29 20:35:20 <Guest1457>	hello, i'm new here
Feb 29 20:35:35 <Guest1457>	is this the right place to ask for help and support for the bash terminal?
Feb 29 20:36:45 <ormaaj>	oh let's just say yes
Feb 29 20:36:48 <Soliton>	!bashis
Feb 29 20:36:48 <greybot>	Bash is a shell. That's a program which can do simple math, logic, I/O and run other programs. It's NOT a terminal, it's not a kernel, it doesn't manage the system's authentication or environment, it's not your OS and it's not X, KDE or Gnome.
Feb 29 20:38:10 <ormaaj>	bash manages my system's authentication and environment tho.
Feb 29 20:39:31 <ormaaj>	mh nevermind.
Feb 29 20:44:42 <Guest1457>	greybot, oh ok, my bad, it's a shell
Feb 29 20:44:48 <Guest1457>	run on a TERMINAL ENUMLATOR
Feb 29 20:45:01 <Guest1457>	your right, i just need to get my terms correct
Feb 29 20:45:25 <Guest1457>	but is this the correct place to ask for help regarding the bash shell?
Feb 29 20:45:33 <Soliton>	yes
Feb 29 20:45:59 <Riviera>	many people here use bash,
Feb 29 20:46:16 <Riviera>	so perhaps, yes,
Feb 29 20:46:24 <Riviera>	somebody might be able to help
Feb 29 20:47:55 <Guest1457>	cool
Feb 29 20:48:06 <Guest1457>	thank you, when i need help with the bash shell i will definately ask here
Feb 29 20:49:05 <Guest1457>	i wanted to learn irc and come here to ask questions regarding the bash shell because i was told that i was less likely to run into "skiddies" on irc then discord, matrix, reddit, stackexchange, xmpp, and bash forums seem to be dead :(
Feb 29 20:52:43 *	ChanServ gives channel operator status to llua
Feb 29 20:52:49 *	llua removes ban on *!~Artfaith@user/voxel
Feb 29 20:52:54 *	llua removes channel operator status from llua
**** BEGIN LOGGING AT Fri Mar  1 01:59:41 2024

Mar 01 01:59:41 *	Now talking on #bash
Mar 01 01:59:41 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 01 01:59:41 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 01 02:37:25 <phogg>	yargs? like this? https://www.npmjs.com/package/yargs
Mar 01 02:40:27 <emanuele6>	zargs
Mar 01 02:41:59 <larryv>	zargs! https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-zargs
Mar 01 03:13:01 <xmoforf>	is there a way to do this in more pure bash: find /path/to/files -type f -name "*.txt" | your_program
Mar 01 03:13:30 <llua>	why
Mar 01 03:14:13 <xmoforf>	seems better if i can avoid usinf find
Mar 01 03:14:20 <tirnanog>	it isn't.
Mar 01 03:14:23 <llua>	find is going to be faster than bash
Mar 01 03:14:44 <emanuele6>	vroom
Mar 01 03:14:48 <tirnanog>	it can be done but it will be cumbersome and slow.
Mar 01 03:16:32 <yitz>	starglob! globstar?
Mar 01 03:16:33 <tirnanog>	the results of pathname expansion undergo collation, and that can really end up hurting for globstar.
Mar 01 03:16:48 <twkm>	plus it might exceed ARG_MAX.
Mar 01 03:20:11 <tirnanog>	for argument's sake: { shopt -s globstar; for f in **/*; do test -f "$f" && printf '%s\n' "$f"; done; } | your_program. it is much worse than find and not equivalent, in fact. dotglob would make it equivalent, except that bash will still sort (very slowly) and find will not.
Mar 01 03:21:19 <tirnanog>	rather, more like: [[ -f $f && $f == *.txt ]]
Mar 01 03:21:22 <tirnanog>	just use find, seriously.
Mar 01 03:22:29 <tirnanog>	what you have there is not even a non-standard usage of find.
Mar 01 03:24:00 <xmoforf>	great thank you
Mar 01 03:24:09 <xmoforf>	i will use find
Mar 01 03:25:25 <tirnanog>	even if you had wanted to sort, bash would still be the worst tool for doing so. I cannot over-emphasise how bad globstar performance is.
Mar 01 03:25:53 <tirnanog>	you might not notice if treading relatively few pathnames but find blows it out of the water at even moderate scale.
Mar 01 03:32:39 <twkm>	plus lack of newline safety.
Mar 01 03:33:23 <tirnanog>	heh. I was just thinking of that while finishing the washing up.
Mar 01 03:50:10 <JAA>	# echo {a..b}{a..b}
Mar 01 03:50:11 <shbot>	JAA: aa ab ba bb
Mar 01 03:50:59 <JAA>	Any neat tricks to revert the order of the iteration, i.e. get 'aa ba ab bb' in this case?
Mar 01 03:53:42 <emanuele6>	yes
Mar 01 03:53:44 <emanuele6>	# eval echo '{a..b}'{a..b}
Mar 01 03:53:45 <shbot>	emanuele6: aa ba ab bb
Mar 01 03:56:27 <JAA>	Heh, what could possibly go wrong? :-)
Mar 01 03:58:04 <JAA>	# echo {b..a}{b..a} | rev
Mar 01 03:58:05 <shbot>	JAA: bb ab ba aa
Mar 01 03:58:06 <JAA>	But meh
Mar 01 03:58:14 <JAA>	Ah yes
Mar 01 03:58:15 <JAA>	:-)
Mar 01 04:34:01 <ormaaj>	Invert your expectation about being able to do x with y surprise disappointment becomes a thing of the past. Can I do x? Lol no. With y? Ha!
Mar 01 04:40:40 *	ormaaj looking for awesome arabica jar.
Mar 01 05:48:42 <emanuele6>	can i do z?
Mar 01 05:56:36 <emanuele6>	with w?
Mar 01 06:07:02 <JAA>	:-)
Mar 01 06:10:02 <sphertext_>	anyone knows if possible to use the macos CMD key in keybindings for terminal programs? for example I'd like to use CMD+` to move to the next gnu screen window. but I don't know how to definite it in the `keybinding` command
Mar 01 06:11:17 <sphertext_>	it's not clear what exactly bash registers when i use CMD as a modifier key
Mar 01 06:13:16 <larryv>	sphertext_: no, you cannot do this.
Mar 01 06:14:04 <sphertext_>	annoying. do ppl on windows keyboard have the same problem with their WIN key?
Mar 01 06:14:22 <larryv>	it's not about the keyboard, it's about the terminal emulator
Mar 01 06:17:37 <sphertext_>	yeah, i know the terminal emulator sends the keys to the programs, and it can also translate them to something else
Mar 01 06:17:40 <twkm>	your terminal might be able to send ^An when cmd+` is pressed.
Mar 01 06:18:05 <sphertext_>	but does CMD have a direct correspondent, like all other keys?
Mar 01 06:18:17 <twkm>	(or whatever your escape is set to)
Mar 01 06:18:20 <larryv>	Apple Terminal does not provide a means to use Command to send sequences
Mar 01 06:18:22 <twkm>	nope.
Mar 01 06:19:49 <sphertext_>	so what's the canonical key set? alpha numerical etc, alt, and an escape (usually ctrl)?
Mar 01 06:19:50 <twkm>	modifiers make sense to graphical programs like the terminal emulator, but not to bash.  bash typically will receive a sequence of characters, e.g., \e` rather than a single compound character.
Mar 01 06:20:41 <sphertext_>	hmmm
Mar 01 06:21:31 <sphertext_>	so i need to configure my emulator to send a sequence of characters when I press cmd+` and then use that sequence in the keybind command
Mar 01 06:22:40 <sphertext_>	but gnu screen allows `keybind C-k ...`, so it does allow describing the modifier
Mar 01 06:22:44 <larryv>	i'm like 90% sure that Apple Terminal does not support doing this, and i'm only hedging because i'm not on the latest macOS. i'm not sure how many times i have to repeat myself
Mar 01 06:23:27 <sphertext_>	i'm not even using apple terminal. i'm using iterm2
Mar 01 06:23:44 <larryv>	that would have been helpful to know from the beginning.
Mar 01 06:24:20 <larryv>	the point stands. whatever iTerm2 lets you do, you can do.
Mar 01 06:24:29 <sphertext_>	 i'm trying to understand how bash programs interface with emulators
Mar 01 06:24:34 <twkm>	bash doesn't change your window, screen does.  send it your escape character (default is ^A) followed by n (or space or ^N) to switch to the next window.
Mar 01 06:26:05 <tirnanog>	alacritty can do this.
Mar 01 06:26:09 <larryv>	sphertext_: this suggests that iTerm2 lets you define key mappings using Command https://iterm2.com/documentation-preferences-profiles-keys.html
Mar 01 06:26:24 <tirnanog>	and yes, Terminal.app almost certainly won't let you do this.
Mar 01 06:26:55 <larryv>	you want one of the "Send [whatever]" actions, depending on what sequence you decide to go with
Mar 01 06:27:04 <sphertext_>	how come in `keybinding C-n` we can specify the ctrl modifier, but not the cmd modifier?
Mar 01 06:27:21 <tirnanog>	because it's not based like alacritty, possibly.
Mar 01 06:27:47 <sphertext_>	that's a screen command
Mar 01 06:28:14 <tirnanog>	oh. derp. anyway, it's too removed to even know what a Cmd key is.
Mar 01 06:28:21 <larryv>	that's not really referring a key combination per se. it's a character
Mar 01 06:28:38 <larryv>	*referring to
Mar 01 06:28:43 <twkm>	^N means a single byte value, \x1e.  which is what pressing control+n also produces.
Mar 01 06:29:20 <sphertext_>	"Screen does not understand the prefix C- to mean control, although this notation is used in this manual for readability. Please use thecaret notation (^A instead of C-a) as arguments"
Mar 01 06:29:27 <twkm>	iterm2 likely doesn't know screen is running so whatever you map will be sent to whatever is running.
Mar 01 06:31:27 <twkm>	duh, not 1e, 0e.
Mar 01 06:32:51 <sphertext_>	why control+n produces a single byte value, but not cmd+`?
Mar 01 06:33:01 <sphertext_>	is it a convention?
Mar 01 06:33:28 <twkm>	cmd didn't exist when control characters came about.
Mar 01 06:34:17 <sphertext_>	control characters = byte values that are not uhmm.. for human-readable text?
Mar 01 06:34:53 <twkm>	they were to control devices, originally and still some these days.
Mar 01 06:35:25 <twkm>	and to control communications, which is almost totally gone these days.
Mar 01 06:35:42 <larryv>	https://en.wikipedia.org/wiki/ASCII#Control_characters
Mar 01 06:39:51 <sphertext_>	so i can configure my terminal emulator to send \x0e when i press cmd+` and then i would be able to bind it as C-n in the screen configuration file?
Mar 01 06:40:36 <sphertext_>	where is the association between C+[something] and the control byte values that screen recognises?
Mar 01 06:40:54 <tirnanog>	or just configure it to send \x01n so it happens directly.
Mar 01 06:41:20 <sphertext_>	why doesn't screen just use the byte value, instead of the intermediary C+[something] notation?
Mar 01 06:41:21 <twkm>	provided your escape is the default ^A (aka \x01).
Mar 01 06:41:44 <twkm>	because you type n's a lot but you don't want to switch windows as a result.
Mar 01 06:42:42 <sphertext_>	i mean why is the command `keybind C-n next` instead of `keybind \x0e next`?
Mar 01 06:43:23 <twkm>	50 years ago a hex notation was much less common.
Mar 01 06:43:37 <larryv>	arguably C-n is easier to understand. also bind accepts an octal representation
Mar 01 06:44:02 <twkm>	and 50 years ago octal was quite common.
Mar 01 06:45:17 <sphertext_>	"ASCII reserves the first 32 code points (numbers 0–31 decimal) and the last one (number 127 decimal) for control characters. "
Mar 01 06:45:34 <sphertext_>	this means not all C+[key] on the keyboard result in a control character?
Mar 01 06:45:45 <twkm>	correct.
Mar 01 06:46:02 <sphertext_>	how do i know which ones send a control byte value?
Mar 01 06:46:10 <sphertext_>	or what the byte is
Mar 01 06:49:12 <sphertext_>	are control sequences and extension of the control characters? they seem to be different things
Mar 01 06:49:17 <twkm>	the keymap defines which send what, but generally the ascii value of the letter pressed & 0x1f is the resulting control value.
Mar 01 06:50:50 <twkm>	symbols too but typically specific ones, e.g., control+[ produces 0x1b but control+{ likely doesn't produce anything.
Mar 01 06:52:01 <sphertext_>	there should be like a terminal command where you can press control+[something] and it displays the byte value registered
Mar 01 06:52:04 <tirnanog>	also, cat -v helps. lnext can also help to obtain the raw value (issue C-v first and see stty -a also).
Mar 01 06:53:01 <sphertext_>	what is lnext?
Mar 01 06:53:19 <hleneto>	on X, xev can tell you something.
Mar 01 06:54:34 <tirnanog>	you can also do this in bash: printf '0x%02x\n' "'^A" # do not enter ^A literally there, press C-a instead
Mar 01 06:55:39 <tirnanog>	lnext is useful if you want to enter something like C-c, which would otherwise be handled specially by the tty (again, see stty -a).
Mar 01 06:56:29 <sphertext_>	but is it a terminal command? i don't have this program
Mar 01 06:56:56 <tirnanog>	what program?
Mar 01 06:56:59 <sphertext_>	lnext
Mar 01 06:57:04 <tirnanog>	please see stty -a
Mar 01 06:57:09 <tirnanog>	(for the third time)
Mar 01 06:57:25 <tirnanog>	"lnext = ^V"
Mar 01 06:57:31 <twkm>	the character to type so that the next character typed is taken literally not as a control.
Mar 01 06:57:34 <tirnanog>	so, try C-v, then C-c, for example.
Mar 01 06:58:26 <sphertext_>	so those cchars in stty -a are hijacked by bash
Mar 01 06:58:39 <tirnanog>	it will bypass the normal handling of C-c (to send SIGINT to the foregrand process group) and you'll get the actual raw value instead.
Mar 01 06:58:44 <sphertext_>	i suppose they can't be used directly for binding in another program, unless you issue lnext first?
Mar 01 06:58:48 <tirnanog>	it has nothing to do with bash.
Mar 01 06:59:10 <tirnanog>	you should avoid anything shown by stty -a, yes.
Mar 01 07:00:21 <sphertext_>	so i can use your printf command to discover the byte value of any control+[something] (if such a byte value is sent). but make sure to issue lnext (^V) beforehand
Mar 01 07:00:57 <tirnanog>	you don't always need lnext, but it's handy when you do.
Mar 01 07:01:22 <sphertext_>	and then i can configure my emulator to send the byte value that I want for any other key press, including ones using the CMD modifier
Mar 01 07:01:33 <tirnanog>	yes.
Mar 01 07:01:33 <sphertext_>	that way i can emulate pressing control
Mar 01 07:02:31 <sphertext_>	so the default byte values sent by control+[something] are some kind of convention, that both my emulator and e.g screen abide by?
Mar 01 07:02:56 <sphertext_>	because I imagine I could also configure my emulator to issue a non-standard byte value when I press control+[something]
Mar 01 07:03:23 <tirnanog>	if it's sufficiently flexible, yes.
Mar 01 07:03:34 <tirnanog>	I think ever Terminal.app can cover that particular case.
Mar 01 07:03:42 <tirnanog>	(it can't handle Cmd though)
Mar 01 07:04:47 <tirnanog>	I can only speak for alacritty, where this works: keybindings = [ { key = "=", mods = "Command", chars = "\u0001n" } ]
Mar 01 07:05:00 <larryv>	could even send more than one byte.
Mar 01 07:05:02 <tirnanog>	having to use the \u notation is a TOML format thing.
Mar 01 07:05:52 <tirnanog>	that's C-a followed by n, then.
Mar 01 07:06:18 <twkm>	which is screen default for next window.
Mar 01 07:11:46 <tirnanog>	by the way, lnext means literal next and I believe it only works with the standard line discipline. brief overview here: https://en.wikipedia.org/wiki/Line_discipline. be sure to check out the first referenced link also.
Mar 01 07:11:58 <tirnanog>	basically, this is tty stuff.
Mar 01 07:13:06 <tirnanog>	(first referenced from that same wikipedia article I mean)
Mar 01 07:20:15 <sphertext_>	looks pretty esoteric
Mar 01 07:25:56 <tirnanog>	if you run cat, you can actually get a better idea of how that discipline works, without the line editing capabilities of your shell getting in the way.
Mar 01 07:26:28 <tirnanog>	for example, issuing ^R (C-r) does, indeed, reprint the input line, as indicated by stty -a.
Mar 01 07:27:51 <tirnanog>	and ^T will, indeed, give you a status readout.
Mar 01 07:30:48 <sphertext_>	i just wish there was a table which showed the conventional association between control+[something] and its byte value (if there is one)
Mar 01 07:31:05 <sphertext_>	without having to press each one of them individually to find out
Mar 01 07:31:30 <osse>	sphertext_: man ascii
Mar 01 07:31:32 <sphertext_>	I'm also trying to figure out how "control sequences" relates to all this
Mar 01 07:31:35 <osse>	Ctrl-X is always X - 64
Mar 01 07:31:56 <larryv>	or: https://en.wikipedia.org/wiki/ASCII#Control_code_chart
Mar 01 07:33:26 <sphertext_>	oh nice
Mar 01 08:38:25 <sphertext_>	"A control character is a character that, in isolation, has some control function, such as carriage return (CR). Escape sequences, by contrast, consist of one or more escape characters which change the interpretation of subsequent characters. "
Mar 01 08:43:14 <sphertext_>	more on control character vs. escape sequence https://en.wikipedia.org/wiki/Escape_character#Control_character
Mar 01 08:49:24 <osse>	this jives witrh my understanding of the concept
Mar 01 08:50:25 <sphertext_>	so by convention, when you press control+J, a terminal emulator will send the _control character_ for line feed (which is a byte value). separately, there is also the _escape sequence_ `\n`, which resolves to the same _control character_ for line feed.
Mar 01 08:50:50 <ormaaj>	I don't know what a control function is
Mar 01 08:51:32 <osse>	could have said "has some function" I suppose
Mar 01 08:51:41 <ormaaj>	carriage return does absolutely nothing in a shell script. It's an ordinary character like any other.
Mar 01 08:52:19 <sphertext_>	ormaaj ?
Mar 01 08:52:24 <sphertext_>	are you replying to someone else or
Mar 01 08:53:22 <ormaaj>	The quoted text. That's really true in most languages. CR normally has no function.
Mar 01 08:55:04 <ormaaj>	the only place it may have some context-specific meaning is in languages whose parsers interpret CRLF as a substitute for LF.
Mar 01 08:55:40 <sphertext_>	oh the quote is just from wikipedia
Mar 01 08:55:45 <ormaaj>	yes
Mar 01 08:57:23 <sphertext_>	don't most languages interpret <CR> as line feed?
Mar 01 08:57:34 <ormaaj>	no
Mar 01 09:00:10 <JAA>	Ancient Mac OS stuff would, I suppose.
Mar 01 09:01:15 <sphertext_>	I don't understand, doesn't pressing <CR> when editing a text file insert the byte value for line feed?
Mar 01 09:01:19 <JAA>	Don't know when they made the switch exactly, but it was a long time ago.
Mar 01 09:01:29 <osse>	going from os9 to x
Mar 01 09:01:56 <JAA>	Ah yeah, so 20-ish years ago. Sounds about right.
Mar 01 09:02:02 <emanuele6>	to type a carriage return, you use ^V^M
Mar 01 09:02:08 <emanuele6>	$ ^M
Mar 01 09:02:10 <emanuele6>	bash: $'\r': command not found
Mar 01 09:02:33 <emanuele6>	i had to press enter after ^V^M to run that
Mar 01 09:02:54 <JAA>	'When editing a text file' implies an editor is involved, which might indeed do such a transformation.
Mar 01 09:03:02 <sphertext_>	when you press Enter, what do you input exactly?
Mar 01 09:03:46 <emanuele6>	or a line editor like readline :D but really it is handled by the terminal, so ^V^M will work even when you just run cat with the terminal as stdin
Mar 01 09:05:15 <emanuele6>	$ HISTFILE=/dev/null strace -qqqqefd=0 -eread bash --norc --noprofile
Mar 01 09:05:15 <sphertext_>	in vim, when you want to create a key mapping that involves pressing the enter key, you write it as <cr>
Mar 01 09:05:17 <emanuele6>	bash-5.2$ read(0, "\r", 1)                        = 1
Mar 01 09:05:43 <sphertext_>	and i've never used a text editor in which pressing the Enter key didn't move to the next line
Mar 01 09:05:47 <pj>	sphertext_: Enter is a control key, corresponding to ^M, but can be independently trapped by most computer languages.  What it actually does varies depending on which program you're using and it's settings.
Mar 01 09:05:55 <emanuele6>	bash-5.2$ read(0, "\26", 1)                       = 1
Mar 01 09:05:57 <emanuele6>	read(0, "\r", 1)                        = 1
Mar 01 09:05:59 <emanuele6>	that is ^V^M
Mar 01 09:06:33 <emanuele6>	that is only happening because bash is running the terminal in raw mode; so it interprets ^V^M itself
Mar 01 09:06:34 <ormaaj>	I don't think characters interpreted by the tty driver can be considered within the scope of the language. The shell parser never sees it
Mar 01 09:06:45 <emanuele6>	and Return/Enter actually sends \r in this mode
Mar 01 09:07:00 <emanuele6>	but if you try with cat in standard cooked mode, you will see that enter/return
Mar 01 09:07:06 <sphertext_>	are there non-graphical ASCII characters which are  not control characters?
Mar 01 09:07:06 <emanuele6>	will send \n
Mar 01 09:07:15 <emanuele6>	$ strace -qqqqefd=0 -eread cat
Mar 01 09:07:17 <emanuele6>	read(0,
Mar 01 09:07:19 <emanuele6>	"\n", 131072)                   = 1
Mar 01 09:07:24 <emanuele6>	and ^V^M or ^V<enter> sends "\r"
Mar 01 09:07:32 <emanuele6>	read(0, ^M"\r", 131072)                   = 1
Mar 01 09:07:50 <emanuele6>	i had to press ^D to flush the terminal, you can also press enter, but then cat reads \r\n
Mar 01 09:08:03 <ormaaj>	sure that makes sense
Mar 01 09:08:59 <emanuele6>	i mean, what does not make sense? in #bash, everything always makes sense B)
Mar 01 09:11:22 <ormaaj>	read corrupting data randomly for non-C encodings when IFS is empty.
Mar 01 09:11:45 <emanuele6>	makes sense
Mar 01 09:11:53 <ormaaj>	nonsense
Mar 01 09:13:56 <ormaaj>	I think other shells special case empty IFS + nul delimiter for UTF-8. Bash really should too because the normal behavior is useless.
Mar 01 09:32:33 <tirnanog>	sphertext_: the space character is not a control character.
Mar 01 09:32:55 <sphertext_>	but I would say it's graphical
Mar 01 09:33:24 <JAA>	'printable'?
Mar 01 09:33:41 <JAA>	That's the usual term, anyway.
Mar 01 09:34:32 <sphertext_>	apart from space, are there other examples of non-graphical ASCII characters which are not control characters?
Mar 01 09:34:38 <JAA>	In which case, no, ASCII is divided into control characters and printable characters.
Mar 01 09:34:50 <sphertext_>	great
Mar 01 09:34:56 <JAA>	0x00 to 0x1F and 0x7F are control characters, 0x20 to 0x7E are printables.
Mar 01 09:35:36 <sphertext_>	are there control characters which are not ASCII?
Mar 01 09:36:09 <sphertext_>	I'm thinking of arrow keys
Mar 01 09:36:10 <tirnanog>	incorrect. 0x20 does not use 'ink'. it is not printable.
Mar 01 09:36:17 <sphertext_>	do arrow keys send a byte code, or a character, or what? is it ASCII?
Mar 01 09:36:49 <tirnanog>	oh, I'm probably mixing it up with graph.
Mar 01 09:37:21 <JAA>	0x20 is special, but yeah, it's considered printable.
Mar 01 09:37:56 <emanuele6>	# if [[ ' ' = [[:print:]] ]] then echo yes; else echo no; fi
Mar 01 09:37:58 <JAA>	Arrows send an escape sequence IIRC?
Mar 01 09:37:59 <shbot>	emanuele6: yes
Mar 01 09:38:02 <emanuele6>	# if [[ ' ' = [[:graph:]] ]] then echo yes; else echo no; fi
Mar 01 09:38:04 <shbot>	emanuele6: no
Mar 01 09:38:18 <tirnanog>	# [[ " " == [[:print:]] ]] | [[ " " == [[:graph:]] ]]; echo "${PIPESTATUS[*]}"
Mar 01 09:38:20 <shbot>	tirnanog: 0 1
Mar 01 09:38:41 <emanuele6>	that is 1 in binary
Mar 01 09:38:49 <ormaaj>	The first 128 unicode code points are the characters that correspond with ascii, so, yes effectively everything has them because everything is unicode.
Mar 01 09:39:35 <emanuele6>	i don't think →↓←↑ are escape codes
Mar 01 09:40:09 <emanuele6>	they are utf-8 sequences, but i don't think those are considered escape sequences
Mar 01 09:41:12 <emanuele6>	the arrow keys should send ←↓→↑ !
Mar 01 09:41:40 <JAA>	Can't wait to use AltGr+i to move to the right!
Mar 01 09:41:51 <emanuele6>	exactly what i was thinking
Mar 01 09:41:55 <ormaaj>	hjkl
Mar 01 09:42:05 <emanuele6>	much easier to press than arrowright or alt+f
Mar 01 09:42:10 <emanuele6>	err ctrl+f
Mar 01 09:42:35 <emanuele6>	ew vim mode
Mar 01 09:42:40 <emanuele6>	vi mode
Mar 01 09:42:59 <ormaaj>	so good
Mar 01 09:43:27 <JAA>	My layout is extremely annoying. It has ←↓→ but no ↑.
Mar 01 09:43:32 <tirnanog>	sphertext_: run cat -v (as mentioned earlier), press the arrow keys and see what happens. or use lnext with anything that can tell you what it is (printf, od, hexdump etc).
Mar 01 09:44:08 <ormaaj>	My login prompt should have username completion
Mar 01 09:44:11 <emanuele6>	JAA: it's altgr+shift+u on my keyboard layout
Mar 01 09:44:22 <JAA>	Ooh
Mar 01 09:44:37 <JAA>	That even makes perfect sense since AltGr+u is ↓.
Mar 01 09:45:05 <emanuele6>	i always think that altgr+u is ↑ because up
Mar 01 09:45:11 <emanuele6>	but it is the opposite :/
Mar 01 09:46:00 <JAA>	The shift key has a big up arrow, so it turns the arrow upwards.
Mar 01 09:46:23 <emanuele6>	also u in vim visual mode converts to lowercase, while U converts to upper case
Mar 01 09:46:28 <emanuele6>	also U is taller than u
Mar 01 09:47:29 <sphertext_>	^[[D. so from wikipedia, ^[ is an ASCII, non-graphical, control character which is used as an escape character. does this mean ^[[D is an _escape sequence_ consisting of 3 ASCII characters (one non-graphical and two graphical)?
Mar 01 09:47:47 <sphertext_>	^[[D is what I got when I pressed left-arrow in cat-v
Mar 01 09:48:12 <osse>	yes
Mar 01 09:48:33 <sphertext_>	i am terrified that i am starting to actually understand this
Mar 01 09:48:55 <tirnanog>	sphertext_: another experiment: 1) od -t x1 2) lnext, arrow key 3) enter, C-d (to signify EOF)
Mar 01 09:49:09 <tirnanog>	that'll mix in the byte for the linefeed but it does the job.
Mar 01 09:49:53 <tirnanog>	actually, shouldn't even need lnext.
Mar 01 09:51:00 <tirnanog>	(because od uses the bog standard line discipline, just like cat)
Mar 01 09:53:39 <tirnanog>	for me that prints "1b  5b  44  0a"
Mar 01 09:53:42 <sphertext_>	oh this is very nice
Mar 01 09:53:49 <sphertext_>	i used it with -t c
Mar 01 09:55:03 <tirnanog>	-t a is also interesting for ascii (both of those can be shortened as -c and -a).
Mar 01 09:55:36 <tirnanog>	you can mix formats too.
Mar 01 09:55:54 <tirnanog>	-t x1 -c
Mar 01 09:56:41 <sphertext_>	and those formats are ways to represent the underlying byte value?
Mar 01 09:56:42 <emanuele6>	iF yOuR od SuPpOrTs -c
Mar 01 09:57:24 <tirnanog>	oh, it's xsi? alright.
Mar 01 10:06:54 <tirnanog>	sphertext_: yes.
Mar 01 10:07:21 <tirnanog>	the -t a ones you can look up directly in the macos ascii man page, iirc.
Mar 01 10:07:54 <tirnanog>	as well as the hex values, obviously.
Mar 01 10:14:47 <sphertext_>	weird. default behaviour in iTerm for alt+[up arrow] is ^[[1;9A while in mac's own Terminal it's ^[[A
Mar 01 10:15:05 <sphertext_>	tho you can definitely configure this in iTerm
Mar 01 10:15:12 <sphertext_>	(i didn't, that's just the default)
Mar 01 10:15:32 <eoc>	in posix can one remove trailing path of url to leave base url? echo ${1%/*}
Mar 01 10:16:50 <emanuele6>	in posix, on posix, under posix, by posix
Mar 01 10:20:27 <sphertext_>	# url="www.website.com/foo/bar/page.html" echo ${url%%/*}
Mar 01 10:20:29 <shbot>	sphertext_: no output
Mar 01 10:20:50 <emanuele6>	!faq foo=bar
Mar 01 10:20:50 <greybot>	https://mywiki.wooledge.org/BashFAQ/104 -- Why doesn't foo=bar echo "$foo" print bar?
Mar 01 10:21:13 <sphertext_>	# url="www.website.com/foo/bar/page.html"; echo ${url%%/*}
Mar 01 10:21:15 <shbot>	sphertext_: www.website.com
Mar 01 10:21:25 <emanuele6>	that is the least urly url i have ever seen
Mar 01 10:22:07 <sphertext_>	sounds racist
Mar 01 10:22:39 <sphertext_>	but yeah dunno how to solve if it has a URI prefix
Mar 01 10:25:42 <eoc>	hah, very creative sphertext, unfortunately the urls start with http://
Mar 01 10:26:09 <sphertext_>	you have to do it in 2 steps then
Mar 01 10:27:22 <emanuele6>	great out of the box, in of the posix thinking
Mar 01 10:27:26 <eoc>	ah okok
Mar 01 10:39:01 <pj>	sh# url=http://www.example.com/foo/bar/baz.html base=${url#*//} domain=${base%%/*} path=${url#*$domain} base=${url%$path}; echo "$base"
Mar 01 10:39:02 <shbot>	pj: http://www.example.com
Mar 01 10:39:14 <pj>	some creative thinking might be able to shorten that.
Mar 01 11:13:32 <meteors>	I am sourcing a file with variables and creating a new file with the variables expanded. I use this: `source "$FILE_A";eval "cat <<EOF > $FILE_FINAL $(<"$FILE_B") EOF"`. Is there a better way to achieve the same?
Mar 01 11:16:51 <geirha>	!template
Mar 01 11:16:51 <greybot>	http://mywiki.wooledge.org/TemplateFiles
Mar 01 11:16:55 <Soliton>	showing crazy code and then asking how to achieve the same but better is not very useful. explain a goal.
Mar 01 11:18:23 <geirha>	If you can rely on envsubst (from gettext package) being available, I'd definitely use that
Mar 01 11:21:42 <meteors>	I 'll try with envsbust, thanks. Sorry for the crazy code, trying to combine a file with variables with another file that I'd like the variables to be expanded. envsubst seems a good fit, ty
Mar 01 11:25:36 <geirha>	yeah, so then it would look something like  (set -a ; source file_a ; envsubst < file_b > final)
Mar 01 11:32:54 <meteors>	Yup, works fine, thanks
Mar 01 11:33:54 <chiselfuse>	in interactive mode, i sometimes want to run a command i have in .xinitrc, i do this by typing:   $(grep ^foo .xinitrc)    to run the command "foo bar baz" found in my .xinitrc.     the problem is that sometimes the command is appended with a comment such as "foo bar baz # comment" and i find that typing  $(grep ^foo .xinitrc)  passes the # and the comment as arguments
Mar 01 11:33:59 <chiselfuse>	how can i prevent this?
Mar 01 11:35:19 <Soliton>	if you want to execute shell code then you use eval.
Mar 01 11:35:20 <wyclif>	You use the awk command to filter out comments
Mar 01 11:35:46 <wyclif>	Like, here's an example:
Mar 01 11:35:47 <chiselfuse>	eval works
Mar 01 11:35:48 <wyclif>	'$(grep ^foo .xinitrc | awk '{sub(/#.*/, "", $0); print $0}')
Mar 01 11:35:57 <chiselfuse>	i had confused "eval" with "command"
Mar 01 11:36:13 <Soliton>	and quote properly.
Mar 01 11:36:27 <Soliton>	eval "$(grep ...)"
Mar 01 11:36:28 <wyclif>	That removes everything from `#` to the end of the line, removing the comments from the output of `grep`
Mar 01 11:36:34 <chiselfuse>	wyclif: this is interactive mode, even if this were a cleaner solution it would be a bit ugly to type out
Mar 01 11:36:57 <wyclif>	Then the modified command is executed using `$()`
Mar 01 11:37:19 <wyclif>	Yes, it's ugly
Mar 01 11:37:37 <wyclif>	you could use sed and do something like:
Mar 01 11:37:40 <wyclif>	`$(grep ^foo .xinitrc | sed 's/#.*//')
Mar 01 11:37:46 <Soliton>	that it works with unquoted $() is by accident.
Mar 01 11:37:56 <Soliton>	that is not how you execute code.
Mar 01 11:38:21 <wyclif>	ignore the opening tick, that was a typo on my part
Mar 01 11:39:20 <Soliton>	handling one specific syntax part is not going to make it much less by accident.
Mar 01 11:40:35 <wyclif>	But yes, you should use `eval`
Mar 01 11:40:43 <selckin>	should just make it a seperate script, and not run things you grep
Mar 01 11:41:11 <wyclif>	if you want to execute the command obtained from the `.xinitrc` file and handle the comments properly
Mar 01 11:41:28 <wyclif>	Like maybe:
Mar 01 11:41:40 <wyclif>	eval "$(grep ^foo .xinitrc | sed 's/#.*//')"
Mar 01 11:42:08 <geirha>	no point in removing the comment anymore since eval will treat it as a comment
Mar 01 11:42:16 <Soliton>	# $(echo 'echo "foo bar" #comment')
Mar 01 11:42:17 <shbot>	Soliton: "foo bar" #comment
Mar 01 11:42:22 <Soliton>	# eval "$(echo 'echo "foo bar" #comment')"
Mar 01 11:42:24 <shbot>	Soliton: foo bar
Mar 01 11:44:43 <geirha>	I guess it's a decent usecase for fzf    eval "$(fzf < ~/.xinitrc)"
Mar 01 11:44:55 <wyclif>	Yes
Mar 01 11:45:21 <wyclif>	Everyone should have fzf installed; it's so useful
Mar 01 11:45:22 <chiselfuse>	geirha: that's a pretty cool idea
Mar 01 11:45:33 <chiselfuse>	i think i'll write a function in my rc file
Mar 01 11:45:59 <chiselfuse>	hmm what should i call it
Mar 01 11:46:08 <emanuele6>	can you write it also in my rc file?
Mar 01 11:46:38 <chiselfuse>	i don't think shell redirection works over network
Mar 01 11:47:14 <chiselfuse>	echo testing > emanuele6:.bashrc
Mar 01 11:47:25 <chiselfuse>	oops overwrote the entire file
Mar 01 11:47:27 <sphertext__>	got so many good ideas for using fzf from this https://www.youtube.com/watch?v=8SqakfCSzQk
Mar 01 11:47:32 <chiselfuse>	unless it didn't work to begin with
Mar 01 11:49:32 <sphertext__>	oops this is newer: https://www.youtube.com/watch?v=41JxYe70Xwo
Mar 01 11:49:51 <emanuele6>	hmm, why am i getting the default prompt and  bash: testing: command not found   when i start bash?
Mar 01 11:49:57 <chiselfuse>	run() { eval "$(fzf < "$1")" }
Mar 01 11:50:04 <chiselfuse>	do you think this is good?
Mar 01 11:50:12 <emanuele6>	you need a ; before }
Mar 01 11:50:30 <chiselfuse>	but it works without it, what benefit is there?
Mar 01 11:50:44 <emanuele6>	if it works without it is not bash
Mar 01 11:50:55 <emanuele6>	# run() { eval "$(fzf < "$1")" }
Mar 01 11:51:01 <shbot>	emanuele6: Missing terminating quote, bracket or keyword
Mar 01 11:51:16 <chiselfuse>	weird, idk how it worked without it for me
Mar 01 11:51:51 <geirha>	maybe you have a newline before the }
Mar 01 11:51:54 <emanuele6>	anyway, you would preferably use  eval -- "$(fzf < "$1")"  or  eval " $(fzf < "$1")"   or it will not work correctly if the lines is longer than two characters and starts with -
Mar 01 11:52:00 <geirha>	run() { eval "$(fzf -q "$2" < "$1")" ; }
Mar 01 11:52:04 <geirha>	run .xinitrc foo
Mar 01 11:54:48 <chiselfuse>	emanuele6: i read the manpage for eval about the "--" and i can't understand what it's saying at all
Mar 01 11:55:04 <chiselfuse>	does eval take any '-' options?
Mar 01 11:55:11 <chiselfuse>	why would it require -- then
Mar 01 11:55:28 <Soliton>	# eval --help
Mar 01 11:55:30 <shbot>	Soliton: eval: eval [arg ...]
Mar 01 11:55:30 <shbot>	Soliton:     Execute arguments as a shell command.
Mar 01 11:55:30 <shbot>	Soliton: etc... ( http://paste.wooledge.org/29065 )
Mar 01 11:56:29 <Soliton>	# eval -a
Mar 01 11:56:30 <shbot>	Soliton: bash: eval: -a: invalid option
Mar 01 11:56:30 <shbot>	Soliton: eval: usage: eval [arg ...]
Mar 01 11:56:56 <emanuele6>	if the argument is longer than two characters, and starts with -
Mar 01 11:57:06 <chiselfuse>	is the manpage eval(1P) relevant here? because i can't find any of this there
Mar 01 11:57:26 <Soliton>	!man
Mar 01 11:57:27 <greybot>	bash builtins and keywords do not have separate man-pages, read bash's manual instead or use the help builtin. Rule of thumb: If ''type foo'' says foo is a builtin or keyword, run ''help foo'' or ''man bash'', otherwise try man and/or info.
Mar 01 11:57:45 <chiselfuse>	what is eval(1P) for then?
Mar 01 11:57:47 <chiselfuse>	it says it's posix
Mar 01 11:58:16 <ano>	!posix
Mar 01 11:58:16 <greybot>	The POSIX standard defines what any modern unix should support. Use just POSIX external commands and options to make portable scripts. See http://shellhaters.org
Mar 01 11:58:17 <chiselfuse>	APPLICATION USAGE Since eval is not required to recognize the "--" end of options delimiter, in cases where the argument(s) to eval might begin with '-' it is recommended that the first argument is prefixed by a string that will not alter the commands to be executed, such as a <space> character:
Mar 01 11:58:51 <emanuele6>	in bash you can use   eval --   however you cannot use  run() { eval "$(fzf < "$1")" }
Mar 01 11:59:10 <emanuele6>	for a portable function you would use    run() { eval " $(fzf < "$1")" ;}
Mar 01 11:59:11 <geirha>	anyway, it's not like you have any commands that start with - so you wouldn't select any with fzf in the first place, but still a good idea to add the safeguard
Mar 01 11:59:29 <Soliton>	emanuele6: why does it need to be longer than two characters when -a already fails?
Mar 01 11:59:44 <emanuele6>	two characters or longer!
Mar 01 12:00:15 <emanuele6>	!cookie > Soliton
Mar 01 12:00:15 <greybot>	Soliton: 🍪
Mar 01 12:16:37 <sphertext__>	so if `control+.` is not mapped to a control character, this means I can't use it as a binding in a terminal program
Mar 01 12:58:10 <Soliton>	there is a good chance your terminal does not produce distinct input for it.
Mar 01 12:59:08 <Soliton>	in principle it can do whatever it wants of course.
Mar 01 13:12:36 <dumbledoor>	When I archive a file using `tar czf file`, tar creates an archive with the file nested deeply in a hierarchy of directories instead of saving it at the top level. How to deal with this?
Mar 01 13:13:39 <dumbledoor>	I backup my "stuffs" directory to google drive and this "stuffs" directory has both files and directories. tar works fine with directories but creates this problem when working with files.
Mar 01 13:14:13 <dumbledoor>	Should I just use tar and gzip for files and directories respectively?
Mar 01 13:16:26 <dumbledoor>	tar and gzip for directories and files*
Mar 01 13:18:03 <dumbledoor>	Note: I am not archiving the stuffs directory itself, because I want to make use of google drive's history feature.
Mar 01 13:18:28 <lopid>	cd to iot
Mar 01 13:18:29 <APic>	Maybe You should hardlink the File to singlefilestuffs/File and then tar czvf singlefilestuffs/File
Mar 01 13:18:30 <lopid>	it
Mar 01 13:19:20 <APic>	tar czvf singlefilearchive.tgz singlefilestuffs/File even
Mar 01 13:19:34 <APic>	Or just zip Your single Files    😉
Mar 01 13:20:02 <APic>	tar always stores Directories by Default, zip not
Mar 01 13:20:44 <APic>	Remember tar came from „Tape Archiver“
Mar 01 13:20:48 <dumbledoor>	oops
Mar 01 13:20:55 <dumbledoor>	you are right lopid
Mar 01 13:21:15 <dumbledoor>	if I cd to the directory of the file, tar archives it at the top level
Mar 01 13:21:55 <dumbledoor>	(that's unpredictable tho, i wonder why it works like that)
Mar 01 13:23:25 <dumbledoor>	(ok it's not unpredictable, i just don't know the right word)
Mar 01 13:23:31 <dumbledoor>	thanks
Mar 01 13:27:11 <sixwheeledbeast>	so you can restore it from the tape in the same place.
Mar 01 13:30:58 <dumbledoor>	sixwheelbeast: Does tar need an extra option to extract at the same place?
Mar 01 13:31:52 <sixwheeledbeast>	You could use -C to target another directory
Mar 01 13:32:12 <sixwheeledbeast>	or maybe cd in a subshell
Mar 01 13:32:37 <dumbledoor>	You mean by default it extracts at the same place? That did not work for me
Mar 01 13:34:17 <dumbledoor>	It created a home directory at the place instead
Mar 01 13:35:21 <Soliton>	tar uses the path you give it. if you give it file then it extracts file. if you give it path/to/file then it extracts path/to/file.
Mar 01 13:35:47 <Soliton>	if you give it an absolute path it might complain.
Mar 01 13:38:56 <dumbledoor>	I see. It does say tar: Removing leading '/' from member names
Mar 01 13:39:59 <pgas>	if you only need compression, then just use gzip or xz or the like.
Mar 01 13:44:56 <dumbledoor>	didn't know about xz. thanks.
Mar 01 13:48:22 <cheater>	https://hackaday.com/2024/02/29/the-white-house-memory-safety-appeal-is-a-security-red-herring/
Mar 01 13:48:29 <emanuele6>	xz is the xz in .tar.xz; and gzip is the gz in .tar.gz; another popular one is bzip2, that is the bx2 in .tar.bz2
Mar 01 13:48:38 <emanuele6>	s/bx/bz/
Mar 01 13:48:55 <cheater>	wasn't there another new one too
Mar 01 13:49:47 <emanuele6>	there are many different compression tools
Mar 01 13:50:10 <emanuele6>	gz, xz, and bz2 are probably the most populars
Mar 01 13:50:32 <geirha>	probably thinking of zstd
Mar 01 13:50:43 <selckin>	lzma lz4
Mar 01 13:51:51 <osse>	all of them sound like party drugs
Mar 01 13:52:18 <emanuele6>	oh, yes, archlinux started using zstd for packages some years ago
Mar 01 13:52:41 <emanuele6>	its extension is .zst
Mar 01 13:52:59 <geirha>	so idiotic
Mar 01 13:53:07 <emanuele6>	either party drugs or party diseases
Mar 01 13:53:12 <colo>	heh
Mar 01 13:54:21 <emanuele6>	archlinux packages are all compiled with -fno-plt >:(
Mar 01 13:54:26 <emanuele6>	i cannot ltrace them
**** BEGIN LOGGING AT Fri Mar  1 14:01:16 2024

Mar 01 14:01:16 *	Now talking on #bash
Mar 01 14:01:16 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 01 14:01:16 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 01 14:20:28 <Earnestly>	> steelman
Mar 01 14:20:37 <Earnestly>	Ada had so much potential
Mar 01 14:29:32 <chiselfuse>	https://0x0.st/HRnb.txt
Mar 01 14:29:37 <chiselfuse>	does this look good?
Mar 01 14:30:03 <chiselfuse>	i added grep to uncomment commented lines
Mar 01 14:30:45 <chiselfuse>	hmm somehow uploading it completely screwed indentation
Mar 01 14:32:30 <chiselfuse>	https://0x0.st/HRnG.txt
Mar 01 14:33:23 <chiselfuse>	!check
Mar 01 14:33:24 <checkbot>	chiselfuse: Looks good to me
Mar 01 14:35:31 <Earnestly>	chiselfuse: If you're using eval you likely don't need to worry about excluding comment characters
Mar 01 14:35:41 <Earnestly>	As eval, being the shell, understands what they are
Mar 01 14:36:21 <Earnestly>	I suppose it's just for fzf's sake
Mar 01 14:40:07 <llua>	lines don't have to start with # to be a comment too
Mar 01 14:41:08 <Earnestly>	A good point, this doesn't account for line continuations
Mar 01 14:45:34 <emanuele6>	chiselfuse: but ex is a standard program D:
Mar 01 14:46:37 <emanuele6>	i don't understand that grep command; it outputs from the first character that is not #
Mar 01 14:47:54 <emanuele6>	so e.g. for "# foobar", " foobar"   for " # baz", " baz"   for "## boo", " boo"  for " ## boo", " ## boo"
Mar 01 14:48:19 <emanuele6>	you have not quoted $#
Mar 01 14:48:51 <emanuele6>	err   for " # baz", " # baz"   is what i meant to write
Mar 01 14:49:34 <emanuele6>	it is basically like  sed 's/^#*//'   but weirdly written with a GNU grep command
Mar 01 14:50:56 <emanuele6>	well, not exactly, if a line only contains  ####  that grep command outputs nothing, while sed 's/^#*//' would output an empty line, but in that context it does not make much difference
Mar 01 14:52:49 <emanuele6>	s/line only/line is empty, or only/
Mar 01 14:57:44 <chiselfuse>	emanuele6: what's the correct preprocessing to do in english do you think? get a line that starts with anything that isn't # or whitespace?
Mar 01 14:58:07 <chiselfuse>	or would there be some edge case there too
Mar 01 14:59:09 <emanuele6>	that grep command is basically  sed 's/^#*//'  but written weirdly
Mar 01 14:59:17 <emanuele6>	you should quote "$#"
Mar 01 14:59:53 <chiselfuse>	huh?
Mar 01 14:59:59 <chiselfuse>	emanuele6: what $# do you mean?
Mar 01 15:00:09 <emanuele6>	the one in your code
Mar 01 15:00:23 <emanuele6>	you have    if [ $# -ne 1 ]; then    that is wrong
Mar 01 15:00:28 <chiselfuse>	oh
Mar 01 15:00:39 <emanuele6>	it should be   [ "$#" -ne 1 ]   or just   [ "$#" != 1 ]
Mar 01 15:00:49 <emanuele6>	but quoted
Mar 01 15:01:26 <chiselfuse>	is there a way to match any whitespace character in grep or sed?
Mar 01 15:01:41 <emanuele6>	and ex is a standard command  https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ex.html  vi in non-visual mode
Mar 01 15:02:49 <emanuele6>	well, yes, there is [[:space:]] to match any whitespace character defined in the current locale, and [[:blank:]] to match any horizontal whitespace defined in the current locale... you could also specify the whitespace characters manually in a [...]
Mar 01 15:03:48 <chiselfuse>	do you think that     grep -o '[^#]|[[:space:]].*$'    is okay?
Mar 01 15:03:57 <chiselfuse>	err
Mar 01 15:04:03 <emanuele6>	how can it be ok?
Mar 01 15:04:09 <chiselfuse>	grep -o '[^#]|[^[[:space:]]].*$'    is okay?
Mar 01 15:04:19 <emanuele6>	wot
Mar 01 15:04:48 <emanuele6>	i think you mean [^#[:space:]].*$
Mar 01 15:05:00 <chiselfuse>	i'm trying to say "longest match starting with a character that isn't # or whitespace
Mar 01 15:05:04 <emanuele6>	but i don't understand by what logic that makes sense
Mar 01 15:05:21 <chiselfuse>	"longest match starting with a character that isn't # or whitespace"
Mar 01 15:05:25 <chiselfuse>	how would you do it then?
Mar 01 15:05:55 <emanuele6>	that sentence has basically exactly the same meaning as remove all the characters at the start that are whitespace or #
Mar 01 15:06:05 <chiselfuse>	yea
Mar 01 15:06:18 <chiselfuse>	what's wrong with it?
Mar 01 15:06:37 <emanuele6>	i said earlier how to convert it?
Mar 01 15:07:05 <emanuele6>	 sed $'s/^[# \t]*//'
Mar 01 15:07:34 <chiselfuse>	weird my chat log doesn't have the first time you said it
Mar 01 15:07:35 <emanuele6>	i cannot see the value is using [[:space:]] as you are doing instead of just space and tab since using any other whitespace character in bash will result in an error
**** BEGIN LOGGING AT Fri Mar  1 16:01:17 2024

Mar 01 16:01:17 *	Now talking on #bash
Mar 01 16:01:17 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 01 16:01:17 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Fri Mar  1 18:08:59 2024

Mar 01 18:08:59 *	Now talking on #bash
Mar 01 18:08:59 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 01 18:08:59 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** ENDING LOGGING AT Fri Mar  1 18:10:30 2024

**** BEGIN LOGGING AT Fri Mar  1 19:04:13 2024

Mar 01 19:04:13 *	Now talking on #bash
Mar 01 19:04:13 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 01 19:04:13 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Sat Mar  2 03:05:27 2024

Mar 02 03:05:26 *	Now talking on #bash
Mar 02 03:05:26 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 02 03:05:26 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 02 03:06:22 <ormaaj>	tirnanog: do you happen to know if profiles run sandboxed? If yes then I can't use findmnt or mountpoint so all I can really do in that case is [[ $EROOT -ef /usr/bin ]]
Mar 02 03:06:57 <ormaaj>	sandboxed or otherwise disallow exec like global-scope ebuild code
Mar 02 03:07:59 <tirnanog>	I don't, sorry. if it helps, the devmanual should explain (I think) whether a given phase is sandboxed. I think anything that isn't an ebuild phase generally isn't but you have to go to to the code to be sure.
Mar 02 03:08:31 <tirnanog>	or just try it.
Mar 02 03:08:34 <ormaaj>	ok ty. making such a simple change takes some research :|
Mar 02 03:08:57 <tirnanog>	yeah, I'm right about the devmanual.
Mar 02 03:09:07 <tirnanog>	here's an example showing that sandboxing is in effect for src_install: https://devmanual.gentoo.org/ebuild-writing/functions/src_install/index.html
Mar 02 03:09:17 <tirnanog>	and that it's also root at that point.
Mar 02 03:23:34 <ormaaj>	I was trying to install mksh-9999 earlier which needs to access a CVS repo which uses ssh, and the PORTAGE user apparently cannot access its own home directory without sandbox error, so that happens to be why I was complaining about openssh earlier.
Mar 02 03:24:28 <tirnanog>	ah.
Mar 02 03:25:07 <tirnanog>	the sandbox is a relic from a time where every phase was executed as root and we didn't have namespaces.
Mar 02 03:25:13 <tirnanog>	it should be put out to pasture, really.
Mar 02 03:25:26 <tirnanog>	it causes bugs in its own right from time to time.
Mar 02 03:26:44 <ormaaj>	it needs to read the known_hosts file. My previous hack of just putting the host in portage's file doesn't work anymore, because they must have changed how the sandbox works. So I need a new hack, which will probably be to abuse the KnownHostsCommand to write a hard-coded value for the host key with printf XD
Mar 02 03:27:03 <tirnanog>	oh dear.
Mar 02 04:31:43 <nicolas17>	I can use ${f#prefix} and ${f%suffix} to remove a prefix or suffix from a variable value, but is there any easy way to remove *both* a prefix and a suffix? or do I need to use a temporary variable to do # and % steps separately?
Mar 02 04:34:29 <larryv>	the latter
Mar 02 04:34:56 <larryv>	depending on what you're doing, you might be able to just reuse the same variable
**** BEGIN LOGGING AT Sat Mar  2 06:15:35 2024

Mar 02 06:15:35 *	Now talking on #bash
Mar 02 06:15:35 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 02 06:15:35 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Sat Mar  2 06:17:09 2024

Mar 02 06:17:09 *	Now talking on #bash
Mar 02 06:17:09 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 02 06:17:09 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 02 09:36:23 <zxd>	hi, what's the history behind the need for a    comma    before  closing }   :       { echo foo  ;}
Mar 02 09:37:00 <zxd>	it looks for '}'  command?
Mar 02 09:45:44 <Artfaith>	zxd, I am sory, a comma or semicolon?
Mar 02 09:48:40 <ormaaj>	# {(echo moo)}
Mar 02 09:48:43 <shbot>	ormaaj: moo
Mar 02 09:54:07 <zxd>	semicolon
Mar 02 09:56:58 <Artfaith>	zxd, what do you mean by "history"? Why is it required in the syntax?
Mar 02 09:59:43 <emanuele6>	# if { [[ 1 ]] } then {(echo hi)} fi
Mar 02 09:59:44 <shbot>	emanuele6: hi
Mar 02 10:00:29 <emanuele6>	you "need" a semicolon for because otherwise } is just the string "}"
Mar 02 10:00:32 <emanuele6>	# echo }
Mar 02 10:00:33 <shbot>	emanuele6: }
Mar 02 10:01:04 <emanuele6>	it is the same reason why you "need" a semicolon before fi
Mar 02 10:01:05 <Artfaith>	And just in case, ( :; ) means a subshell.
Mar 02 10:01:13 <emanuele6>	# if true; then echo hi fi
Mar 02 10:01:19 <shbot>	emanuele6: Missing terminating quote, bracket or keyword
Mar 02 10:01:21 <emanuele6>	# echo hi fi
Mar 02 10:01:22 <shbot>	emanuele6: hi fi
Mar 02 10:01:27 <emanuele6>	# if true; then echo hi; fi
Mar 02 10:01:29 <shbot>	emanuele6: hi
Mar 02 10:01:51 <ormaaj>	# [[(({})||({}))]] && echo moo moo moo
Mar 02 10:01:52 <shbot>	ormaaj: moo moo moo
Mar 02 10:01:59 <Artfaith>	# a=1; ( a=2 ); declare -p a;
Mar 02 10:02:00 <shbot>	Artfaith: declare -- a="1"
Mar 02 10:03:09 <emanuele6>	# for case in case do case in esac done
Mar 02 10:03:16 <shbot>	emanuele6: Missing terminating quote, bracket or keyword
Mar 02 10:03:16 <emanuele6>	err
Mar 02 10:03:21 <emanuele6>	# for case do case in esac done
Mar 02 10:03:22 <shbot>	emanuele6: bash: syntax error near unexpected token `esac'
Mar 02 10:03:30 <emanuele6>	# for case do case moo in esac done
Mar 02 10:03:31 <shbot>	emanuele6: no output
Mar 02 10:03:33 <emanuele6>	:D
Mar 02 10:06:04 <emanuele6>	# for do do if case moo in esac then for voo do case poo in esac done else case do in esac fi done
Mar 02 10:06:05 <shbot>	emanuele6: no output
Mar 02 10:06:54 <ormaaj>	# for for do select select do case case in esac done done; echo :\)
Mar 02 10:06:56 <shbot>	ormaaj: :)
Mar 02 10:10:08 <ormaaj>	I have an actual headache now. Stupid bash.
Mar 02 10:12:35 <emanuele6>	# until case headache in esac do for for do if case moo in esac then case ormaaj in esac fi done done
Mar 02 10:12:36 <shbot>	emanuele6: no output
Mar 02 10:21:37 <ormaaj>	!smiley
Mar 02 10:21:37 <greybot>	m# case { { ( { ) ( <<< :-\) cat ) }
Mar 02 10:21:38 <shbot>	greybot: :-)
Mar 02 10:22:38 <emanuele6>	# time TIMEFORMAT=:-\)
Mar 02 10:22:39 <shbot>	emanuele6: :-)
Mar 02 10:23:21 <emanuele6>	$ strace -qqqqefd=2 -ewrite bash -c 'time TIMEFORMAT=:-\)'
Mar 02 10:23:23 <emanuele6>	write(2, ":-)\n", 4:-)
Mar 02 10:23:25 <emanuele6>	)                    = 4
Mar 02 10:23:31 <emanuele6>	that is how you write to stderr without redirections in bash
Mar 02 10:30:06 <ormaaj>	# bash+ -c $'${| local -; eval "set -nv\nmoo" ; }' >/dev/null
Mar 02 10:30:08 <shbot>	ormaaj: moo
Mar 02 10:31:03 <emanuele6>	# bash+ -c $'${| local -; eval "set -nv\:-)" ; }' >/dev/null
Mar 02 10:31:05 <shbot>	emanuele6: bash+: eval: line 1: syntax error near unexpected token `)'
Mar 02 10:31:05 <shbot>	emanuele6: bash+: eval: line 1: `set -nv\:-)'
Mar 02 10:31:08 <emanuele6>	# bash+ -c $'${| local -; eval "set -nv\n:-)" ; }' >/dev/null
Mar 02 10:31:09 <shbot>	emanuele6: :-)
Mar 02 10:31:09 <shbot>	emanuele6: bash+: eval: line 3: syntax error near unexpected token `)'
Mar 02 10:31:09 <shbot>	emanuele6: bash+: eval: line 3: `:-)'
Mar 02 10:31:52 <emanuele6>	# read -t0 -p$':-)\n'
Mar 02 10:31:53 <shbot>	emanuele6: no output
Mar 02 10:32:02 <emanuele6>	:/
Mar 02 10:32:07 <ormaaj>	ha
Mar 02 10:32:09 <emanuele6>	# read -rN0 -p$':-)\n'
Mar 02 10:32:11 <shbot>	emanuele6: no output
Mar 02 10:32:15 <emanuele6>	D:
Mar 02 10:39:07 <emanuele6>	time TIMEFORMAT=${str//%/%%}   is the best way to do that
Mar 02 10:41:49 <emanuele6>	# log () { time local TIMEFORMAT=${@//%/%%};}; log hello; log 99% done
Mar 02 10:41:50 <shbot>	emanuele6: hello
Mar 02 10:41:50 <shbot>	emanuele6: 99% done
Mar 02 10:49:01 <mosasaur>	get on with it then
Mar 02 10:49:50 <emanuele6>	00% done
Mar 02 10:51:05 <mosasaur>	# date
Mar 02 10:51:06 <shbot>	mosasaur: Sat Mar  2 09:51:05 UTC 2024
Mar 02 11:06:44 <ormaaj>	hm I forgot - are these the same? `[[ ( -L $x && -d $x ) && $x == foo || -z $moo ]]` and `[[ ( ( -L $x && -d $x ) && $x == foo ) || -z $moo ]]`
Mar 02 11:07:18 <ormaaj>	They look same... unless I missed a case. The operator precedence isn't actually documented.
Mar 02 11:08:59 <ormaaj>	Mainly concerned with whether -z moo is evaluated only if the overall previous expression is false
Mar 02 11:15:41 <geirha>	if they aren't the same, I've probably written a lot of bugs
Mar 02 11:16:03 <geirha>	removing all the parenthesis should also yield the same logic
Mar 02 11:22:53 <geirha>	# for a in '' T ; do for b in '' T ; do for c in '' T ; do for d in '' T ; do printf '[[ ( %s && %s ) && %s || %s ]]: ' "${a:-F}" "${b:-F}" "${c:-F}" "${d:-F}" ; if [[ ( $a && $b ) && $c || $d ]] ; then printf 'T\n' ; else printf 'F\n' ; fi ; done done done done
Mar 02 11:22:55 <shbot>	geirha: [[ ( F && F ) && F || F ]]: F
Mar 02 11:22:55 <shbot>	geirha: [[ ( F && F ) && F || T ]]: T
Mar 02 11:22:55 <shbot>	geirha: etc... ( http://paste.wooledge.org/29172 )
Mar 02 11:26:17 <geirha>	# for a in '' T ; do for b in '' T ; do for c in '' T ; do for d in '' T ; do printf '[[ ( %s && %s ) && %s || %s ]]: ' "${a:-F}" "${b:-F}" "${c:-F}" "${d:-F}" ; if [[ ( $a && $b ) && $c || $d$(printf E>&2) ]] ; then printf 'T\n' ; else printf 'F\n' ; fi ; done done done done
Mar 02 11:26:19 <shbot>	geirha: [[ ( F && F ) && F || F ]]: EF
Mar 02 11:26:20 <shbot>	geirha: [[ ( F && F ) && F || T ]]: ET
Mar 02 11:26:20 <shbot>	geirha: etc... ( http://paste.wooledge.org/29174 )
Mar 02 11:35:41 <ormaaj>	yay good same!
Mar 02 11:35:44 <ormaaj>	:)
Mar 02 12:19:44 <zxd>	if { [[ 1 ]] } then {(echo hi)} fi
Mar 02 12:19:45 <zxd>	-bash: syntax error near unexpected token `}'
Mar 02 12:26:40 <zxd>	# if { [[ 1 ]] } then {(echo hi)} fi
Mar 02 12:26:41 <shbot>	zxd: hi
Mar 02 12:26:50 <zxd>	why does it work with the bot
Mar 02 12:30:34 <emanuele6>	because the bot has bash 5.2
Mar 02 12:30:44 <emanuele6>	while you evidently do not
Mar 02 12:31:28 <emanuele6>	the only difference is that since bash 5.2 { [[ 1 ]] } is allowed, while in earlier versions you had to use  { [[ 1 ]] ;}
Mar 02 12:31:40 <emanuele6>	51# { if { [[ 1 ]] } then {(echo hi)} fi }
Mar 02 12:31:41 <shbot>	emanuele6: bash: syntax error near unexpected token `}'
Mar 02 12:31:46 <emanuele6>	51# { if { [[ 1 ]];} then {(echo hi)} fi }
Mar 02 12:31:47 <shbot>	emanuele6: hi
Mar 02 12:33:44 <zxd>	and also don't need  ;   after { [[ 1 ]] }   if { [[ 1 ]] };
Mar 02 12:37:24 <zxd>	what's the difference between using      [[ (foo || foo) && ( foo )  ]] ||  [[ foo ]]     and      [[ (( foo || foo ) && foo ) || foo ]]
Mar 02 12:39:25 <zxd>	what does   [[ {} ]] && echo a   mean ? why does it work when there is no space between the {  }     and also  [[ {asdasdasdasda} ]] && echo a
Mar 02 12:53:47 <sixwheeledbeast>	the test [[ will be true as string length is gt 0 and then echo a
Mar 02 12:54:13 <sixwheeledbeast>	command grouping doesn't do much
Mar 02 13:00:37 <zxd>	i remember there was a trick with printf    to leave the last space off when printing an array :  printf "%s " "${array[@]}"
Mar 02 13:00:43 <zxd>	how to get rid of the last space
Mar 02 13:06:20 <geirha>	printf %s "${array[*]}"
Mar 02 13:08:15 <geirha>	and make sure IFS starts with a space, of course
Mar 02 13:12:17 <Earnestly>	zxd: IFS is useful for this, but typically in languages that lack it, the process is usually to put the separator first as a variable which is unset of the first iteration. I.e. for elem in collection {printf "%s%s", sep, elem; sep = ' '}
Mar 02 13:12:38 <Earnestly>	Or sep = '' whatever the language needs
Mar 02 13:12:44 <Earnestly>	(Initially that is)
Mar 02 14:41:08 <Lynx->	Is it OK to have the output from multiple binaries piped to a single FIFO simultaneously, or will mangling occur?
Mar 02 14:49:03 <zxd>	51# for for do select select do case case in esac done done; echo :\)
Mar 02 14:49:05 <shbot>	zxd: bash: syntax error near unexpected token `done'
Mar 02 14:49:05 <Earnestly>	It is okay, but the order will be based on the order things write to it. I'm not sure if you can call that mangling since it's not going to just randomly disorder things
Mar 02 14:50:02 <zxd>	this  'for for'  loop is a 5.2 feature ?
Mar 02 14:50:36 <Earnestly>	for for in do; do echo "$for"; done
Mar 02 14:50:40 <Earnestly>	# for for in do; do echo "$for"; done
Mar 02 14:50:42 <shbot>	Earnestly: do
Mar 02 14:50:52 <Earnestly>	Somewhat self explanatory
Mar 02 14:51:12 <zxd>	ah
Mar 02 14:51:31 <Earnestly>	# set -- foo; for for do echo "$for"; done
Mar 02 14:51:32 <shbot>	Earnestly: foo
Mar 02 14:52:04 <Earnestly>	for xyz in "$@"; do <=> for xyz do
Mar 02 14:52:44 <Earnestly>	# help -s for
Mar 02 14:52:45 <shbot>	Earnestly: for: for NAME [in WORDS ... ] ; do COMMANDS; done
Mar 02 14:56:13 <emanuele6>	51# for for do select select do case case in esac done done; echo :\)
Mar 02 14:56:14 <shbot>	emanuele6: bash: syntax error near unexpected token `done'
Mar 02 14:56:17 <emanuele6>	51# for for do select select do case case in esac; done done; echo :\)
Mar 02 14:56:19 <shbot>	emanuele6: :)
Mar 02 14:56:33 <emanuele6>	i think that was a bug
Mar 02 14:57:36 <emanuele6>	need a semicolon before done at the end of a select command body
Mar 02 14:58:36 <zxd>	m# case { { ( { ) ( <<< :-\) cat ) }
Mar 02 14:58:37 <shbot>	zxd: :-)
Mar 02 14:58:47 <zxd>	what is it saying to the bot here what is 'm' ?
Mar 02 14:59:50 <emanuele6>	yes, it looks like the select body was using the wrong type before bash 5.2
Mar 02 14:59:58 <emanuele6>	zxd: it runs mksh instead of bash 5.2
Mar 02 15:00:01 <emanuele6>	# triggers
Mar 02 15:00:02 <shbot>	emanuele6: Available triggers: +# bash-devel; 1# bash-1.14; 2# bash-2.05b; 32# bash-3.2; 3# bash-3.2; 42# bash-4.2; 43# bash-4.3; 44# bash-4.4; 4# bash-4.4; 50# bash-5.0; 51# bash-5.1; 52# bash-5.2; 5# bash-5.2; # bash-5.2; d# dash-0.5.9; sh# dash-0.5.9; k# ksh 93u+ 2012-08-01; m# mksh R59 2021/01/24; b# bourne; j# bourne(w/job);
Mar 02 15:00:04 <Earnestly>	# triggers
Mar 02 15:00:05 <shbot>	Earnestly: Available triggers: +# bash-devel; 1# bash-1.14; 2# bash-2.05b; 32# bash-3.2; 3# bash-3.2; 42# bash-4.2; 43# bash-4.3; 44# bash-4.4; 4# bash-4.4; 50# bash-5.0; 51# bash-5.1; 52# bash-5.2; 5# bash-5.2; # bash-5.2; d# dash-0.5.9; sh# dash-0.5.9; k# ksh 93u+ 2012-08-01; m# mksh R59 2021/01/24; b# bourne; j# bourne(w/job);
Mar 02 15:00:17 <emanuele6>	# triggers
Mar 02 15:00:18 <shbot>	emanuele6: Available triggers: +# bash-devel; 1# bash-1.14; 2# bash-2.05b; 32# bash-3.2; 3# bash-3.2; 42# bash-4.2; 43# bash-4.3; 44# bash-4.4; 4# bash-4.4; 50# bash-5.0; 51# bash-5.1; 52# bash-5.2; 5# bash-5.2; # bash-5.2; d# dash-0.5.9; sh# dash-0.5.9; k# ksh 93u+ 2012-08-01; m# mksh R59 2021/01/24; b# bourne; j# bourne(w/job);
Mar 02 15:00:26 <emanuele6>	there is no two without three :)
Mar 02 15:00:58 <ormaaj>	bot is mostly here for my entertainment
Mar 02 15:01:38 <emanuele6>	checkbot: thank you for the entertainment
Mar 02 15:01:38 <checkbot>	emanuele6: You're welcome! \(=^.^= )/
Mar 02 15:02:58 <zxd>	checkbot-ai
Mar 02 15:03:28 <militantorc>	Is there a historical reason for the default of not including command invocations starting with spaces in the bash history?
Mar 02 15:04:27 <ormaaj>	nope. just a feature.
Mar 02 15:04:28 <emanuele6>	default?
Mar 02 15:04:33 <emanuele6>	that does not happen for me
Mar 02 15:04:36 <ormaaj>	not default
Mar 02 15:04:39 <Lynx->	OK thanks Earnestly
Mar 02 15:06:45 <emanuele6>	it seems you need to set   HISTCONTROL=ignorespace   or at least HISTCONTROL should contain ignorespace as one of its colon separated elements
Mar 02 15:07:00 <emanuele6>	bash does not set it by default; i have it unset
Mar 02 15:07:30 <emanuele6>	if you didn't set it yourself, it probably comes from the system's bash profile
Mar 02 15:08:02 <emanuele6>	or system bashrc
Mar 02 15:08:04 <ormaaj>	It's supposedly there if you need to do something like type a raw password into a command
Mar 02 15:08:26 <ormaaj>	99% of the time if I type a password into the wrong place it's because the thing reading it was too slow
Mar 02 15:08:35 <emanuele6>	i usually just copy it and use   "$(xclip -sel c -o)"
Mar 02 15:09:08 <militantorc>	emanuele6, seems default in my os
Mar 02 15:09:16 <emanuele6>	which is?
Mar 02 15:09:20 <militantorc>	ubuntu
Mar 02 15:10:12 <militantorc>	energizer, do other distros don't enable it by default
Mar 02 15:10:47 <ormaaj>	I've never seen one
Mar 02 15:12:00 <militantorc>	i need to edit my histcontrol then
Mar 02 15:12:57 <ormaaj>	you also don't really need commands that start with spaces
Mar 02 15:13:05 <militantorc>	ormaaj, sometimes due to copy paste
Mar 02 15:13:15 <militantorc>	i make edits to the command
Mar 02 15:13:27 <emanuele6>	i looked at the debian package for bash, and the default /etc/bash.bashrc /etc/profile don't set HISTCONTROL
Mar 02 15:13:35 <militantorc>	and then when i key up its not there
Mar 02 15:13:38 <militantorc>	a bit irritating
Mar 02 15:13:53 <militantorc>	emanuele6, then its ubuntu default
Mar 02 15:13:55 <emanuele6>	oh, the skel for ~/.bashrc sets it
Mar 02 15:14:00 <emanuele6>	https://sources.debian.org/src/bash/5.2.21-2/debian/skel.bashrc/
Mar 02 15:14:11 <militantorc>	either way, i changed the flag
Mar 02 15:14:16 <emanuele6>	in your default ~/.bashrc you should have   HISTCONTROL=ignoreboth
Mar 02 15:14:20 <ormaaj>	I think it's literally only the first space of the command. Leading spaces for multi-line commands don't affect it, or I doubt they do anyway
Mar 02 15:14:21 <militantorc>	yeah
Mar 02 15:14:23 <militantorc>	thast wht i had
Mar 02 15:14:23 <emanuele6>	in debian and ubuntu systems
Mar 02 15:14:27 <militantorc>	i changed to ignoredups
Mar 02 15:14:43 <emanuele6>	but that is not default, it is just the default user configuration installed on debian ubuntu and family
Mar 02 15:16:41 <emanuele6>	i guess it is default because the maintainers of the debian package for bash like ignorespace ¯\_(ツ)_/¯
Mar 02 15:16:56 <militantorc>	no big deal
Mar 02 15:18:32 <ormaaj>	is login really slow for anybody else or just me? :(
Mar 02 15:18:45 <ormaaj>	I have no clue why it takes like several seconds to show a prompt
Mar 02 15:19:12 <militantorc>	ormaaj, what hardwares
Mar 02 15:19:14 <militantorc>	and os
Mar 02 15:19:24 <geirha>	the worse configuration the debian package does is enabling the "source bashrc non-interactive if ssh" fuckery
Mar 02 15:19:53 <Earnestly>	arch does that as well, I imagine lots of distros copy debian
Mar 02 15:20:18 <ormaaj>	gentoo does it too. I'll probably file a bug. Just discovered it a few days ago
Mar 02 15:20:46 <ormaaj>	the bash package doesn't get much attention for some reason
Mar 02 15:22:43 <militantorc>	what shell does people use these days?
Mar 02 15:23:09 <u0_a372>	bash ig
Mar 02 15:23:44 <emanuele6>	i use bash
Mar 02 15:25:24 <ormaaj>	bash is a bad habit
Mar 02 15:26:06 <emanuele6>	bash is the best
Mar 02 15:26:17 <emanuele6>	the bast
Mar 02 15:29:27 <ormaaj>	login hangs for several seconds on a poll syscall
Mar 02 15:29:54 <ormaaj>	twice... wtf is it reading
Mar 02 15:33:00 <ormaaj>	It's network crap. Probably some stupid PAM configuration.
Mar 02 15:34:12 <ormaaj>	definitely not a feature that I use
Mar 02 15:42:03 <ormaaj>	the problem is a function in /usr/lib64/libkrb5.so.3.3
Mar 02 15:42:27 <ormaaj>	yes definitely not thing I use
Mar 02 15:43:35 <emanuele6>	it makes your os kerber
Mar 02 15:46:45 <ormaaj>	pambase has a kerberos switch. I shall flip it
Mar 02 15:48:11 <ormaaj>	it will probably complain about missing dependency next time I try to install samba though
Mar 02 15:55:30 <ormaaj>	Nope. None of this stuff needs that. Nice.
Mar 02 15:56:45 <emanuele6>	my os is kerb enough
Mar 02 16:00:30 <ormaaj>	kerblesser
Mar 02 16:05:01 <emanuele6>	krb5 is a dependency for mutt on archlinux
Mar 02 16:05:27 <ormaaj>	weird
Mar 02 16:05:31 <emanuele6>	also openssh, curl, and a bunch of other libraries
Mar 02 16:06:18 <ormaaj>	yeah but pambase is just a pile of configuration files for pam. It doesn't actually provide anything.
Mar 02 16:07:03 <emanuele6>	pambase is required by pam
Mar 02 16:07:03 <ormaaj>	you can have stuff installed linking against those libraries without a particular configuration
Mar 02 16:07:20 <emanuele6>	and pam is required by everything basically
Mar 02 16:07:34 <ormaaj>	yes, but you don't have USE flags :P
Mar 02 16:08:04 <emanuele6>	i cannot even tell archlinux; please build my programs without -fno-plt :(
Mar 02 16:08:30 <ormaaj>	tell them f-no!
Mar 02 16:09:28 <qkzoo1978>	elif [ ans -eq 2 ]; exit 0   <-- what is wrong with that statement?
Mar 02 16:09:45 <ormaaj>	ans not a number
Mar 02 16:10:10 <ormaaj>	of course it doesn't -eq 2
Mar 02 16:10:46 <emanuele6>	also probably missing then
Mar 02 16:11:07 <emanuele6>	otherwise [] is just useless
Mar 02 16:13:29 <qkzoo1978>	Ugh, ya, whoops. forgot the $ before the variable and the then
Mar 02 16:14:02 <ormaaj>	and quotes!
Mar 02 16:15:43 <ormaaj>	[[ $ans == 2 ]] is better.
Mar 02 16:20:07 <qkzoo1978>	Good. Good. Thank you @emanuele6 and ormaaj
Mar 02 16:21:11 <ormaaj>	emanuele0-5 never answer
Mar 02 16:26:36 <qkzoo1978>	Now, I have an : exit 1 which is supposed to completely exit the script, but it just exits the if/then/fi and continues on?
Mar 02 16:26:54 <ormaaj>	nope
Mar 02 16:27:15 <ormaaj>	exit exits immediately unless you've nerf'd it with a subshell
Mar 02 16:27:38 <emanuele6>	never nerve an exit
Mar 02 16:28:00 <qkzoo1978>	elif [ $ans == 2 ]; then exit 1; # Anything other than a zero will exit the script.
Mar 02 16:28:34 <emanuele6>	zero?
Mar 02 16:29:00 <emanuele6>	oh, you mean other than  exit 0
Mar 02 16:29:00 <ormaaj>	I guess they mean that status of test.
Mar 02 16:29:12 <emanuele6>	yeah, so you are running exit in a subshell
Mar 02 16:29:16 <emanuele6>	and you have set -e
Mar 02 16:29:29 <ormaaj>	ah set -e
Mar 02 16:29:47 <qkzoo1978>	when did I start a subshell?
Mar 02 16:30:01 <ormaaj>	how would we know?
Mar 02 16:30:10 <emanuele6>	it could be   var=$(myfunctionthatcallsexit)    or   foo | hereicallexit
Mar 02 16:30:16 <ormaaj>	show code or gtfo
Mar 02 16:30:43 <emanuele6>	gtformaaj 🧀
Mar 02 16:30:45 <qkzoo1978>	I guess I was asking what initiate a subshell,
Mar 02 16:30:54 <emanuele6>	!subshell
Mar 02 16:30:54 <greybot>	http://mywiki.wooledge.org/SubShell
Mar 02 16:30:55 <ormaaj>	:)
Mar 02 16:30:56 <qkzoo1978>	what would
Mar 02 16:31:01 <qkzoo1978>	thx
Mar 02 16:33:06 <qkzoo1978>	!subshell
Mar 02 16:33:06 <greybot>	http://mywiki.wooledge.org/SubShell
Mar 02 16:33:13 <emanuele6>	!subshell
Mar 02 16:33:13 <greybot>	http://mywiki.wooledge.org/SubShell
Mar 02 16:33:17 <emanuele6>	never two without three
Mar 02 16:33:26 <ormaaj>	!thanks
Mar 02 16:33:26 <greybot>	Don't thank me, I'm a bot. Did you mean to thank greycat?
Mar 02 16:34:32 <emanuele6>	!pastebanquine
Mar 02 16:34:33 <greybot>	Paste is available without ads on https://pastebin.com/r​aw/r
Mar 02 16:34:33 <pasteban>	Paste is available without ads on https://pastebin.com/raw/r
Mar 02 16:34:57 <userdocss>	!thanks
Mar 02 16:34:57 <greybot>	Don't thank me, I'm a bot. Did you mean to thank greycat?
Mar 02 16:35:02 <emanuele6>	!thanks
Mar 02 16:35:02 <greybot>	Don't thank me, I'm a bot. Did you mean to thank greycat?
Mar 02 16:35:09 <emanuele6>	never two without three!
Mar 02 16:35:52 <userdocss>	are they getting pinged fromt that?
Mar 02 16:36:16 <emanuele6>	greycat is not online
Mar 02 16:36:38 <emanuele6>	he does not idle
Mar 02 16:41:45 <userdocss>	cats are know to lurk
Mar 02 16:42:11 <userdocss>	it's in their nature.
Mar 02 16:55:11 <qkzoo1978>	Can someone explain what this means barny style for me: "$*" is the IFS expansion of all positional parameters, $1 $2 $3 ...
Mar 02 16:59:24 <qkzoo1978>	input field seperator got it
Mar 02 17:00:08 <ormaaj>	!yw
Mar 02 17:00:08 <greybot>	You're welcome, human.
Mar 02 17:03:05 <geirha>	!$*
Mar 02 17:03:05 <greybot>	The difference between $@ and $*: "$@" (quoted) expands to each positional parameter as its own argument: "$1" "$2" ... while "$*" expands to the single argument "$1c$2c..." where c is the first character of IFS. You almost always want "$@". The same goes for arrays: "${array[@]}" or "${array[*]}". Unquoted $* and $@ are nonsense; DO NOT use
Mar 02 17:15:37 <qkzoo1978>	!help
Mar 02 17:15:37 <greybot>	I can do: !faq {number|string}, !pf {number|string}, !learn key value, !meta key, !metaurl key, !forget key, !searchkeys string, !factstats, !faqstats, !faqpages, !date, !version. For help with Bash builtins, use "help command" in bash.
Mar 02 17:15:48 <qkzoo1978>	awesome
Mar 02 17:16:03 <qkzoo1978>	learned something new
Mar 02 17:16:24 <geirha>	!factstats
Mar 02 17:16:24 <greybot>	Top factoids: pe (3069), guide (2499), nabq (2253), ls (2247), find (2049), help (1837), quotes (1826), varcap (1521), umq (1422), pm (1421)
Mar 02 17:25:32 <emanuele6>	!no
Mar 02 17:25:32 <greybot>	Don't make shit up
Mar 02 17:32:07 <userdocss>	!thanks
Mar 02 17:32:07 <greybot>	Don't thank me, I'm a bot. Did you mean to thank greycat?
Mar 02 17:42:04 <qkzoo1978>	https://pastebin.com/CdnRsZBe <-- it keeps exiting without waiting for input, any advice on what I'm doing wrong?
Mar 02 17:42:04 <pasteban>	Paste is available without ads on https://pastebin.com/raw/CdnRsZBe
Mar 02 17:42:05 <checkbot>	qkzoo1978: I think the problem is on line 17. You need spaces around the comparison operator. See 6 issues on https://shellcheck.net/?id=cb97725
Mar 02 17:44:32 <geirha>	res=yes_no_abort just assigns a string to a variable. Your function is never run
Mar 02 17:53:27 <qkzoo1978>	ok, bash is bizarre. I think I getit though
Mar 02 17:56:21 <qkzoo1978>	Is there an alternative to: yes_no_abort; result=$?        ?
Mar 02 17:56:32 <qkzoo1978>	or is that just how its done
Mar 02 17:56:55 <geirha>	res=$(yes_no_abort)
Mar 02 17:57:03 <qkzoo1978>	sweet thx
Mar 02 17:59:08 <qkzoo1978>	that seems to return all arguments, even invalid ones
Mar 02 18:00:50 <geirha>	Your function doesn't take any arguments. You're not making any sense
Mar 02 18:02:00 <geirha>	Also, make sure you fix the errors shellcheck pointed out. Your script won't work until you do
Mar 02 18:03:07 <qkzoo1978>	yes, I added the -r.  It keeps saying line blah >  [: too many arguments for my if statements
Mar 02 18:05:10 <qkzoo1978>	https://pastebin.com/CdnRsZBe
Mar 02 18:05:10 <pasteban>	Paste is available without ads on https://pastebin.com/raw/CdnRsZBe
Mar 02 18:05:34 <qkzoo1978>	!checkbot
Mar 02 18:05:34 <greybot>	checkbot is an IRC frontend for !shellcheck. It responds to !check [url/snippet], and automatically to pastebin links with selected errors (/msg checkbot quiet).
Mar 02 18:05:41 <geirha>	# [ hi 0 == 0 ]
Mar 02 18:05:43 <shbot>	geirha: bash: [: too many arguments
Mar 02 18:05:51 <geirha>	yep, that would do it
Mar 02 18:06:01 <qkzoo1978>	!check https://pastebin.com/CdnRsZBe
Mar 02 18:06:02 <pasteban>	Paste is available without ads on https://pastebin.com/raw/CdnRsZBe
Mar 02 18:06:02 <checkbot>	qkzoo1978: Line 18: Double quote to prevent globbing and word splitting. Line 19: Double quote to prevent globbing and word splitting. Line 20: Double quote to prevent globbing and word splitting. See https://shellcheck.net/?id=cb99162
Mar 02 18:06:30 <geirha>	remove the echo hi, or make it output to stderr instead of stdout
Mar 02 18:06:36 <geirha>	also fix the quoting
Mar 02 18:07:25 <geirha>	or better, switch to [[ ]] or case instead of [ ]
Mar 02 18:08:33 <qkzoo1978>	I was going to do that, but it was bugging me that I couldn't figure out something seemingly simple!
Mar 02 18:09:43 <geirha>	in general it's not a good idea to guess on bash syntax. A lot of bad guesses will happen to be valid syntax, but do something very different than intended
Mar 02 18:10:15 <qkzoo1978>	...just when I think I'm starting to get something....bash...
Mar 02 18:11:09 <geirha>	bash is 50 years of bad design decisions
Mar 02 18:11:18 <qkzoo1978>	no kidding
Mar 02 18:11:45 <geirha>	extremely useful, but very easy to get wrong, and it doesn't help that
Mar 02 18:11:47 <geirha>	!crap
Mar 02 18:11:47 <greybot>	The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
Mar 02 18:12:36 <qkzoo1978>	I should probably teach myself python or something, but at some point, you have to know bash for your python script
Mar 02 18:13:27 <geirha>	I recommdn you read throug the BashGuide, then peruse BashFAQ and BashPitfalls
Mar 02 18:13:42 <qkzoo1978>	Will I fall asleep reading them
Mar 02 18:13:45 <qkzoo1978>	?
Mar 02 18:13:51 <qkzoo1978>	!bashguide
Mar 02 18:13:51 <greybot>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
Mar 02 18:14:00 <qkzoo1978>	!bashpitfalls
Mar 02 18:14:17 <geirha>	!pf
Mar 02 18:14:17 <greybot>	geirha: No matches found at https://mywiki.wooledge.org/BashPitfalls
Mar 02 18:14:27 <goodlings8>	!ls
Mar 02 18:14:27 <greybot>	DO NOT USE the output of ls in scripts. Its output format is neither portable nor reliable. Use globs instead. See https://mywiki.wooledge.org/ParsingLs
Mar 02 18:14:42 <goodlings8>	!sh
Mar 02 18:14:42 <greybot>	sh is NOT bash; it is a POSIX shell. To run bash code, your script MUST use a bash shebang, and it MUST be executed directly or with bash (NOT sh myscript). Sometimes /bin/sh symlinks to bash, but you can't rely on this and it will disable many bash features. <http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell>
Mar 02 18:15:16 <qkzoo1978>	is sh better than bash?
Mar 02 18:15:47 <geirha>	No, sh is even more painful
Mar 02 18:16:01 <qkzoo1978>	good to know.
Mar 02 18:17:32 <qkzoo1978>	There. Both sites bookmarked.
Mar 02 18:25:51 <qkzoo1978>	also bookmarked shellscript thing. that a new ai tool?
Mar 02 18:26:45 <geirha>	Just Haskell, not AI
Mar 02 18:32:25 <geirha>	Hard to spot with an untrained eye, but you can tell by shellcheck not being confidently incorrect like chatgpt
Mar 02 18:40:47 <ormaaj>	Are you sure? Completely!
Mar 02 18:42:29 <qkzoo1978>	cool tool just the same. it just told me to add || or exit to all my "cd's" in my script
Mar 02 18:42:40 <qkzoo1978>	err || exit
Mar 02 18:43:31 <geirha>	Yes, that's very important. Valve forgot to do that in their linux installer, which ended up with wiping a couple of unlucky people's homedirs
Mar 02 18:43:40 <geirha>	*linux installer for steam
Mar 02 18:44:41 <Enissay>	I am trying to parse a yaml with yq. Using `yq '.foo | keys'  config.yaml` it gives me a list of keys with dash before... I just want to raw key names so I can loop over...
Mar 02 18:45:43 <geirha>	Sounds like the go implementation of yq. I only really have experience with the saner python implementation
Mar 02 18:46:44 <Enissay>	There's another tool ? I am using it because it was the first to popup in search
Mar 02 18:46:50 <geirha>	anyway, try with '.foo | keys[]'
Mar 02 18:47:15 <Enissay>	geirha: sadly doesnt work, I tried already :x
Mar 02 18:47:41 <Enissay>	`Error: bad expression, please check expression syntax`
Mar 02 18:48:04 <osse>	Pipe it to map() or something like that, perhaps? Ie. do the looping within yq
Mar 02 18:48:42 <geirha>	that's why I don't like the go version. It doesn't use jq syntax
Mar 02 18:50:23 <geirha>	maybe it'll accept   '.foo | keys | .[]'  ?
Mar 02 18:52:29 <osse>	Seems to have a bunch of operators that work on keys, at least
Mar 02 18:53:16 <geirha>	With https://pypi.org/project/yq/    yq -r '.foo | keys[]'    works as expected since it actually uses jq syntax
Mar 02 18:58:03 <osse>	Doesn't it literally use jq itself undah da h00d?
Mar 02 18:58:30 <geirha>	Indeed
Mar 02 18:58:35 <phogg>	there's a version of yaml which is a superset of json, so it well might
Mar 02 18:58:46 <geirha>	that way you only need to learn one jq syntax, not several dialects
Mar 02 18:59:11 <geirha>	there's a version of yaml that ISN'T a superset of json?
Mar 02 18:59:19 <phogg>	yes, yaml v1
**** BEGIN LOGGING AT Sat Mar  2 19:02:28 2024

Mar 02 19:02:28 *	Now talking on #bash
Mar 02 19:02:28 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 02 19:02:28 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 02 19:02:30 <Lynx->	is it obvious why this commit: https://github.com/lynxthecat/cake-autorate/compare/master...testing increases rather than decreases processing time?
Mar 02 19:05:22 <geirha>	757 line diff. Sorry, but not going to read through that
Mar 02 19:05:35 <phogg>	geirha: 1.2 support is still unfortunately uncommon. But one day you'll be able to switch between the two schemas in one file and gain the benefits of both.
Mar 02 19:10:06 <Lynx->	geirha does this time -v comparison offer any insight? https://pastebin.com/raw/fNFR1qe6
Mar 02 19:10:31 <Lynx->	the newer code has about double the numebr of "Voluntary context switches:"
Mar 02 19:16:31 <Lynx->	does spreading computation out amongst different backgrounded processes somehow generally reasult in reduced computation?
Mar 02 19:19:53 <phogg>	no, just parallel
Mar 02 19:20:35 <Lynx->	I
Mar 02 19:21:35 <Lynx->	I just made a restructure of my bash program that shifted processing from what was previously backgrounded to main, which removed quite a bit of duplication in terms of writes/reads since it obviated having to pass processed data from the backgrounded process to main, but surprisingly it resulted in greater computation. Is there some sort of way I can profile and work out why?
Mar 02 19:22:36 <phogg>	"greater computation"? Is that more CPU cycles? More wall clock time?
Mar 02 19:24:38 <Lynx->	phogg more CPU cycles - https://pastebin.com/raw/fNFR1qe6
**** BEGIN LOGGING AT Sun Mar  3 08:36:18 2024

Mar 03 08:36:17 *	Now talking on #bash
Mar 03 08:36:17 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 03 08:36:17 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 03 11:39:56 <ZAJDAN>	hi..I want to use variable during creation of directory in this way 'mkdir /here/daily_$myvar_backup' ..but when the variable is wrapped in underlines _ it does not works
Mar 03 11:45:34 <emanuele6>	it should be   mkdir /here/daily_"$myvar"_backup
Mar 03 11:47:51 <ZAJDAN>	emanuele6: thank you...works
Mar 03 12:03:53 <xx>	cd / && find /var/lib/dpkg/info -name '*.md5sums' -exec md5sum --check --quiet {} +
Mar 03 12:04:02 <xx>	any way I can execute that without having to have the cd / part?
Mar 03 12:04:30 <xmb>	yes remove i4 its useless cmd
Mar 03 12:04:52 <xmb>	remove cd / && , for just the find cmd
Mar 03 12:05:04 <xx>	but then it doesn't work unless I am in /
Mar 03 12:05:49 <xmb>	it does , its cmd find at absolte path , oh wait ur md5sum smth
Mar 03 12:06:07 <xx>	the md5sums files don't contain absolute path, they contain relative paths to /
Mar 03 12:06:17 <xmb>	try -execpath , sec ..
Mar 03 12:06:36 <xmb>	sry u need else , min ..
Mar 03 12:07:18 <xmb>	xx , i ran find , it showed absolte paths to args
Mar 03 12:07:41 <xmb>	eg i tried find ../usr/bin it all showed ../usr/bin/ paths
Mar 03 12:08:22 <xmb>	there is a -exexdir opt to exec in same dir as found
Mar 03 12:08:36 <xx>	well it doesn't work, so I'll rephrase my question - can I make `find` switch to some different $PWD ?
Mar 03 12:09:10 <xx>	I guess I can make it all run in a subshell so that I don't need to cd back
Mar 03 12:09:19 <xmb>	thats simple ye
Mar 03 12:10:08 <xmb>	( cd && find )
Mar 03 12:11:28 <lopid>	what you mean is "i want find's files output prefix to be …"?
Mar 03 12:11:53 <xmb>	=)
Mar 03 12:12:01 <lopid>	not "how can i run this without doing that"?
Mar 03 12:13:00 <phogg>	xx: you could cd beore each invocation of md5sum instead, but it's strictly better to change before running find. A subshell works, but you could also pushd && find && popd
Mar 03 12:13:47 <xx>	yeah a subshell it is then, thanks
Mar 03 12:14:45 <xmb>	fs question , if id chmod a-rwx / , are /home users blocked or smth ?
Mar 03 12:15:04 <phogg>	sm1999: you will break your system very badly, don't do that
Mar 03 12:15:12 <phogg>	er, xmb I mean, sorry
Mar 03 12:15:19 <phogg>	weirdest failed tab complete
Mar 03 12:15:26 <xmb>	yea thats why i ask
Mar 03 12:16:10 <xmb>	i look from security against hacks point
Mar 03 12:16:30 <phogg>	xmb: your question seems to imply that it will specifically break access to home dirs for users. I will do a lot worse than tha.
Mar 03 12:17:08 <xmb>	yea i ask , if itd break /home users
Mar 03 12:17:15 <phogg>	xmb: no, it will not do that
Mar 03 12:17:22 <phogg>	xmb: it will break E V E R Y T H I N G
Mar 03 12:17:37 <xmb>	i got a good idea , i try on windows wsl debian , safe thing to re-install
Mar 03 12:17:51 <xmb>	ok everything , ...
Mar 03 12:18:06 <xmb>	very good , =p ill have to try
Mar 03 12:18:23 <phogg>	there's no point in even trying it. You are removing x from directories for root, so even root can't traverse them. You are removing x on all files even for root, so even root can't execute any processes
Mar 03 12:18:44 <xmb>	i dont think root will fail
Mar 03 12:18:48 <xmb>	or would it
Mar 03 12:18:52 <phogg>	of course it would
Mar 03 12:19:03 <xmb>	hm then cant do ye
Mar 03 12:19:40 <xmb>	oh removing x makes bins break
Mar 03 12:19:45 <xmb>	thxx++ mate
Mar 03 12:20:00 <phogg>	This is a Whole Hawg situation. Welcome to Unix, safety is not guaranteed.
Mar 03 12:20:14 <phogg>	s/Whole/Hole/
Mar 03 12:20:35 <xmb>	common with todays world , not guaranteed whats asked for ,  =)
Mar 03 12:21:51 <phogg>	no, it will do exactly what you asked for
Mar 03 12:21:56 <phogg>	maybe not what you *wanted*
Mar 03 12:22:33 <xmb>	ah ye similiar case , my english is only basic
Mar 03 12:23:10 <xmb>	but , i actually asked for a-rwx , .. i didnt plan on changing u or g
Mar 03 12:23:21 <xmb>	so root may still work ?
Mar 03 12:28:04 <xmb>	oh a = all and e i meant everyone else .. ?
Mar 03 12:28:17 <xmb>	uge oe uga
Mar 03 12:29:28 <xmb>	or* sry
Mar 03 12:31:10 <xmb>	u root wrx g root same , .. wont work ?
Mar 03 12:49:40 <ormaaj>	directory perms don't affect being able to execute things. It'll break your PATH lookups.
Mar 03 13:02:23 <emanuele6>	ormaaj: well, not if you are root, but as a regular user if you don't have x permissions on a directory you won't be able do anything with the files in that directory or its subdirectories; you will only be able to see the file names of the files in the directory if you also have r permissions
Mar 03 13:12:10 <militantorc>	i like when you have x but no r
Mar 03 13:12:22 <militantorc>	seen in some androids
Mar 03 13:56:03 <phogg>	xmb: yes, a is all. What did you mean? I presume you meant o, for "other" aka world permission. If you do chmod -R o-rwx / the system probably won't entire;y break, but you will probably mess up permissions on /tmp
Mar 03 14:16:08 <xmb>	phogg , i meant u and g root normal , only the third field there -rwx , and only on / , no subs
Mar 03 16:03:11 <kurahaupo>	phogg: why suggest pushd / && find … && popd when that's less reliable than ( cd / && exec find … )
Mar 03 16:06:17 <kurahaupo>	(both popd and cd - can fail in various ways; the simplest is "permission denied"
Mar 03 16:06:22 <kurahaupo>	)
**** BEGIN LOGGING AT Mon Mar  4 04:37:43 2024

Mar 04 04:37:43 *	Now talking on #bash
Mar 04 04:37:43 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 04 04:37:43 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Mon Mar  4 04:39:41 2024

Mar 04 04:39:40 *	Now talking on #bash
Mar 04 04:39:40 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 04 04:39:40 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 04 05:32:21 <loganlee>	hello. `find / -maxdepth 3 \( -path /dev -o -path /run -o -path /tmp -o -path /home/lost+found -o -path /root -o -path /lost+found -o -path /boot/efi \) -prune -o -type f -user logan -group logan -iname 'todo.sh' -print` here why is \( ... \) -prune -o ... and not \( ... \) -prune -a ...?
Mar 04 05:38:04 <larryv>	if it were -a then you would be telling find to print paths that satisfy every condition listed, which is not possible.
Mar 04 05:42:36 <loganlee>	larryv, if i change to \( ... \) -prune -a ... it gives not results
Mar 04 05:42:43 <loganlee>	no results*
Mar 04 05:43:01 <larryv>	yeah. as i just said, the resulting condition is impossible to satisfy.
Mar 04 05:43:34 <loganlee>	yep i think exclusion condition -o inclusion condition is valid but not exclusion condition -a inclusion condition?
Mar 04 05:44:09 <larryv>	i won't confirm such an overbroad statement.
Mar 04 05:44:15 <larryv>	just look at what you'd be asking
Mar 04 05:44:24 <larryv>	a path cannot both be e.g., /dev AND have a name todo.sh
Mar 04 05:45:24 <loganlee>	yep
Mar 04 05:46:31 <loganlee>	thanks a lot
Mar 04 05:46:48 <larryv>	mhm
Mar 04 05:48:27 <loganlee>	i'll ask again later after some further study. thanks a lot larryv
Mar 04 05:48:37 <larryv>	np
Mar 04 05:48:45 <pj>	If you read the find docs the example given for -prune explicitly uses -o
Mar 04 05:48:53 <tirnanog>	https://pubs.opengroup.org/onlinepubs/9699919799/utilities/find.html
Mar 04 05:48:59 <tirnanog>	it shall always evaluate as true.
Mar 04 05:49:07 <loganlee>	ok
Mar 04 05:51:30 <pj>	well, since -prune always returns true then one would think it shouldn't matter if the condition is -a or -o, but since the docs say to use -o I would just use that and not worry about it.
Mar 04 05:52:42 <tirnanog>	that's precisely why it matters.
Mar 04 05:53:00 <pj>	oh I think I get it
Mar 04 05:53:02 <larryv>	it matters because with -a and -print at the end, all the primaries have to be true simultaneously to ever print anything
Mar 04 05:53:03 <tirnanog>	upon -prune being reached and its effect applied, that which follows must surely be an alternative.
Mar 04 05:53:15 <tirnanog>	it does more than just be true, after all.
Mar 04 05:53:17 <pj>	if the preceding conditions return false then it short-circuits the -prune.
Mar 04 05:53:39 <tirnanog>	yes. all primaries are joined by an implicit -a where neither -a nor -o is given.
Mar 04 05:54:14 <pj>	so prune may return true, but only if it reaches -prune.
Mar 04 05:54:32 <tirnanog>	yes.
Mar 04 05:54:34 <pj>	which it won't if the -path conditions aren't satisfied.
Mar 04 05:55:28 <pj>	loganlee: does this help? ^^^^^^
Mar 04 05:56:39 <loganlee>	pj, i'm a little tired today. i'll have a look at it later. :D
Mar 04 08:06:42 <chomwitt>	Why a glob's wild chars can not match a '/' but using globbing in other commands , like for example in debian's dpgk-query --search' can ?
Mar 04 08:15:49 <bent_fingers>	loganlee: i used to think the same thing.
Mar 04 08:16:40 <emanuele6>	then you tried drinking coffee and now you are not tired anymore
Mar 04 08:16:57 <larryv>	chomwitt: what dpkg-query does is not globbing
Mar 04 08:17:21 <ano>	there is no such a thing as glob(bing) std/spec, glob(bing) mostly mean https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_13 but it can be anything
Mar 04 08:17:50 <emanuele6>	cool link
Mar 04 08:18:07 <larryv>	chomwitt: you're really comparing filename generation/expansion to pattern matching. the former has extra restrictions over general pattern matching
Mar 04 08:18:14 <chomwitt>	larryv: so dpkg-query doesnt it's own expansion ?
Mar 04 08:18:24 <chomwitt>	/s/doesnt/does
Mar 04 08:18:32 <larryv>	chomwitt: it's not doing filename expansion at all
Mar 04 08:19:04 <larryv>	not as understood in the shell language, at any rate
Mar 04 08:19:40 <emanuele6>	* ? [] does not match / mostly because the glob is compared against a file name, not an entire path; however if you use the glob patter in case  case $var in *a*) ;; esac   or [[ $var == *a* ]]   then * will be able to match /
Mar 04 08:20:30 <chomwitt>	larryv: so dpkg-query does on its own a search on the space of all installed files and the similarity to unix shell glob is that is using glob like wildchars ?
Mar 04 08:20:55 <larryv>	more or less
Mar 04 08:21:24 <larryv>	like emanuele6 just said, even the shell itself uses patterns in slightly different ways
Mar 04 08:23:32 <chomwitt>	emanuele6: so that is like having relative meaning according to the context used . Is that behavior documented somewhere ?
Mar 04 08:23:57 <larryv>	https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_13_03
Mar 04 08:24:30 <emanuele6>	you don't even have to think of it as working differently in different context; the glob pattern is matches against the file name which will not contain a /
Mar 04 08:26:07 <larryv>	yeah but there's also other stuff like initial '.' having to be matched explicitly
Mar 04 08:26:27 <emanuele6>	also that  *  cannot match an empty string when the entire glob is *
Mar 04 08:26:41 <emanuele6>	e.g.  /usr/bin/*/bash    cannot match /usr/bin//bash
Mar 04 08:27:23 <emanuele6>	because it actually compares * against the file names of the files in /usr/bin/ which will not contain any file with a empty name, because those cannot exist
Mar 04 08:28:03 *	chomwitt thanks for the clarification , insights and the opengroup link larryv and emmanuelux
Mar 04 08:29:01 <emanuele6>	thank you for thanking emmanuelux, i always think they are underappreciated
Mar 04 08:29:19 <colo>	:D
Mar 04 08:29:36 <larryv>	is that your evil twin
Mar 04 08:29:48 <colo>	or maybe the good twin?
Mar 04 08:29:53 <larryv>	:O
Mar 04 08:30:12 <emanuele6>	maybe; i had a vanishing twin, maybe that is where it has gone :o
Mar 04 08:32:21 <chomwitt>	emanuele6: sorry!
Mar 04 08:32:58 *	chomwitt thanks emanuele6 .
Mar 04 08:33:49 <ano>	does anyone use less as pager at daily basis? looks like lesspipe.sh and gentoo builtin lessopen are awful
Mar 04 08:39:07 <bent_fingers>	ano: everyone uses less
Mar 04 08:40:51 <cappy>	bent_fingers: less is more but cat is a bat with wings and it flies circles around less, at least for this guy.
Mar 04 08:41:19 <bent_fingers>	chomwitt: please consider the plight of he who serves you https://www.givesendgo.com/GBH2M
Mar 04 08:42:32 <bent_fingers>	ano: you can fix that, and yes, it's awful
Mar 04 08:42:40 <ano>	fat bat
Mar 04 08:43:19 <cappy>	s/bat is a cat.../
Mar 04 08:44:30 <emanuele6>	bats are not flying felines; that is a common misconception
Mar 04 08:46:44 <cappy>	emanuele6: Yes, truly. But seriously, I've found the bat(1) pager far superior with its language syntax highlighting.
Mar 04 08:48:26 <bent_fingers>	i'm colorblind. doesn't matter to me
Mar 04 08:49:11 <cappy>	Perhaps ano is not?
Mar 04 08:49:29 <bent_fingers>	i open my texts with less, press f, and i'm good
Mar 04 08:49:38 <bent_fingers>	sometimes i press /
Mar 04 08:50:08 <bent_fingers>	not much else to it really
Mar 04 08:51:00 <emanuele6>	i use the occasional ?
Mar 04 08:51:03 <bent_fingers>	cappy: perhaps he's eyeless?
Mar 04 08:51:27 <emanuele6>	either that or bat eyesight
Mar 04 08:51:38 <cappy>	That could make for difficult debugging of a missing quote here and there.
Mar 04 08:55:05 <cappy>	bat automatically pipes its output through a pager (by default: less).  So the foundation remains viable.
Mar 04 08:55:40 <emanuele6>	how much does it cost?
Mar 04 08:56:02 <bent_fingers>	were any bats harmed in it's making?
Mar 04 08:56:02 <cappy>	It's in the debian repo.
Mar 04 08:56:39 <emanuele6>	oh, i don't use debian
Mar 04 08:56:42 <cappy>	DEB package bat-musl
Mar 04 08:57:28 <cappy>	emanuele6: https://github.com/sharkdp/bat
Mar 04 08:57:31 <bent_fingers>	sounds like a lot of piping when you use bat
Mar 04 08:57:48 <bent_fingers>	he can't access that
Mar 04 08:58:05 <bent_fingers>	cappy: consider helping  https://www.givesendgo.com/GBH2M
Mar 04 08:58:14 <emanuele6>	wow advertisements in the readme file :o
Mar 04 08:58:24 <ano>	bat will cost ~3MB of rusty bloatness
Mar 04 08:58:37 <emanuele6>	ano: how much does that cost?
Mar 04 08:58:47 <emanuele6>	i heard rust is free
Mar 04 08:59:20 <bent_fingers>	could be
Mar 04 08:59:34 <emanuele6>	rust removal however... quite expensive
Mar 04 08:59:35 <bent_fingers>	some things are free out there, after all
Mar 04 09:00:17 <emanuele6>	i installed bat
Mar 04 09:00:28 <emanuele6>	and printed out a .bat file with it
Mar 04 09:00:37 <emanuele6>	fancy colours
Mar 04 09:01:08 <emanuele6>	it is using a salmon colour to highlight "echo"
Mar 04 09:01:36 <sphertext>	does any body have a suggestion for a good sed tutorial?
Mar 04 09:01:37 <ano>	think free as in "free coc", not "free memory"
Mar 04 09:01:51 <bent_fingers>	atlantic pink salmon, to be precise
Mar 04 09:01:58 <cappy>	emanuele6: try --list-themes and --list-colors
Mar 04 09:02:03 <emanuele6>	highlight -Oansi uses the regular green colour, not special truecolour
Mar 04 09:02:15 <cappy>	sorry --list-languages
Mar 04 09:02:34 <bent_fingers>	sphertext: the one in the title of #sed
Mar 04 09:02:42 <emanuele6>	hmm. i ran  --list-themes  and it dumped a bunch of text; not what i would expect from a pager
Mar 04 09:03:04 <emanuele6>	unbuffer bat --list-themes | less -R   to the rescue...
Mar 04 09:03:30 <emanuele6>	needed to unbuffer, or bat --list-themes just outputs the theme names separated by newline
Mar 04 09:03:40 <bent_fingers>	this is nerve wracking
Mar 04 09:03:41 <cappy>	Ha. bat --list-themes | bat
Mar 04 09:03:45 <sphertext>	bent_fingers oh hmm.. i had that saved in my bookmarks, don't remember where i got it from. i was going to use it, but i checked the one about find on the same website and it didn't seem very comprehensive. so i assumed the sed one maybe isn't either
Mar 04 09:03:52 <emanuele6>	cappy...
Mar 04 09:04:00 <emanuele6>	why are you being so mean? D:
Mar 04 09:04:07 <emanuele6>	with the wrong suggestions D:
Mar 04 09:04:23 <cappy>	Not mean at all.
Mar 04 09:04:23 <emanuele6>	i just told you that will list only the theme names
Mar 04 09:04:32 <bent_fingers>	will emanuele6 like the app or not? we're sitting on our seats biting our nails in anticipation of the oucome
Mar 04 09:04:32 <ano>	sphertext: chk #sed /topic
Mar 04 09:04:42 <sphertext>	ano i just replied to that
Mar 04 09:05:00 <sphertext>	i guess if multiple ppl say it's good i should check it
Mar 04 09:05:07 <emanuele6>	also even if you use   unbuffer bat --list-themes | bat    that messes up the colours because it re-highlights the text
Mar 04 09:05:26 <emanuele6>	unbuffer bat --list-themes | less -R   is just better to see look at the themes
Mar 04 09:06:34 <cappy>	emanuele6: Yeah, hadn't tried that. But the language list is extensive and works well for bash.
Mar 04 09:06:43 <bent_fingers>	ano: i told him that already. you can't snatch my kudos from me
Mar 04 09:06:51 <emanuele6>	mean suggestion :(
Mar 04 09:07:08 <bent_fingers>	i need 997 more kudos to gain immunity from channel banning
Mar 04 09:07:10 <emanuele6>	there is an  ansi  theme to use standard colours instead of truecolors
Mar 04 09:08:32 <emanuele6>	bat --theme=ansi foo.bat   now echo is purple :o
Mar 04 09:08:42 <emanuele6>	err, magenta
Mar 04 09:08:51 <emanuele6>	the same colours as cappy's nickname in weechat :D
Mar 04 09:09:23 <bent_fingers>	sphertext: multiple people also believed influenza wsa influenced by the stars
Mar 04 09:10:11 <bent_fingers>	but i wouldn't recommend communing with them in hopes of alleviating any future illness that unhappily visits upon you
Mar 04 09:10:14 <sphertext>	my 16 ansi theme in my terminal is 15 shades of grey + one shade of red
Mar 04 09:10:25 <emanuele6>	ew
Mar 04 09:11:00 <sphertext>	i find that collapsing the dimensionality of visual design spares my cognitive resources which are limited
Mar 04 09:11:15 <emanuele6>	wow, upgrade your brain?
Mar 04 09:11:28 <emanuele6>	lol
Mar 04 09:11:47 <bent_fingers>	mine is black, white, red, and blue for the 16
Mar 04 09:11:51 <emanuele6>	doesn't that just make colours harder to differenciate?
Mar 04 09:12:08 <sphertext>	https://0x0.st/HdcG.png
Mar 04 09:12:12 <emanuele6>	s/differenciate/differentiate/ i know how to spell
Mar 04 09:12:32 <emanuele6>	sphertext: i don't even know how many colours you are showing
Mar 04 09:12:33 <sphertext>	no, i find it's actually sufficient
Mar 04 09:12:43 <sphertext>	15 colors
Mar 04 09:12:53 <sphertext>	the red is omitted and left as an exercise of imagination for the beholder
Mar 04 09:12:55 <emanuele6>	you didn't reduce the number of colours, you just made them harder to differenciate
Mar 04 09:13:16 <sphertext>	no, i reduced the dimensionality of visual information
Mar 04 09:13:22 <emanuele6>	there are clearly different shades, there; but i cannot easily tell if shades that are far apart are different or not
Mar 04 09:13:35 <sphertext>	i can tell the shades apart, easily
Mar 04 09:13:56 <emanuele6>	wow
Mar 04 09:14:00 <emanuele6>	impressive
Mar 04 09:14:35 <sphertext>	when there's information across the hue dimension as well, i find it distracting
Mar 04 09:14:38 <bent_fingers>	and yet we still are left on edge over the verdict of whether or not bat wins approval
Mar 04 09:14:47 <sphertext>	i need more mental effort to process it
Mar 04 09:15:21 <emanuele6>	with that colour palette for sure
Mar 04 09:15:26 <sphertext>	which leaves means mental energy for other things
Mar 04 09:15:34 <sphertext>	* less
Mar 04 09:15:36 <bent_fingers>	you can see color but choose not to do so?
Mar 04 09:15:37 <emanuele6>	lol
Mar 04 09:15:41 <bent_fingers>	what in the world?
Mar 04 09:16:15 <sphertext>	hue is a redundant dimensions of visual representation
Mar 04 09:17:01 <bent_fingers>	i agree
Mar 04 09:17:16 <bent_fingers>	we should all have surgery and become monochromatics
Mar 04 09:17:27 <sphertext>	i still use 1 shade of red
Mar 04 09:17:33 <bent_fingers>	black & white forever!
Mar 04 09:17:34 <sphertext>	it's the only one that has a semantic justification
Mar 04 09:18:31 <bent_fingers>	when i have a child, if he or she or whatever can see color, i'm dropping it off at the fire station
Mar 04 09:19:15 <sphertext>	my desktop wallpaper is pitch black
Mar 04 09:19:26 <bent_fingers>	my child can only see black and white, damn the reduntant dimensions! damn them all!
Mar 04 09:19:28 <sphertext>	like the abyss of existence
Mar 04 09:21:39 <emanuele6>	my desktop wallpaper is https://commons.wikimedia.org/wiki/File:Cow_Moos_-_geograph.org.uk_-_1885583.jpg
Mar 04 09:21:54 <sphertext>	exhausting
Mar 04 09:22:15 <bent_fingers>	pastroal
Mar 04 09:22:19 <bent_fingers>	pastoral
Mar 04 09:22:22 <bent_fingers>	idyllic
Mar 04 09:22:43 <sphertext>	anyway i'm not a psycho, i actually run this in a window constantly on one of my screens https://www.youtube.com/watch?v=VZUkuY3oo2k
Mar 04 09:22:44 <bent_fingers>	Van Goph would have been proud
Mar 04 09:24:24 <bent_fingers>	sphertext: i'm not convinced
Mar 04 09:25:22 <sphertext>	i wrote a bash script that starts that video every day. i'm vaguely using it to regulate my circadian rhythm
Mar 04 09:34:55 <razamatan>	an encrypted loopback file mounting bash alias (on smartos [illumos]) used to work fine to have a nested command that prompted for a decrypting password, but oddly, something changed that it no longer blocks for user input for the password
Mar 04 09:35:17 <razamatan>	would this be bash or the password prompting command?
Mar 04 09:41:36 <geirha>	a bit odd to pack that much logic into an alias. I would use a function. Anyway, no generic answer to your question. It depends on what exactly it runs, and in what context
Mar 04 09:41:55 <razamatan>	are you familiar w/ the lofiadm command in solaris?
Mar 04 09:42:49 <razamatan>	it's really not that bad.. the alias is just: mount $(lofiadm -c aes-256-cbc -a /path/to/enc/file) /mnt/path
Mar 04 09:43:47 <geirha>	if lofiadm uses the tty on stdin to read password, that should work. I'd add the missing quotes though
Mar 04 09:43:51 <razamatan>	the lofiadm returns the /dev/ path to the loopback device holding the unencrypted file handle after getting the password to unlock
Mar 04 09:44:10 <razamatan>	(i have the quotes, i just retyped from memory)
Mar 04 09:45:26 <razamatan>	the odd thing is, it works fine if i reorder the commands (and explicitly set the /dev device path which makes the whole thing a bit more brittle: lofiadm -c aes-256-cbc -a /path/to/en/file /dev/lofi/2 && mount /dev/lofi/2 /mnt/path
Mar 04 09:46:24 <razamatan>	again, the original version used to work fine prior to doing a system upgrade (so it's hard to tell what is causing issues)
Mar 04 09:54:31 <geirha>	See what it shows when you enable xtrace (set -x):  (set -x ; youralias)
Mar 04 09:56:07 <geirha>	oh and, if you run the same  lofiadm command as you do inside the command subsittution, it still asks for password? (i.e. without specifying the lofi dev)
Mar 04 09:56:30 <razamatan>	it correctly does the nested lofiadm as the first command, and does the bad behavior of asking for the password 4 times without actually blocking for the read
Mar 04 09:57:07 <razamatan>	the behavior is that it just keeps prompting the full retry count (i think 4 based on what i'm seeing) and failing
Mar 04 09:57:57 <geirha>	printf '<%s>\n' "$(read -rp "type something: " var && printf %s "$var")
Mar 04 09:58:03 <geirha>	does that one wait for input?
Mar 04 09:58:39 <razamatan>	should i just cut and paste that in a live prompt, or put that in an alias?
Mar 04 09:59:10 <geirha>	alias shouldn't really affect it, but try both just to be sure
Mar 04 09:59:49 <geirha>	oh and it's missing the closing " at the very end there
Mar 04 09:59:53 <geirha>	printf '<%s>\n' "$(read -rp "type something: " var && printf %s "$var")"
Mar 04 10:00:16 <razamatan>	i had to switch it up to: printf '<%s>\n' "$(read -rp 'type something: ' var && printf %s \$var)"
Mar 04 10:00:22 <razamatan>	and it did prompt correctly
Mar 04 10:01:52 <razamatan>	https://github.com/illumos/illumos-gate/tree/b70bf3ee79d81df3ccc36e553e0ff11049a2b51a/usr/src/cmd/lofiadm
Mar 04 10:02:05 <geirha>	well, sounds like lofiadm is the one that has changed behavior somehow. It should definitely have the same ability as that read to read from the tty
Mar 04 10:02:17 <razamatan>	ok.. :/
Mar 04 10:02:24 <razamatan>	i'll follow up w/ the illumos folks
Mar 04 10:05:26 <razamatan>	geirha: thanks..
Mar 04 10:06:14 <Soliton>	having to change that code seems suspicious...
Mar 04 10:56:07 <Clocked>	Hi! When I need the last 3 parts of this-is-a-sting-where-I-need-to-get-1-2-3 should I do this with 3 times ${string##*:-} and glue it back together or use cut/awk/or so ?
Mar 04 10:56:59 <osse>	Clocked: is the part you want always numbers and the rest never numbers?
Mar 04 10:57:23 <Clocked>	osse nope otherwise it would have been easy indeed
Mar 04 10:58:36 <Soliton>	# string=this-is-a-sting-where-I-need-to-get-1-2-3; echo "${string#"${string%-*-*-*}"-}"
Mar 04 10:58:39 <shbot>	Soliton: 1-2-3
Mar 04 10:59:12 <Clocked>	oh yeah in this case that would be possible!
Mar 04 10:59:32 <Clocked>	I thought such inner was never possible
Mar 04 11:05:56 <Earnestly>	Clocked: It is in the parameter section of parameter expansion, but not in the expansion part
Mar 04 11:06:28 <Clocked>	indeed!
Mar 04 11:18:21 <xmb>	# s() { for s ; do printf %s\\t "${s#${s%%+(-+([0-9]))}-}" ; done ; } ; s a-b-c-1-2-3-4 1-d-e-8-2 a-8-b-9-7
Mar 04 11:18:23 <shbot>	xmb: 1-2-3-4 8-2     9-7
Mar 04 11:21:42 <Clocked>	nice!
Mar 04 11:22:39 <mawk>	what's the command from detaching a background job?
Mar 04 11:22:44 <mawk>	I have a void
Mar 04 11:23:16 <Soliton>	perhaps you mean disown.
Mar 04 11:23:24 <mawk>	aaaaaa disown yes
Mar 04 11:23:25 <mawk>	thanks
Mar 04 11:24:39 <mawk>	^Z; bg; disown
Mar 04 11:24:51 <mawk>	it doesn't work on all programs though for some reason
Mar 04 11:24:55 <mawk>	I guess it's when they mess up the terminal
Mar 04 11:26:01 <mawk>	and we can always stop them from another terminal, as SIGSTOP cannot be caught
Mar 04 13:33:34 <RhineDevil>	I need to define a config file containing a structure for "objects" whose data I'll dispatch in multiple associative arrays. In order to do so I'd like to use a proper config file format, easy to edit and that also can refer to some internal variables defined by the script. What could I do?
Mar 04 13:34:39 <emanuele6>	dconf
Mar 04 13:36:18 <fb`>	redirecting a long running stdout through a fifo to netcat. need it to not block script execution. script eventually blocks on a full output buffer
Mar 04 13:40:22 <Soliton>	perhaps you can ask your os for a bigger pipe size.
Mar 04 13:40:37 <ormaaj>	prod the reader and tell it to get busy. Either don't let it fill or don't write to a pipe
Mar 04 13:41:05 <ormaaj>	Or use nonblocking or polled i/o which shell doesn't really support.
Mar 04 13:43:29 <fb`>	stdbuf has not helped. script is designed to be unattended, as in a reader may or may not connect to drain the buffer
Mar 04 13:43:58 <Soliton>	how is that design supposed to work in practice?
Mar 04 13:44:23 <colo>	"named pipes considered footguns"
Mar 04 13:46:06 <fb`>	in practice the output can top out around 1MB. script blocks around 132K which has been an issue
Mar 04 13:46:41 <Soliton>	# cat /proc/sys/fs/pipe-max-size
Mar 04 13:46:43 <shbot>	Soliton: 1048576
Mar 04 13:47:17 <Soliton>	sounds like you should ask your os for a bigger pipe.
Mar 04 13:47:40 <Soliton>	you could also use pv -B as an additional buffer.
Mar 04 13:49:46 <fb`>	tried pv, still blocks ~132K. pipe-max-size is ~1MB
Mar 04 13:51:07 <Soliton>	so set your pipe to that size.
Mar 04 13:52:39 <colo>	what exactly causes the nc process involved not to send off the data to its TCP peer?
Mar 04 13:53:08 <fb`>	environment is limited doesn't have perl, for example to run fcntl
Mar 04 13:53:54 <fb`>	a tcp peer may not connect, it's an optional output
Mar 04 13:56:34 <fb`>	considering a watchdog to detect blocking. it would connect a local dummy peer to and flush the buffer
Mar 04 14:02:04 <RhineDevil>	emanuele6: I'd prefer a config file format parsable by native bash
Mar 04 14:02:42 <RhineDevil>	Or by standard tools
Mar 04 14:04:40 <emanuele6>	as opposed to foreign bash
Mar 04 14:05:12 <fb`>	RhineDevil a config file formatted like a shell script with simple key-value variables wouldn't work? values could be post-processed with cli tools
Mar 04 14:38:47 <RhineDevil>	fb`: That was my initial idea, but if it's a standard format even better
Mar 04 14:40:22 <RhineDevil>	In general I'd want either a standard format or something easily parseable for my objective (organized key/value pairs representing fictional objects), with preference for standard format
Mar 04 14:40:34 <fb`>	maybe xml, yaml, or json then? a tool like this can read/write: https://github.com/mikefarah/yq
Mar 04 14:42:28 <geirha>	A better yq implementation at   https://github.com/kislyuk/yq
Mar 04 14:46:22 <RhineDevil>	fb`: As said before I'd use these formats only if they're parseable from bash and standard tools
Mar 04 14:47:06 <RhineDevil>	Since I'm making a tool that should be generally usable as long you have bash and basic tools like jq I don't wanna request weird dependencies users will have problems in installing
Mar 04 14:47:46 <fb`>	standard tools defined as.. what your package manager can installer? basic posix commands?
Mar 04 14:47:55 <fb`>	*install
Mar 04 14:48:05 <RhineDevil>	basic posix commands
Mar 04 14:48:20 <RhineDevil>	As now requested dependencies are aapt find gawk sed jq zstd grep
Mar 04 14:48:30 <geirha>	jq is certainly not posix
Mar 04 14:48:33 <geirha>	nor gawk or zstd
Mar 04 14:49:02 <RhineDevil>	They're generally available also originally it wasn't my work
Mar 04 14:49:10 <Soliton>	but since you apparently already use jq what is even the question...
Mar 04 14:49:37 <RhineDevil>	Soliton: would be a mess writing a config file for all packages in json...
Mar 04 14:49:43 <RhineDevil>	Imagine mantaining the package list
Mar 04 14:50:07 <RhineDevil>	I mean there's a reason why people use stuff like toml and yaml instead of json
Mar 04 14:50:14 <osse>	how about using bash syntax for the file? read the file by sourcing it and update it by declare -p
Mar 04 14:50:19 <Soliton>	but you don't want to...
Mar 04 14:50:20 <fb`>	uhm, tell nodejs devs that
Mar 04 14:51:31 <RhineDevil>	osse: I remember I've read in this chat a better solution that did exactly this but with parsing instead of sourcing
Mar 04 14:52:45 <RhineDevil>	fb`: I use javascript only cause I'm forced by circumstances and I think the world would be better if it wasn't invented
Mar 04 14:53:51 <fb`>	fair enough. so you prefer bash instead?
Mar 04 14:54:12 <RhineDevil>	No
Mar 04 14:54:28 <RhineDevil>	Or I mean
Mar 04 14:54:32 <RhineDevil>	Depends on the task
Mar 04 14:56:10 <RhineDevil>	So anyway, approved solution is bash-like config file. But wasn't there a way for including just variables instead of code?
Mar 04 16:13:27 <OnlineCop>	Within a local git repo, I'm usually okay doing `grep 'PATTERN' $(git ls-files)` to limit my searches to only checked-in files, except in a few cases where those files contain spaces or special characters. Do I have to modify IFS, or assign all $(git ls-files) results to an array, in order to do something like this, or is there an alternate command/method I could use?
Mar 04 16:14:04 <emanuele6>	hmm, git grep
Mar 04 16:14:48 <Soliton>	yeah, use git grep. your current approach is broken and cannot be fixed.
Mar 04 16:15:17 <OnlineCop>	I just thought of `git grep` after I wrote that... that may be what I'll end up doing. :) Thanks, both.
Mar 04 16:15:29 <selckin>	git ls-files -oc --exclude-standard | ack -x
Mar 04 16:15:50 <ash_worksi>	sometimes I want to write a blob of crap to sed or awk. I use heredocs for this, but it pollutes the command history; so I thought of just using stdin, (eg `awk '1' -`) but the result will interweave lines because it doesn't wait for me to finish (eg with ^D)
Mar 04 16:16:41 <ash_worksi>	is there a way to get a program to wait for my to finish? ... like what happens when you do `foo="$(cat)"`
Mar 04 16:19:52 <ash_worksi>	I guess `echo "$(cat)" | awk`
Mar 04 16:19:53 <JanC>	'sponge' from moreutils ?
Mar 04 16:19:58 <greycat>	if you simply do    foo; bar   bar won't run until foo exits
Mar 04 16:20:23 <ash_worksi>	oh
Mar 04 16:21:35 <JanC>	https://manpages.org/sponge
Mar 04 16:21:59 <greycat>	I would avoid sponge.  It's not safe (data can be lost).
Mar 04 16:23:13 <greycat>	!sponge
Mar 04 16:23:13 <greybot>	sponge() ( tmp=$(mktemp) && cat > "$tmp" && cat -- "$tmp" > "$1" && rm -- "$tmp"; ) # read and write the same file in a pipeline: grep -v '^#' file | sponge file
Mar 04 16:24:27 <JanC>	lost in what way?
Mar 04 16:24:35 <ash_worksi>	greycat: hmm. in `awk; echo`, awk waits, but it still processes each line after hitting enter so you get an AA'BB' effect if you write lines interactively
Mar 04 16:25:20 <KillerWasp>	JanC: maybe he want write a big documentation and don't exist Ctrl+S
Mar 04 16:25:32 <greycat>	People usually want to do something like the man page's example (sed '...' file | grep '...' | sponge [-a] file) but this will truncate the file before writing to it.  If the system crashes during that write, the original data's gone.
Mar 04 16:25:59 <JanC>	for anything that isn't throwaway you would just use a real file, no?
Mar 04 16:26:25 <greycat>	You want to write to a new/temp file and only replace the original once the writing is done.
Mar 04 16:26:41 <greycat>	ash_worksi: I have no idea what you're doing.
Mar 04 16:26:46 <JanC>	this would be writing to stdout
Mar 04 16:26:54 <JanC>	not a file
Mar 04 16:27:10 <JanC>	if I undestand ash_worksi correctly
Mar 04 16:27:25 <KillerWasp>	sponge() ( cat > "$1.temp" && cat -- "$1.temp" > "$1" && rm -- "$1.temp"; )
Mar 04 16:28:06 <KillerWasp>	now is more secure, not Ctrl+S, it's always saved.
Mar 04 16:29:10 <ash_worksi>	JanC: that is correct and the input is not a file, it just my fingers... or pasting
Mar 04 16:29:45 <JanC>	but ash_worksi wants something like: sponge | grep foo
Mar 04 16:30:12 <ash_worksi>	In this particular case, I wanted to add few lines of spacing to my paste.
Mar 04 16:30:13 <JanC>	well, with sed or awk instead of grep  :)
Mar 04 16:30:35 <greycat>	I can't tell what they want at all.  Is it something like "I type a command and it takes a while to run, which catches me by surprise, because I'm already typing the next command, and now the output of the first command and my typing of the second command are all jumbled"?
Mar 04 16:31:37 <JanC>	yes, that's what ash_worksi mentioned: "but the result will interweave lines because it doesn't wait for me to finish"
Mar 04 16:32:02 <JanC>	they mean "interweave input & output", I suppose
Mar 04 16:32:21 <greycat>	you think they're running an *interactive* command?
Mar 04 16:32:26 <JanC>	yes
Mar 04 16:32:35 <ash_worksi>	yes to all of that
Mar 04 16:32:51 <JanC>	based on "but it pollutes the command history"
Mar 04 16:33:04 <greycat>	... I'm totally lost.
Mar 04 16:33:08 <Soliton>	you could disable the terminal echo.
Mar 04 16:33:09 <JanC>	that would not happen in a script...
Mar 04 16:33:33 <JanC>	they want to see input & output, I'm sure
Mar 04 16:36:34 <JanC>	ash_worksi: when this is just text from the "clipboard" (without manual editing & where you don't need to see the source), another option might be to use a utility that reads data directly from there instead of pasting it...
Mar 04 16:39:01 <ash_worksi>	JanC: the copied source is an interactive docker container that doesn't have access to the awk script; I could add it, but it's torn down frequently enough to be a nusance and infrequent enough not to added it to a new image
Mar 04 16:40:11 <Soliton>	pretty sure they mean  xclip | awk  or similar.
Mar 04 16:40:50 <ash_worksi>	oh
Mar 04 16:42:15 <ash_worksi>	I'm surprised greycat gave me the time of day on that question. I figured they'd think, "whatever they're trying to do is too stupid for me to engage"
Mar 04 16:42:54 <ash_worksi>	they must be in a pretty generous mood.
Mar 04 16:45:56 <JanC>	xclip only works for X11, on wayland you'd need wl-paste or something like that I think
Mar 04 16:46:50 <JanC>	or an appropriate clipboard tool for whatever else your system uses  :)
Mar 04 16:54:26 <ash_worksi>	thanks for the help, and also interpretation JanC
Mar 04 17:30:49 <RhineDevil>	Do I remember uncorrectly or there was a placeholder technique for config files where you placed a placeholder and then you could substitute it with a variable before echoing it?
Mar 04 17:30:59 <RhineDevil>	Without sourcing of course
Mar 04 17:31:18 <Soliton>	!template
Mar 04 17:31:18 <greybot>	http://mywiki.wooledge.org/TemplateFiles
Mar 04 17:33:39 <Soliton>	if you're blindly injecting into shell code that is not a good idea of course.
Mar 04 17:43:33 <ash_worksi>	RhineDevil: nginx containers use `envsubst`
Mar 04 17:44:23 <ash_worksi>	I just realized that's on that page Soliton linked anyway
Mar 04 18:28:30 <luva>	Hello, I want to write a bash script that does a backup. In that bash script, I want to just for every DNS lookup use a specific nameserver, since it needs to use a private one, without setting one in the OS. Can someone help me on how to do it?
Mar 04 18:31:41 <Soliton>	sounds like you need to check the documentation of the tool that does the lookup on how to specify the server.
Mar 04 18:33:06 <luva>	well I cant change the host OS Soliton
Mar 04 18:33:21 <luva>	host DNS*
Mar 04 18:34:00 <lopid>	`man dig`
Mar 04 19:26:56 <greycat>	luva: some DNS lookup programs have a way to specify a server; some do not.  Find one that does, that you can use, and then do whatever it takes to specify the server.  E.g. with dig, you use @ip.add.res.ss.  With some others it'll be a mandatory or optional argument.
Mar 04 20:13:25 <bent_fingers>	Grymoires sed tutorial shows this example: sed s/day/night/ <old >new
Mar 04 20:13:47 <bent_fingers>	And says for unix beginners to try this one: sed s/day/night/ old >new
Mar 04 20:14:02 <bent_fingers>	Why the second for beginners?
Mar 04 20:14:26 <greycat>	Most likely they're trying to get you to think about those two commands, and understand how they differ, if at all.
Mar 04 20:15:33 <greycat>	It's equivalent to comparing   cat file1   and  cat <file1
Mar 04 20:17:16 <emanuele6>	meow
Mar 04 20:20:59 <Liver_K>	Is there any difference between ${name:-} and ${name}?
Mar 04 20:21:12 <greycat>	probably when set -u is in effect
Mar 04 20:21:18 <phy1729>	If set -u explodes
Mar 04 20:24:24 <bent_fingers>	one has sed read from stdin, the other from an argument/positional parameter
Mar 04 20:25:03 <bent_fingers>	What difference does it make?
Mar 04 20:27:12 <phy1729>	If it's seekable, what error messages say, where in the command it can go
Mar 04 20:27:14 <bent_fingers>	I suppose it has something to do with bragging rights
Mar 04 20:28:50 <bent_fingers>	Seekable? Never heard of it. Must be why I don't have any pull requests to respond to
Mar 04 20:29:17 <greycat>	I don't think sed cares about seekability, but other commands might.
Mar 04 20:29:36 <phy1729>	iirc diff generally does
Mar 04 20:29:58 <greycat>	diff <() <() works, though
Mar 04 20:30:24 <phy1729>	Does it? I though I had to use diff =() =()   (zshism)
Mar 04 20:30:40 <phy1729>	Maybe GNU diff is fancier
Mar 04 20:31:39 <bent_fingers>	Join us in GNU. We enjoy awkard acronyms.
**** BEGIN LOGGING AT Tue Mar  5 07:39:51 2024

Mar 05 07:39:50 *	Now talking on #bash
Mar 05 07:39:50 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 05 07:39:50 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 05 12:04:34 <dionys>	[_]ↄ ... cheers
Mar 05 12:12:49 <Artfaith>	c[▅]
Mar 05 12:15:47 <emanuele6>	!pizza
Mar 05 12:17:18 <ano>	!gastritis
Mar 05 13:57:03 <nvz>	heh
Mar 05 13:57:32 *	nvz looks that up
Mar 05 13:59:12 <nvz>	na.. not gastritis.. but I do seem to have somethin goin on
Mar 05 14:02:14 <ruvik>	Hello guys
Mar 05 14:02:38 <nvz>	no guys here.. just us chickens
Mar 05 14:03:15 <nvz>	right scooby?
Mar 05 14:07:03 <emanuele6>	https://www.youtube.com/watch?v=miomuSGoPzI
Mar 05 14:28:35 <depesz>	hi. given such input (array of strings): ns=( "m 1" "m 2" "s 1" "b 1" ) - what would be the sanest way to get number of elements that start with "m " ?
Mar 05 14:28:48 <depesz>	I can grep|wc -l, but it doesn't look sane.
Mar 05 14:31:27 <Artfaith>	depesz, do you want with loop or not?
Mar 05 14:31:49 <depesz>	ideally simple one-liner. but I'll take anything.
Mar 05 14:32:06 <depesz>	currently my "best" approach is: printf '%s\n' "${ns[@]}" | grep -c "^m "
Mar 05 14:32:40 <depesz>	only one execve, and no interpreted loops. but i somehow feel that there should be better way…
Mar 05 14:37:37 <Artfaith>	# declare ns=( "m 1" "m 2" "s 1" "b 1" ); declare el r=(); for el in "${ns[@]}"; do if [[ "$el" =~ ^m ]]; then r+=( "${el//[A-Za-z +]/}" ); fi; done; declare -p -- r;
Mar 05 14:37:40 <shbot>	Artfaith: declare -a r=([0]="1" [1]="2")
Mar 05 14:37:40 <Soliton>	unless you have loop phobia you'd just loop over the element and count.
Mar 05 14:39:05 <Artfaith>	`+` in the regex is redundant though.
Mar 05 14:39:06 <Soliton>	that grep approach only works if the elements contain no newline, btw.
Mar 05 14:39:29 <depesz>	they don't. the original value comes from mapfile-t
Mar 05 14:40:25 <Soliton>	you can use mapfile to handle NUL delimited input.
Mar 05 14:40:31 <depesz>	sorry, not sure what the r+= does. you are extracting some value form the ns elements? sorry. it was meant to *count* the elements, not check their "appendages" :)
Mar 05 14:40:41 <depesz>	Soliton: i know, but not in this case :)
Mar 05 14:40:50 <geirha>	you could do a while read loop instead of mapfile and do the count at the same time
Mar 05 14:41:04 <Soliton>	# ns=( "m 1" "m 2" "s 1" "b 1" ); for n in "${ns[@]}"; do [[ $n = m\ * ]] && count=$((count + 1)); done; echo "$count"
Mar 05 14:41:06 <shbot>	Soliton: 2
Mar 05 14:41:15 <depesz>	i could, but then I would have to rebuild the array anyway, as it is needed in array form later on.
Mar 05 14:41:38 <geirha>	count in addition to populating the array ...
Mar 05 14:41:47 <depesz>	Soliton: any reason to not use (( count++ )) ?
Mar 05 14:42:03 <Soliton>	not really.
Mar 05 14:42:56 <geirha>	while IFS= read -r line ; do ns+=( "$line" ) ; [[ $line = m\ * ]] && (( mcount++ )) ; done
Mar 05 14:44:28 <depesz>	yeah. that looks ok.
Mar 05 14:44:36 <depesz>	not sure why IFS=, though
Mar 05 14:44:57 <geirha>	without it it will trim leading and trailing whitespace
Mar 05 14:45:23 <emanuele6>	the BEST way is    IFS= eval printf -v _ '"${arr[*]/*/%c}%n"' '"${arr[@]%%[!m]*}"' mcount    there is no competition
Mar 05 14:45:47 <Artfaith>	The best they may not understand.
Mar 05 14:46:04 <Artfaith>	The above will allow to move on, and get into this part later.
Mar 05 14:46:27 <Artfaith>	Though, I see "EVAL"!
Mar 05 14:46:34 <Artfaith>	Eval is Evil!
Mar 05 14:47:23 <Artfaith>	Even if we know that Bash being REPL is eval itself ^^"
Mar 05 14:51:13 <emanuele6>	hmm, something is wrong
Mar 05 14:51:48 <emanuele6>	# arr=( mauris cursus mattis molestie a. elementum eu facilisis sed odio morbi quis commodo odio aenean. sociis natoque penatibus et magnis dis parturient. fermentum odio eu feugiat pretium nibh. eu sem integer vitae justo eget magna fermentum. ); (IFS= eval set -x\; printf -v m '"${arr[*]/*/%c}%n"' '"${arr[@]%%[!m]*}"' mcount)
Mar 05 14:51:49 <shbot>	emanuele6: ++ printf -v m %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%n m '' m m '' '' '' '' '' '' m '' '' '' '' '' '' '' '' m '' '' '' '' '' '' '' '' '' '' '' '' '' '' m '' mcount
Mar 05 14:51:54 <emanuele6>	that looks correct, but
Mar 05 14:52:10 <emanuele6>	# arr=( mauris cursus mattis molestie a. elementum eu facilisis sed odio morbi quis commodo odio aenean. sociis natoque penatibus et magnis dis parturient. fermentum odio eu feugiat pretium nibh. eu sem integer vitae justo eget magna fermentum. ); IFS= eval printf -v m '"${arr[*]/*/%c}%n"' '"${arr[@]%%[!m]*}"' mcount;  declare -p m mcount
Mar 05 14:52:12 <shbot>	emanuele6: declare -- m="m"
Mar 05 14:52:12 <shbot>	emanuele6: declare -- mcount="36"
Mar 05 14:52:21 <emanuele6>	m only contains one m, and mcount in 36
Mar 05 14:52:39 <Artfaith>	depesz, the `+=` adds to the array.
Mar 05 14:52:48 <Artfaith>	++ adds to the integer.
Mar 05 14:53:09 <emanuele6>	# arr=( mauris cursus mattis molestie a. elementum eu facilisis sed odio morbi quis commodo odio aenean. sociis natoque penatibus et magnis dis parturient. fermentum odio eu feugiat pretium nibh. eu sem integer vitae justo eget magna fermentum. ); IFS= eval printf -v m '"${arr[*]/*/%.1s}%n"' '"${arr[@]%%[!m]*}"' mcount;  declare -p m mcount
Mar 05 14:53:10 <shbot>	emanuele6: declare -- m="mmmmmm"
Mar 05 14:53:10 <shbot>	emanuele6: declare -- mcount="6"
Mar 05 14:53:54 <Artfaith>	As in the most languages.
Mar 05 14:53:57 <emanuele6>	i think that is just a bug in bash; with printf's %c specifier and %n; it always assumes %c prints a byte even when it does not
Mar 05 14:54:13 <emanuele6>	%.1s works correctly
Mar 05 14:54:39 <emanuele6>	i am not sure why m is set to m when using -v m and %c, but that is probably also a bug
Mar 05 14:54:56 <emanuele6>	%c ''  messes up some internal count
Mar 05 14:57:26 <emanuele6>	# arr=( mauris cursus mattis molestie a. elementum eu facilisis sed odio morbi quis commodo odio aenean. sociis natoque penatibus et magnis dis parturient. fermentum odio eu feugiat pretium nibh. eu sem integer vitae justo eget magna fermentum. ); IFS= eval printf '"${arr[*]/*/%c}%n"' '"${arr[@]%%[!m]*}"' mcount;  declare -p mcount
Mar 05 14:57:27 <shbot>	emanuele6: mmmmmmdeclare -- mcount="36"
Mar 05 14:57:33 <emanuele6>	without -v the output is correct
Mar 05 14:57:40 <emanuele6>	but mcount is still wrong
Mar 05 14:59:58 <ano>	what does "${!var[@]*}" mean?
Mar 05 15:00:05 <emanuele6>	# dash -c 'printf %c ""' | od -An -tc
Mar 05 15:00:07 <shbot>	emanuele6:   \0
Mar 05 15:00:09 <emanuele6>	# ksh -c 'printf %c ""' | od -An -tc
Mar 05 15:00:11 <shbot>	emanuele6:   \0
Mar 05 15:00:17 <emanuele6>	# printf %c '' | od -An -tc
Mar 05 15:00:19 <shbot>	emanuele6:   \0
Mar 05 15:00:19 <emanuele6>	wow
Mar 05 15:00:40 <emanuele6>	so %c ''  prints a NUL, it is not the same as %.1s :o
Mar 05 15:00:45 <emanuele6>	i didn't know that
Mar 05 15:00:51 <emanuele6>	printf %c in sh truly sucks
Mar 05 15:01:12 <emanuele6>	ano: it expands to the variable names that start with "var"
Mar 05 15:02:00 <ano>	# var2=var1; var1=var2; printf {%s} "${!var[@]*}"
Mar 05 15:02:00 <emanuele6>	oh, i misread that as ${!var@} sorry
Mar 05 15:02:02 <shbot>	ano: {}
Mar 05 15:02:16 <emanuele6>	there var is an array
Mar 05 15:02:22 <emanuele6>	it concatenates the values of var by space
Mar 05 15:02:44 <emanuele6>	# var=(var) var1= var2=; printf {%s} "${!var[@]*}"
Mar 05 15:02:46 <shbot>	emanuele6: {}
Mar 05 15:02:52 <emanuele6>	then i am not sure what it does
Mar 05 15:03:00 <emanuele6>	# var=(var) var1= var2=; printf {%s} "${!var[1]*}"
Mar 05 15:03:02 <shbot>	emanuele6: {}
Mar 05 15:03:14 <emanuele6>	i don't know; maybe it is not even that
Mar 05 15:03:37 <emanuele6>	maybe it is trying to expand to variables that start with var[@] that cannot exist
Mar 05 15:04:51 <emanuele6>	yes, that is what it does
Mar 05 15:04:53 <Soliton>	given that it only works with @ or * appended i'd guess it is a parser quirk because of the variable name prefix matching.
Mar 05 15:08:45 <emanuele6>	i guess you can use it to write inline comments :)
Mar 05 15:09:15 <emanuele6>	$ ./bash -c 'var=(var) var1= var2=; printf {%s}\\n "${!var[1]*}"'
Mar 05 15:09:17 <emanuele6>	emanuele6debug: all_variables_matching_prefix("var[1]") was called.
Mar 05 15:09:19 <emanuele6>	{}
Mar 05 15:09:29 <emanuele6>	so yeah, that is what it is doing; confirmed
Mar 05 15:10:00 <emanuele6>	# echo hi ${!a[@]i am a comment he he he he*} hello
Mar 05 15:10:02 <shbot>	emanuele6: hi hello
Mar 05 15:10:58 <emanuele6>	!learn %c #redirect printf%c
Mar 05 15:10:58 <greybot>	OK, emanuele6
Mar 05 15:15:43 <emanuele6>	!learn printf%c The `%c' format specifier in sh's printf does not print the character of the ASCII code corresponding to its number argument as it does for other languages' printf; it takes a string argument, and prints its first byte; it is similar to `%.1s', except that if the argument is an empty string, it will print a NUL character (\0) instead of printing nothing.
Mar 05 15:15:43 <greybot>	OK, emanuele6
Mar 05 15:15:47 <emanuele6>	>:(
Mar 05 15:20:04 <emanuele6>	(POSIX) The argument to the c conversion specifier can be a string containing zero or more bytes. If it contains one or more bytes, the first byte shall be written and any additional bytes shall be ignored. If the argument is an empty string, it is unspecified whether nothing is written or a null byte is written.
Mar 05 15:22:29 <emanuele6>	!forget printf%c
Mar 05 15:22:30 <greybot>	OK, emanuele6
Mar 05 15:23:40 <emanuele6>	!learn printf%c The %c format specifier in sh's printf does not print the character of the ASCII code corresponding to its number argument as it does for other languages' printf; it takes a string argument, and prints its first byte; it is similar to %.1s, except that its behaviour is unspecified if the argument is an empty string (in bash, it prints a NUL character instead of printing nothing.)
Mar 05 15:23:40 <greybot>	OK, emanuele6
Mar 05 15:23:49 <emanuele6>	so printf %c in sh sucks even more
Mar 05 15:24:12 <emanuele6>	at least you can use it in bash as a golfed   printf \\0 :   printf %c   is one byte shorter
Mar 05 16:22:19 <depesz>	this is *not* bash question, but you are smart, maybe you will be able to help - on one machine `man grep` (or other man pages) doesn't show colors. I checked, and both this box, and another (that does show color) have the same pager, pager options, and LESS_TERMCAP_.. env variables.
Mar 05 16:23:15 <depesz>	https://dpaste.org/aftGn
Mar 05 16:23:49 <lopid>	have you tried #linux?
Mar 05 16:23:58 <depesz>	i didn't. thanks.
Mar 05 16:27:16 <Soliton>	see what  tput colors  outputs.
Mar 05 16:29:19 <depesz>	256 in both cases.
Mar 05 16:50:55 <Earnestly>	https://github.com/landley/toybox/commit/a2419ad52d489bf1a84a9f3aa73afb351642c765
Mar 05 16:57:28 <emanuele6>	https
Mar 05 17:19:07 <depesz>	solved. in case you'd stumble upon it - it seems to be broken by groff 1.23. fix is to either "export MANROFFOPT=-c" or "export GROFF_NO_SGR=1"
Mar 05 17:30:00 <Earnestly>	depesz: Is the goal to disable colours?
Mar 05 17:30:11 <depesz>	Earnestly: enable them. they got disabled by groff upgrade
Mar 05 17:30:46 <Earnestly>	depesz: I have 1.23 and -c is to "start with color output disabled"
Mar 05 17:31:00 <depesz>	Earnestly: where do you see that ?
Mar 05 17:31:05 <Earnestly>	In the manual
Mar 05 17:31:10 <depesz>	manual to what?
Mar 05 17:31:25 <depesz>	please note that -c is *not* option to man
Mar 05 17:31:29 <Earnestly>	depesz: groff, but it appears to be related to grotty
Mar 05 17:31:34 <Earnestly>	-c     Use grotty's legacy output format (see subsection “Legacy output format” above).  SGR and OSC escape sequences are not emitted.
Mar 05 17:31:47 <depesz>	exactly. it changes how color is outputted.
Mar 05 17:31:47 <Earnestly>	This also appears to exclude them
Mar 05 17:31:52 <depesz>	not for me.
Mar 05 17:32:01 <Earnestly>	depesz: Is this on a linux tty?
Mar 05 17:32:04 <depesz>	for me setting either of these things, or both of them, brings back color to manpages
Mar 05 17:32:17 <depesz>	linux, yes, in various terminal emulators.
Mar 05 17:33:06 <Earnestly>	NO_SGR: If set, grotty's legacy output format is used just as if the -c option were specified; see subsection “Legacy output format” above.
Mar 05 17:34:42 <depesz>	not sure what that has to do with it. are you saying that what I said is not true? well, it seems to be rather obscure, but known, bug: https://unix.stackexchange.com/a/771560/70436
Mar 05 17:34:56 <Earnestly>	depesz: Yeah it appears specific to SGR sequences, so bold and underline, etc. works but obviously it's expecting something different for colour
Mar 05 17:36:04 <Earnestly>	I wonder if there's a new way
Mar 05 17:38:11 <depesz>	if you'll find another, i'll gladly read about it.
Mar 05 17:38:29 <depesz>	you will need to find computer with broken man/groff/less/term* first, though :)
Mar 05 17:42:59 <Earnestly>	depesz: Seems like they just removed sgr (the command specifically) but provide it via -c and NO_SGR, but it's not very clear
Mar 05 17:43:22 <Earnestly>	provide "it", not being the command but "remain supported"
Mar 05 17:43:52 <Earnestly>	depesz: It seems a bit odd that "NO"_SGR would enable SGR
**** BEGIN LOGGING AT Tue Mar  5 18:13:43 2024

Mar 05 18:13:42 *	Now talking on #bash
Mar 05 18:13:42 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 05 18:13:42 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 05 18:15:16 <FakuVe>	I am changing it to plaintext
Mar 05 18:15:23 <FakuVe>	But actually it should be the same
Mar 05 18:15:28 <FakuVe>	You are right
Mar 05 18:15:37 <FakuVe>	no need to pass it to plaintext
Mar 05 18:17:49 <FakuVe>	it is taking ages though
Mar 05 18:17:55 <FakuVe>	Maybe my potato computer
Mar 05 18:17:59 <Earnestly>	FakuVe: Yeah it would
Mar 05 18:18:05 <FakuVe>	Also that is operating in an sdcard
Mar 05 18:18:11 <FakuVe>	:D
Mar 05 18:18:43 <Earnestly>	FakuVe: A nested for-loop like this is alone O^2 (quadratic), but that's probably unavoidable. But you're also forking quite a lot of stuff in this fairly fast, nested, loop
Mar 05 18:18:46 <FakuVe>	definitely rsync is not written this way "D
Mar 05 18:19:07 <Earnestly>	FakuVe: Here's a basic rewrite: https://0x0.st/H7pJ.txt (find of -maxdepth 1 means you probably want a for loop)
Mar 05 18:19:22 <Earnestly>	FakuVe: Sorry, <= should be > 1
Mar 05 18:19:40 <Earnestly>	Although that doesn't really need to exist
Mar 05 18:20:06 <Earnestly>	Because if the array has 1 element, then your file = fileb will always succeed
Mar 05 18:20:40 <Earnestly>	FakuVe: Instead of forking pup for *every* fileb and file comparison, you can fork it once for just file and then only fork pup for fileb
Mar 05 18:21:45 <FakuVe>	Thats looking nice
Mar 05 18:21:51 <Earnestly>	FakuVe: Another way to do this, which is what I'd do, is generate a list of all files and their titles. Then sort that list and extracting the duplicates
Mar 05 18:21:58 <FakuVe>	does pup work without quoting
Mar 05 18:22:23 <Earnestly>	FakuVe: What do you mean?
Mar 05 18:22:31 <Earnestly>	For the .css-selector?
Mar 05 18:23:23 <Earnestly>	You only need to quote if there's something that would undergo glob file expansions, quoting is used to suppress the meaning the shell gives to strings. If there's no shell specific syntax then there's no need to quote
Mar 05 18:23:34 <Earnestly>	literal quoting anyway
Mar 05 18:23:46 <FakuVe>	yeah let me try yours
Mar 05 18:24:20 <Earnestly>	FakuVe: You also don't need -name '*' that's the default behaviour
Mar 05 18:24:22 <FakuVe>	Mine may be the worse algorythm ever. It took 10 mins to find the second ocurrence
Mar 05 18:24:34 <FakuVe>	alright
Mar 05 18:25:53 <Earnestly>	FakuVe: It's mostly bad because of the amount of forking you do which is particularly slow. Yes it's also quadratic but unless you have thousands of files that shouldn't be very noticible
Mar 05 18:26:31 <FakuVe>	I think its also my computer
Mar 05 18:26:40 <FakuVe>	But yours didnt give any output
Mar 05 18:29:27 <FakuVe>	yeah if files > 1  , instead
Mar 05 18:29:34 <FakuVe>	instead of <= 1
Mar 05 18:31:01 <Earnestly>	FakuVe: Yeah I suggested that correction earlier
Mar 05 18:31:51 <Earnestly>	FakuVe: The other problem is you call pup on fileb way more times than necessary
Mar 05 18:34:32 <FakuVe>	it has got an issue
Mar 05 18:34:38 <FakuVe>	once it removes a file
Mar 05 18:35:00 <FakuVe>	It will iterate through that file afterwards  , and will have a warning of file doesnt exists
Mar 05 18:35:07 <FakuVe>	it doesnt matter though
Mar 05 18:35:37 <Earnestly>	If you have files a b c, then looping a a b c, b a b c, c a b c will call pup on a b c 3 times more than necessary. Also as your loops are complete file lists, removing one file will fail when it attempts to access it if it already existed in the for loop's "list"
Mar 05 18:36:15 <FakuVe>	yeah , whatever
Mar 05 18:36:23 <FakuVe>	It works , thats ok for me
Mar 05 18:36:29 <FakuVe>	good to learn how to do it properly
Mar 05 18:36:37 <FakuVe>	And I appreciate so much your help
Mar 05 18:36:49 <FakuVe>	For this case is more than fine Earnestly thank you
Mar 05 18:37:57 <Lynx->	Can anyone advise on an especially CPU-friendly way to prepend a word to line outputs of a binary file and pass the result onto a FIFO without buffering more than each line?
Mar 05 18:38:52 <Lynx->	right now I simply do while read line; printf term line >; done, but I'm hoping there is a way to avoid the byte-by-byte read penalty that that incurs
Mar 05 18:42:38 <Lynx->	And bonus would be to use bash builtins
Mar 05 18:42:41 <FakuVe>	it was the sd card , I used it in my internal memory and like 8 times faster at least
Mar 05 18:42:54 <twkm>	i'd likely use awk or sed, along with unbuffer.
Mar 05 18:43:21 <FakuVe>	Yeah cheers
Mar 05 18:44:37 <FakuVe>	I am going for a run will check this back , cheers all
Mar 05 18:45:59 <Lynx->	twkm thanks. Is the only way in bash to just use a byte-by-byte read? No clever trick to avoid that?
Mar 05 18:46:18 <Earnestly>	FakuVe: Consider: https://0x0.st/H7pk.txt
Mar 05 18:51:10 <Earnestly>	FakuVe: Or https://0x0.st/H7pF.txt
Mar 05 18:52:23 <Earnestly>	Lynx-: read will read(2) one byte at a time if the input is a pipe. It buffers if the input is a file. Bash's read has -N if you want to do buffered reads yourself
Mar 05 18:53:58 <Earnestly>	Lynx-: Which then means you'll need to pay careful attention to the exit status of read as to whether the buffer was filled, wasn't filled or was a read error or read timeout.
Mar 05 18:56:05 <Lynx->	Earnestly thanks. Is the output from binaries like ping typically such that it outputs line by line such that if you read -t 0 the exit status will show you data is available after complete line has been written?
Mar 05 18:56:44 <Earnestly>	Lynx-: I would use awk
Mar 05 18:57:48 <Earnestly>	Don't try to do read -t 0 hacks for this, and no. As I write, read -N lets you do buffered reads, but like C, you just have to manage the input, i.e. detecting record separation and building variables until you do
**** BEGIN LOGGING AT Tue Mar  5 19:05:31 2024

Mar 05 19:05:30 *	Now talking on #bash
Mar 05 19:05:30 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 05 19:05:30 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 05 19:09:57 <Lynx->	Earnestly once the data has been read in with say -N 512, what's the most efficient way to split up the lines without byte-by-byte read then at that point? So far I have this: https://pastebin.com/raw/Y7gwst09
Mar 05 19:11:05 <Lynx->	echo $line shows indeed how you get the nice 512 bytes at a time, but then I'm wondering how to avoid then having to end up reading every character to work out the positions of the new lines.
Mar 05 19:12:53 <Lynx->	ultimately I'd like to just print out the complete lines as they are completed, without requiring a byte-by-byte read on the read-in 512 byte chunks, if this is at all possible
Mar 05 19:15:38 <Lynx->	ah, I can just printf "${line}" .. I see.
Mar 05 19:16:44 <Lynx->	intereting - strace shows: "read(10, "64 bytes from localhost (::1): i"..., 155) = 64" reads
Mar 05 19:17:16 <Lynx->	do I read that correctly that when -N 512 is specified it is resulting in 64 byte reads?
Mar 05 19:18:05 <Lynx->	here is the strace: https://pastebin.com/raw/eUbcRhyJ
**** BEGIN LOGGING AT Tue Mar  5 20:41:19 2024

Mar 05 20:41:19 *	Now talking on #bash
Mar 05 20:41:19 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 05 20:41:19 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
**** BEGIN LOGGING AT Tue Mar  5 22:33:03 2024

Mar 05 22:33:02 *	Now talking on #bash
Mar 05 22:33:02 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 05 22:33:02 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 05 22:49:12 <FakuVe>	Earnestly: those two lastones work fast , but they do delete all files
Mar 05 22:49:14 <FakuVe>	https://0x0.st/H7pF.txt
Mar 05 22:51:59 <Lynx->	So -N 512 results in several read calls like: <<<read(10, "64 bytes from localhost (::1): i"..., 475) = 64>>> - what governs the number 64?
Mar 05 22:53:15 <greycat>	That's how many you got.  I'm more curious about the 475, which is how many were requested.
Mar 05 22:57:37 <emanuele6>	ping outputs a line every few seconds; so that already read 37 bytes from the previous line (or lines), and only requests 475 this time
Mar 05 22:58:17 <emanuele6>	with -N512, read won't return until bash has put 512 characters on the variable, or EOF is reached, so it just keeps collecting
Mar 05 22:58:37 <greycat>	yeah, makes sense if they didn't show us the first line
Mar 05 22:58:43 <Lynx->	so the chunk size of collection is dictated by the manner in which the binary outputs the chunks?
Mar 05 22:59:04 <greycat>	64 is how many bytes you *actually got*.  It's how many were *there*.
Mar 05 22:59:17 <Lynx->	greycat here: https://pastebin.com/raw/eUbcRhyJ
Mar 05 23:00:51 <Lynx->	isn't it 64 read and 475 of the 512 remaining
Mar 05 23:00:53 <Nintendo>	Bitching about jq a few weeks ago paid off, because today I used “// empty”, and it made me happy.
Mar 05 23:01:07 <Lynx->	you see the number decreasing with each line
Mar 05 23:01:48 <Lynx->	and then: rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0; rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
Mar 05 23:03:53 <nphard>	what's the difference between alteranet uses of '>'?
Mar 05 23:04:02 <nphard>	cut file > nu_file
Mar 05 23:04:20 <nphard>	cut -f1 < file > nu_file
Mar 05 23:04:24 <nphard>	both do the same
Mar 05 23:04:43 <nphard>	even the difference between 'cut -f1 file' and cut -f1 < file'
Mar 05 23:05:08 <emanuele6>	if file is -,  cut -f1 -  reads from stdin; while  cut -f1 < -  reads from a file named - in the current directory
Mar 05 23:05:33 <greycat>	In the last line, the first command, cut opens the file itself, and therefore it knows the file name and can report it in error messages and so on.  In the second command, bash opens the file and cut only receives the already-opened file descriptor.
Mar 05 23:07:46 <greycat>	In the redirection command, if the file *can't* be opened, cut never even gets executed.  Bash tries to open it, fails, gives an error message, and never calls cut.
Mar 05 23:07:56 <nphard>	the next logical question begged is: which one is better?
Mar 05 23:08:06 <Lynx->	what's the most efficient way to split up a string including newline characters into an array with elements having those separate lines from string? Is there a way to do that without byte-by-byte read?
Mar 05 23:08:18 <greycat>	Lynx-: mapfile / readarray
Mar 05 23:08:41 <Lynx->	ah, yes
Mar 05 23:15:19 <xx>	# echo abc `#def` ghi
Mar 05 23:15:21 <shbot>	xx: abc ghi
Mar 05 23:15:31 <xx>	# echo abc "$(#def)" ghi
Mar 05 23:15:38 <shbot>	xx: Missing terminating quote, bracket or keyword
Mar 05 23:15:44 <xx>	why?
Mar 05 23:16:49 <arraybolt3>	# echo abc \"\$(#def)\" ghi
Mar 05 23:16:51 <shbot>	arraybolt3: bash: syntax error near unexpected token `('
Mar 05 23:17:35 <xx>	# echo abc "$(\#def)" ghi
Mar 05 23:17:35 <shbot>	xx: no output
Mar 05 23:27:29 <larryv>	xx: the parser probably closes ` by simply looking for the next unquoted `. the contents of $(...) are parsed more rigorously
**** BEGIN LOGGING AT Wed Mar  6 01:51:37 2024

Mar 06 01:51:37 *	Now talking on #bash
Mar 06 01:51:37 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 06 01:51:37 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 06 01:51:38 <puchu>	fifi
Mar 06 01:51:59 <puchu>	$PROXY_PREFIX cmd
Mar 06 01:52:19 <puchu>	this doesnt seem to work, how i make this work?
Mar 06 01:52:36 <nightstrike>	djph: yes
Mar 06 01:52:49 <puchu>	PROXY_PREFIX="http_proxy=http://127.0.0.1:8118 https_proxy=${http_proxy}"
Mar 06 01:52:55 <puchu>	$PROXY_PREFIX cmd
Mar 06 01:52:58 <nightstrike>	tirnanog: ok, I'll keep debugging
Mar 06 01:54:06 <tirnanog>	puchu: a) PROXY_PREFIX=$PROXY_PREFIX cmd or ... b) export PROXY_PREFIX; cmd
Mar 06 01:54:30 <tirnanog>	or c) export it at the same time as assigning
Mar 06 01:55:02 <puchu>	tirnanog: thanks
Mar 06 01:56:01 <larryv>	hm, i assumed puchu was trying to export http{,s}_proxy in a particularly convoluted manner
Mar 06 01:56:13 <tirnanog>	oh yeah.
Mar 06 01:56:19 <tirnanog>	just looked at the value. oh dear.
Mar 06 01:59:01 <tirnanog>	puchu: more like this then: if [[ ${PROXY_ENABLED} -eq 1 ]]; then export http_proxy=http://127.0.0.1:8118; export https_proxy=${http_proxy}; fi
Mar 06 01:59:10 <ormaaj>	I'd create the heredoc after running sudo using the execline heredoc command.
Mar 06 01:59:46 <ormaaj>	"Oh but I can't install anything". hax0r that b0x0r. permission granted.
Mar 06 02:01:09 <tirnanog>	nightstrike: I take it you can't rely on the exit status?
Mar 06 02:01:13 <tirnanog>	(of cmd)
Mar 06 02:03:02 <ormaaj>	I guess technically you can do that anyway using just bash.
Mar 06 02:06:15 <puchu>	tirnanog thanks, i did it exactly like your - like this - :)
Mar 06 02:07:37 <tirnanog>	otherwise, you would have had to issue http_proxy=$http_proxy https_proxy=$http_proxy cmd after assigning. seems simpler just to export to begin with.
Mar 06 02:11:55 <nightstrike>	tirnanog: correct, it's poorly written
Mar 06 02:17:27 <ormaaj>	sudo -- bash +o monitor -O lastpipe -c '{ printf %s "$2" | { shift; { BASH_ENV=/proc/self/fd/${fd} exec -- "$@"; } {fd}<&0 <&"$tty"-; } {tty}<&0' bash bash 'cd /server && source blahblah; shift; unset -v fd BASH_ENV {fd}<&-' arg1 arg2 ...
Mar 06 02:17:52 <nightstrike>	tirnanog: it seems to have almost random return statuses
Mar 06 02:19:31 <ormaaj>	sudo -- bash +o monitor -O lastpipe -c '{ printf %s "$2" | { shift; { BASH_ENV=/proc/self/fd/${fd} exec -- "$@"; } {fd}<&0 <&"$tty"-; } {tty}<&0' bash bash 'cd /server && source blahblah; unset -v fd BASH_ENV {fd}<&-' arg1 arg2 ...
Mar 06 02:19:38 <ormaaj>	shift in wrong place.
Mar 06 02:20:00 <tirnanog>	nightstrike: how awful.
Mar 06 02:21:15 <ormaaj>	If only bash were posix I wouldn't need those extra {}'s
Mar 06 02:24:38 <yuesbeez>	ormaaj: thanks. what would arg1 arg2 be passed to in this case?
Mar 06 02:25:03 <ormaaj>	the exec'd bash shell
Mar 06 02:25:39 <ormaaj>	$1 stores the "heredoc" data. then dump it into a pipe, shift it away, exec remaining args
Mar 06 02:26:16 <ormaaj>	Oh and I have them in the wrong order duh
Mar 06 02:26:39 <ormaaj>	sudo -- bash +o monitor -O lastpipe -c '{ printf %s "$2" | { shift; { BASH_ENV=/proc/self/fd/${fd} exec -- "$@"; } {fd}<&0 <&"$tty"-; } {tty}<&0' bash 'cd /server && source blahblah; unset -v fd BASH_ENV {fd}<&-' bash arg1 arg2 ...
Mar 06 02:26:48 <ormaaj>	the first "bash" is argv[0]
Mar 06 02:27:12 <sybariten>	Is the "bind" command a bash specific thing?
Mar 06 02:27:23 <ormaaj>	sybariten: mostly
Mar 06 02:27:37 <ormaaj>	basically yes. some other shells have different bind command.
Mar 06 02:29:27 <sybariten>	Someone in the fzf channel said that in order to change a key shortcut binding, for a tool called fzf, i would just need to export an env var.  I fail to understand how he meant exactly, if i look into the config today the line which is originally used is    bind -m emacs-standard '"\ec": " \C-b\C-k \C-u`__fzf_cd__`\e\C-e\er\C-m\C-y\C-h\e \C-y\ey\C-x\C-x\C-d"'
Mar 06 02:31:36 <sybariten>	Hm, maybe he meant something else actually. Oh well.
Mar 06 02:32:57 <tirnanog>	the bind builtin is for altering readline(3) bindings, as applied specifically to bash. as concerns environment variables, it's unclear what they meant.
Mar 06 02:33:47 <tirnanog>	it's quite possible that they didn't know either.
Mar 06 02:34:12 <sybariten>	Yep, i think they may have meant what that key binding _does_ , judging from how its worded.... i realize now.
Mar 06 02:34:48 <tirnanog>	the only env vars recognised by fzf itself are FZF_DEFAULT_COMMAND, FZF_DEFAULT_OPS and FZF_API_KEY, according to a brief skim of its manual.
Mar 06 02:34:52 <tirnanog>	OPTS*
Mar 06 02:35:21 <sybariten>	And i think i know which variable to export in that case. But for picking up the key itself, i dont think i should do that, i should probably make a new /usr/share/doc/fzf/examples/key-bindings.bash , modify that and source it from my .bashrc
Mar 06 02:35:32 <ormaaj>	heh i tried it and got an error from my own code
Mar 06 02:35:37 <ormaaj>	libinit: Error: The shell failed to set the (E)UID and re-execing it with the correct values somehow failed to fix it. That should never happen. Not trying again to prevent an exec loop.
Mar 06 02:35:49 <ormaaj>	that branch should never be taken...
Mar 06 02:36:05 <ormaaj>	also I used --norc --noprofile. wtf
Mar 06 02:36:06 <sybariten>	s/"make a new"/"copy"
Mar 06 02:36:11 <tirnanog>	what manner of Lovecraftian horror have you unearthed now.
Mar 06 02:41:46 <ormaaj>	https://bpa.st/raw/2OIA that is "init.bash" which is sourced from .bashrc
Mar 06 02:41:47 <checkbot>	ormaaj: I think the problem is on line 20. Parameter expansions can't start with .. Double check syntax. See 25 issues on https://shellcheck.net/?id=cb89307
Mar 06 02:41:59 <ormaaj>	ah checkbot loves me
Mar 06 02:42:32 <ormaaj>	somehow sudo triggers this, but normally it doesn't, and should never.
Mar 06 02:43:49 <ormaaj>	it means it tried to run `exec -- env UID=correct uid bash`, then tried measuring it in the new shell and it still didn't match. Does sudo have something that blocks overwriting UID somehow?
Mar 06 02:45:39 <ormaaj>	probably not that doesn't seem possible.
Mar 06 02:46:18 <ormaaj>	unless env looks for SUDO being set and env has some misfeature that does that
Mar 06 02:48:59 *	ormaaj stracing...
Mar 06 02:58:39 <ormaaj>	i wonder why sudo is unsetting UID and EUID to begin with. It just unsets them and lets the child fill them in? I never noticed that.
Mar 06 03:00:46 <ormaaj>	hmm lets try my new bash ebuild that doesn't have that stupid SSH define. Maybe it's f'd because gentoo
Mar 06 03:02:36 <ormaaj>	I wouldn't think sudo would trigger that either
Mar 06 03:07:42 <ormaaj>	maybe it is. it shouldn't be forcing my .bashrc to run with --norc
Mar 06 03:45:55 <des_h>	any chance i can read a file from the end backwards (for performance reasons) in either awk or sed?
Mar 06 03:49:51 <tanath>	des_h: `awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }' FILE`
Mar 06 03:50:05 <tanath>	where FILE is your filename
Mar 06 03:51:14 <des_h>	doesn't that still read the whole file from top to bottom before the END block is executed?
Mar 06 03:51:49 <hleneto>	des_h, there's tac.
Mar 06 03:51:59 <tanath>	yeah
Mar 06 03:52:21 <des_h>	i'd like to start reading from the bottom backwards and stop after X < FNR lines (once a condition is met), so that i don't actually read all of the lines
Mar 06 03:53:23 <tanath>	i hadn't paid attn to the performance part since i didn't have context. just saw you wanted to read in reverse and grabbed a method. sorry
Mar 06 03:55:06 <des_h>	is there a reason this way of reading a file is not built into canonical terminal programs?
Mar 06 03:55:49 <larryv>	it's a weird requirement.
Mar 06 03:56:15 <larryv>	and it could only work on regular files, not streams, adding complexity
Mar 06 03:57:06 <des_h>	i have a file which has data appended to it regularly. like a log. i'd like to periodically edit the data in this file, but only check the new lines which i haven't already edited. the new lines would be at the bottom of the file
Mar 06 03:57:39 <tanath>	maybe just `tail -n <number_of_lines_to_read> <file_path> | tac`
Mar 06 03:58:01 <des_h>	problem is i don't know in advance how many new lines have been appended since i last checked
Mar 06 03:58:31 <des_h>	so i need to go backwards until i find a line which i've already edited
Mar 06 03:58:47 <des_h>	and stop
Mar 06 04:01:07 <tanath>	you could use vim and have it remember your last position. when you open the file you're where you left off
Mar 06 04:03:16 <des_h>	hmm or i could just write the last position i checked in another file and retrieve it later. then use sed to print only the lines higher than that position. i think it would still improve performance somewhat
Mar 06 04:30:09 <ormaaj>	There should be a way to detect whether an expression is being evaluated with eval... to define an alias that hooks a function definition by only expanding in the global scope of a sourced file, you can just look at BASH_SOURCE[0], but eval doesn't modify BASH_SOURCE, so eval "$(<file)" will break the alias.
Mar 06 04:42:01 <ormaaj>	You can't unset or overload BASH_SOURCE. An unhackable variable :(
Mar 06 04:58:11 <noobaroo>	I'm really stupid and can't solve a simple math equation
Mar 06 04:59:00 <noobaroo>	How many minutes and seconds is a video that is 579MB and has a bitrate of 4000KB/second?
Mar 06 05:00:18 <nightstrike>	it's roughly 2 and a half minutes
Mar 06 05:00:40 <nightstrike>	579/4
Mar 06 05:00:55 <ormaaj>	don't you have to like extract the video from its container and get the length of the raw stream?
Mar 06 05:01:07 <nightstrike>	well if it's constant bitrate...
Mar 06 05:01:16 <nightstrike>	so like, some old codec
Mar 06 05:01:35 <ormaaj>	oh right that tells you nothing
Mar 06 05:01:36 <ormaaj>	heh
Mar 06 05:01:36 <nightstrike>	or if 4M is the average, it's close enough
Mar 06 05:03:06 <noobaroo>	I got 144.75 but it just seems incorrect, it has to be way longer than 2 minutes
Mar 06 05:03:19 <noobaroo>	It just doesn't seem right.
Mar 06 05:03:22 <noobaroo>	Thanks.
Mar 06 05:03:55 <bent_fingers>	does anyone really use `grep -f pattern_file`?
Mar 06 05:04:08 <nightstrike>	noobaroo: well maybe you use a variable bitrate, and 4M isn't the right average
Mar 06 05:04:32 <ormaaj>	If it's even like half of the screen is a solid blue box for the entire  video, then even the approximation will be way wrong
Mar 06 05:04:40 <nightstrike>	tirnanog: for my question from earlier, maybe I oversimplified... what I'm actually doing is...  cmd <<< "input string" |& grep -q Error
Mar 06 05:04:52 <nightstrike>	Could <<< be affecting the ability of that to work reliably?
Mar 06 05:05:16 <ormaaj>	no
Mar 06 05:05:17 <nightstrike>	noobaroo: just open it in VLC
Mar 06 05:05:54 <ormaaj>	don't use &| though. It sucks.
Mar 06 05:05:59 <ormaaj>	|&
Mar 06 05:06:36 <nightstrike>	why does it suck?
Mar 06 05:06:49 <ormaaj>	(there are no cshisms that don't suck so naturally)
Mar 06 05:07:03 <nightstrike>	I can't even parse that :P
Mar 06 05:07:41 <nightstrike>	and anyway, 2>&1 still doesn't work
Mar 06 05:07:50 <nightstrike>	so the problem is elsewhere
Mar 06 05:08:30 <ormaaj>	portability mainly. |& has completely different meaning in other shells.
Mar 06 05:08:55 <nightstrike>	hm...  works on the command line, not in the script
Mar 06 05:09:00 <ormaaj>	Also it evaluates very strangely
Mar 06 05:09:46 <nightstrike>	strangely?
Mar 06 05:10:59 <ormaaj>	cmd 2>&1 |& # won't do what you think. because it isn't like an alias for an ordinary redirection.
Mar 06 05:13:55 <nightstrike>	hm...  well FWIW, I reverted all my temporary kludges back to my original script, and now it works.  So there must have been something screwed up externally.
Mar 06 05:14:10 <nightstrike>	I think that means it's time for bed.
Mar 06 05:17:17 <nightstrike>	ok, so one last thing.. I got stuck on this for days and then forgot about it...  I need to match a line of an output stream, and then remove the matching line, the one after, and the two previous.  I got `sed -e 'N;/match/!P;D'` to discard the matched line and one prior, but I can't get two prior and can't get the one after
Mar 06 05:18:42 <nightstrike>	I guess I can ask again in #sed
Mar 06 05:50:00 <nightstrike>	lololol... this abomination works...   `cat x | (mapfile -t; for ((i=0; i<${#MAPFILE[@]}; i++)); do if [[ "${MAPFILE[$i]}" == *"match"* ]]; then unset "MAPFILE[$((i-2))]" "MAPFILE[$((i-1))]" "MAPFILE[$i]" "MAPFILE[$((i+1))]"; fi; done; for i in "${MAPFILE[@]}"; do echo "$i"; done)`
Mar 06 05:50:38 <nightstrike>	who said you can't shove that square peg through a concrete wall? :P
Mar 06 05:54:47 <ormaaj>	except uuoc
Mar 06 05:55:00 <nightstrike>	what's that?
Mar 06 05:55:01 <ormaaj>	!uuoc
Mar 06 05:55:01 <greybot>	Useless Use Of Cat (cat foo | grep bar). See https://mywiki.wooledge.org/BashFAQ/119 and http://www.iki.fi/era/unix/award.html#cat
Mar 06 05:55:15 <nightstrike>	lol, that's what you point out from that horror?
Mar 06 05:55:25 <nightstrike>	cat is a standin for some other command I'm running
Mar 06 05:55:53 <ormaaj>	it's not really that wrong
Mar 06 05:56:01 <nightstrike>	dude, it's awful
Mar 06 05:56:04 <ormaaj>	I'd use a read loop instead since you   only really want one line at a time
Mar 06 05:56:26 <nightstrike>	and it's all because `grep -v -C` doesn't DTRT
Mar 06 05:56:52 <ormaaj>	there are other details I guess
Mar 06 05:57:13 <larryv>	could probably be a pretty straightforward awk script
Mar 06 05:57:14 <ormaaj>	array[$((foo))] is pointless for indexed arrays
Mar 06 05:57:27 <nightstrike>	larryv: if I knew awk
Mar 06 05:58:06 <nightstrike>	ormaaj: what do you mean?
Mar 06 05:58:26 <ormaaj>	the index is implicitly evaluated as a math expression
Mar 06 05:58:31 <ormaaj>	unless the array is associative
Mar 06 05:58:46 <nightstrike>	you mean I can do `unset "MAPFILE[i-1]" ?
Mar 06 05:58:52 <ormaaj>	yes
Mar 06 05:59:10 <nightstrike>	...you sure?
Mar 06 05:59:14 <ormaaj>	quite
Mar 06 05:59:17 <nightstrike>	ok, I'll try it
Mar 06 06:00:10 <nightstrike>	well, you're right... but I just lost my ssh connection
Mar 06 06:00:29 <nightstrike>	stupid vpn time limit
Mar 06 06:01:10 <nightstrike>	even MAPFILE[i] doesn't need $i
Mar 06 06:01:11 <nightstrike>	nice
Mar 06 06:01:36 <ormaaj>	MAPFILE[i] is more correct. They aren't quite equivalent.
Mar 06 06:03:06 <ormaaj>	MAPFILE is hideous. just pick a name
Mar 06 06:03:37 <nightstrike>	lol
Mar 06 06:03:50 <nightstrike>	The whole thing is hideous :)
Mar 06 06:04:15 *	JAA picks 'a'.
Mar 06 06:04:17 <nightstrike>	and sadly, while it works in my small test, doesn't even work in the real deal
Mar 06 06:04:50 <nightstrike>	JAA: I worked with a guy that wrote...   `int one_thousand_milliseconds_in_seconds = 1;`
Mar 06 06:04:59 <JAA>	:-)
Mar 06 06:05:30 <nightstrike>	this was on like a $50m project with many layers of QA. That takes balls.
Mar 06 06:05:51 <JAA>	Nice
Mar 06 06:07:13 <nightstrike>	I think he was essentially giving the finger to QA
Mar 06 06:07:29 <nightstrike>	ah ha!  in my real code, I forgot to swap "match" with the actual match text :)
Mar 06 06:09:39 <ormaaj>	mapfile -t a <"$x"; typeset -i i; for i in "${!a[@]}"; do [[ $i == *match* ]] && i+=i-2 command unset -v -- 'a[i++]'{,,,,}; done
Mar 06 06:10:40 <nightstrike>	whoa
Mar 06 06:10:44 <JAA>	Probably `[[ ${a[i]} == *match* ]]`
Mar 06 06:10:58 <ormaaj>	that
Mar 06 06:11:05 <nightstrike>	that looks like magic
Mar 06 06:11:19 <nightstrike>	what's this {,,,,} notation?
Mar 06 06:11:30 <JAA>	Very neat trick on the `unset`, yeah.
Mar 06 06:11:51 <nightstrike>	I know of {1..5} for generating a sequence...
Mar 06 06:12:25 <JAA>	It just generates 'a[i++]' five times.
Mar 06 06:12:42 <JAA>	You might only want four, not sure.
Mar 06 06:13:00 <nightstrike>	should be 4, yeah
Mar 06 06:13:23 <JAA>	The effect is that it unsets ${a[i++]} five times, and the post-increment takes care of $i.
Mar 06 06:14:08 <JAA>	So it's equivalent to `unset -v -- 'a[i]' 'a[i+1]' 'a[i+2]' 'a[i+3]' 'a[i+4]'; ((i+=5))` more or less.
Mar 06 06:14:16 <nightstrike>	i+=i-2..  that seems a little suspect, no?
Mar 06 06:14:30 <JAA>	Yeah, that should be i+=-2.
Mar 06 06:14:39 <JAA>	Or i=i-2.
Mar 06 06:14:47 <nightstrike>	ok, got it...
Mar 06 06:15:16 <nightstrike>	well that's certainly better than what I wrote.  I still maintain that grep -v -C should work :)
Mar 06 06:15:29 <nightstrike>	thanks ormaaj , mind if I use your solution?
Mar 06 06:16:53 <nightstrike>	I guess that's the point of posting in an irc channel :)
Mar 06 06:22:56 <ormaaj>	+# shopt -s lastpipe; set +m; printf '%s\n' {0..4} match {6..10} | mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ ${a[i]} == *match* ]] && i+=-2 command unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo
Mar 06 06:22:59 <shbot>	ormaaj: 0 1 2 7 8 9 10
Mar 06 06:23:04 <nightstrike>	hm.. your code is a lot slower, unfortunately
Mar 06 06:23:32 <ormaaj>	It should be faster :o
Mar 06 06:23:39 <nightstrike>	Maybe I typed it wrong
Mar 06 06:24:02 <nightstrike>	maybe it's hung
Mar 06 06:24:11 <ormaaj>	if it's slower it's probably bash doing some stupid backflips to export i to command
Mar 06 06:24:56 <nightstrike>	there's about 140k lines of input text.  Mine finished in maybe ten seconds.  Yours is going on a minute now.
Mar 06 06:25:22 <nightstrike>	but again, I could have typed it wrong.  it's after midnight for me.
Mar 06 06:25:32 <nightstrike>	yup
Mar 06 06:25:33 <nightstrike>	s.bash: line 129: [i++]: bad array subscript
Mar 06 06:25:35 <ormaaj>	the first one I wrote has some bugs
Mar 06 06:25:39 <nightstrike>	I must have screwed that up
Mar 06 06:25:46 <ormaaj>	use the one I sent to shbot
Mar 06 06:25:50 <nightstrike>	ok
Mar 06 06:27:43 <nightstrike>	hm... the bugs you fixed are ones that I also fixed...  i+=-2, the LHS of the ==, the three ,,, isntead of 4
Mar 06 06:28:30 <ormaaj>	wouldn't be too surprised if it does something weird with a huge input either
Mar 06 06:29:22 <ormaaj>	It would be faster to read one line at a time, unset the preveious too elements, seek ahead a line, and continue
Mar 06 06:31:04 <nightstrike>	It would be faster to use sed :P
Mar 06 06:31:11 <ormaaj>	yes
Mar 06 06:31:19 <nightstrike>	I just don't know how
Mar 06 06:31:30 <nightstrike>	and both times I asked in #sed got crickets
Mar 06 06:31:43 <ormaaj>	well with sed you have to use labels and junk. I wouldn't bother.
Mar 06 06:32:40 <ormaaj>	that's the only way to look ahead more than one line
Mar 06 06:32:43 <nightstrike>	hm... yeah, it's the i++ that's causing bash to choke
Mar 06 06:33:19 <ormaaj>	bash sux
Mar 06 06:33:30 <bent_fingers>	nobody uses grep -f pattern-file
Mar 06 06:33:35 <ormaaj>	you should figure out where and report a bug :{
Mar 06 06:33:45 <nightstrike>	hah, they won't accept the bug report
Mar 06 06:33:49 <nightstrike>	this is bash 4.1.2
Mar 06 06:33:52 <bent_fingers>	do you think they'll remove the feature if i file a bug?
Mar 06 06:33:57 <ormaaj>	ah yeah. bug highly likely
Mar 06 06:34:03 <ormaaj>	probably a bug I reported
Mar 06 06:34:08 <ormaaj>	years ago
Mar 06 06:34:18 <nightstrike>	I sadly have to support RHEL6 for another 8 months, so I gotta live with old bash for now
Mar 06 06:34:28 <larryv>	bent_fingers: no.
Mar 06 06:34:43 <ormaaj>	41# shopt -s lastpipe; set +m; printf '%s\n' {0..4} match {6..10} | mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ ${a[i]} == *match* ]] && i+=-2 command unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo
Mar 06 06:35:02 <ormaaj>	is there a 41??
Mar 06 06:35:10 <ormaaj>	# triggers
Mar 06 06:35:11 <shbot>	ormaaj: Available triggers: +# bash-devel; 1# bash-1.14; 2# bash-2.05b; 32# bash-3.2; 3# bash-3.2; 42# bash-4.2; 43# bash-4.3; 44# bash-4.4; 4# bash-4.4; 50# bash-5.0; 51# bash-5.1; 52# bash-5.2; 5# bash-5.2; # bash-5.2; d# dash-0.5.9; sh# dash-0.5.9; k# ksh 93u+ 2012-08-01; m# mksh R59 2021/01/24; b# bourne; j# bourne(w/job);
Mar 06 06:35:21 <ormaaj>	42# shopt -s lastpipe; set +m; printf '%s\n' {0..4} match {6..10} | mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ ${a[i]} == *match* ]] && i+=-2 command unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo
Mar 06 06:35:23 <shbot>	ormaaj: bash: [i++]: bad array subscript
Mar 06 06:35:23 <shbot>	ormaaj: bash: [i++]: bad array subscript
Mar 06 06:35:23 <shbot>	ormaaj: 2 3 4 match 6 7 8 9 10
Mar 06 06:35:36 <nightstrike>	yeah that's what I get, bad array subscript
Mar 06 06:35:40 <ormaaj>	fine piece of shit bash is.
Mar 06 06:36:01 <nightstrike>	42 specifies the version?
Mar 06 06:36:08 <ormaaj>	something like that
Mar 06 06:36:17 <nightstrike>	well that's a friendly bot!
Mar 06 06:36:54 <nightstrike>	GNU bash, version 4.1.2(2)-release (x86_64-redhat-linux-gnu)
Mar 06 06:37:07 <nightstrike>	CentOS release 6.10 (Final)
Mar 06 06:37:31 <ormaaj>	mapfile must have been very new
Mar 06 06:37:41 <ormaaj>	i think it came out only shortly  before
Mar 06 06:37:42 <nightstrike>	it's 4+ only
Mar 06 06:37:47 <nightstrike>	yeah
Mar 06 06:42:27 <ormaaj>	oh wait lastpipe wouldn't have been available then either
Mar 06 06:43:19 <ormaaj>	42# printf '%s\n' {0..4} match {6..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ ${a[i]} == *match* ]] || continue; i+=-2 command unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 06:43:21 <shbot>	ormaaj: bash: [i++]: bad array subscript
Mar 06 06:43:21 <shbot>	ormaaj: bash: [i++]: bad array subscript
Mar 06 06:43:21 <shbot>	ormaaj: 2 3 4 match 6 7 8 9 10
Mar 06 06:43:28 <ormaaj>	:o
Mar 06 06:43:37 <JAA>	Huh, it unsets 0 and 1?
Mar 06 06:44:08 <JAA>	Oh, a match on the first line would be fun, too.
Mar 06 06:44:19 <ormaaj>	42# printf '%s\n' {0..4} match {6..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ ${a[i]} == *match* ]] || continue; (( i-=2 )); unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 06:44:21 <shbot>	ormaaj: 0 1 2 7 8 9 10
Mar 06 06:44:49 <ormaaj>	hm rite
Mar 06 06:45:12 <nightstrike>	JAA: for my purpose, it is guaranteed to not match on the first line
Mar 06 06:45:32 <JAA>	A match on the last line might also make it sad, or matches on consecutive lines, or matches two lines apart.
Mar 06 06:46:59 <des_h>	i have a log file with unix timestamps prefixing each line. i want to generate a new file where i convert the timestamps to a human format. i can retrieve the timestamps with either awk or sed, but how do i call the external `date` utility to perform the conversation and substitute the new value in place so that I output a modified line? in sed with some kind of bash command substitution it would be like `s/timestamp/$(convert timestamp)/`
Mar 06 06:48:13 <JAA>	I'd probably do it in gawk.
Mar 06 06:48:18 <nightstrike>	The program is outputting..  "attempted command X\nError processing command\nError was NOTFOUND\nprogram failed on 'attempted command X'"
Mar 06 06:48:50 <nightstrike>	There are many possible errors, I'm only trying to silence specifically the NOTFOUND error, so I'm guaranteed to get those four lines of text all at once
Mar 06 06:48:57 <nightstrike>	but I don't want to silence any other errors
Mar 06 06:49:15 <nightstrike>	(and I can't modify the source program to be less annoying)
Mar 06 06:49:27 <JAA>	Ah, fun.
Mar 06 06:50:38 <nightstrike>	des_h: we're having fun with mapfile right now. You can do the same!! (no really, don't)
Mar 06 06:50:45 <nightstrike>	(but you could)
Mar 06 06:51:15 <JAA>	lol
Mar 06 06:51:21 <ormaaj>	42# printf '%s\n' 0 match 2 3 4 match match {7..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ '((i -= 2) < 0 && i = 0), 1' -ne 0 ${a[i]} == *match* ]] || continue; unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 06:51:23 <shbot>	ormaaj: bash: syntax error in conditional expression
Mar 06 06:51:23 <shbot>	ormaaj: bash: syntax error near `${a[i]}'
Mar 06 06:51:29 <JAA>	If in Bash, I'd just do a `read` loop + `printf`.
Mar 06 06:51:58 <ormaaj>	ugh wat
Mar 06 06:52:04 <ormaaj>	+# printf '%s\n' 0 match 2 3 4 match match {7..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ '((i -= 2) < 0 && i = 0), 1' -ne 0 ${a[i]} == *match* ]] || continue; unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 06:52:06 <shbot>	ormaaj: bash: syntax error in conditional expression
Mar 06 06:52:06 <shbot>	ormaaj: bash: syntax error near `${a[i]}'
Mar 06 06:52:10 <JAA>	wut is that string?
Mar 06 06:52:19 <ormaaj>	oh
Mar 06 06:52:26 <ormaaj>	+# printf '%s\n' 0 match 2 3 4 match match {7..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ '((i -= 2) < 0 && i = 0), 1' -ne 0 && ${a[i]} == *match* ]] || continue; unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 06:52:29 <shbot>	ormaaj: bash: [[: ((i -= 2) < 0 && i = 0), 1: attempted assignment to non-variable (error token is "= 0), 1")
Mar 06 06:52:29 <shbot>	ormaaj: bash: [[: ((i -= 2) < 0 && i = 0), 1: attempted assignment to non-variable (error token is "= 0), 1")
Mar 06 06:52:29 <shbot>	ormaaj: etc... ( http://paste.wooledge.org/29296 )
Mar 06 06:52:52 <fireonlive>	# exit
Mar 06 06:52:53 <shbot>	fireonlive: logout
Mar 06 06:52:53 <shbot>	fireonlive: (shell exited with 0)
Mar 06 06:53:01 <ormaaj>	mh I'm not testing wraparound either. Screw you if you need that.
Mar 06 06:55:37 <nightstrike>	ormaaj: what's the reason for { mapfile...} vs (mapfile...) ?
Mar 06 06:56:08 <ormaaj>	{ doesn't create a subshell
Mar 06 06:56:13 <nightstrike>	ah, ok
Mar 06 06:57:02 <ormaaj>	I don't know what the problem with that last one is
Mar 06 06:57:05 <JAA>	But really, what is that string in the comparison?
Mar 06 06:57:23 <nightstrike>	I'm still trying to get the first one working
Mar 06 06:57:25 <JAA>	Doesn't that need to be a `$((...))` or something?
Mar 06 06:57:45 <nightstrike>	ormaaj> 42# printf '%s\n' {0..4} match {6..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ ${a[i]} == *match* ]] || continue; i+=-2 command unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 06:57:46 <nightstrike>	that one
Mar 06 06:58:35 <ormaaj>	wow that is a bug
Mar 06 06:58:57 <ormaaj>	I can't do anything without finding a bug
Mar 06 06:59:19 <JAA>	lol
Mar 06 06:59:30 <JAA>	:-)
Mar 06 07:00:59 <ormaaj>	no shell accepts that expression
Mar 06 07:01:05 <ormaaj>	I don't understand what's wrong with it\
Mar 06 07:01:26 <ormaaj>	+# let '(i -= 2) < 0 && i = 0'
Mar 06 07:01:28 <shbot>	ormaaj: bash: let: (i -= 2) < 0 && i = 0: attempted assignment to non-variable (error token is "= 0")
Mar 06 07:01:36 <ormaaj>	looks correct to me
Mar 06 07:01:57 <ormaaj>	k# let '(i -= 2) < 0 && i = 0'
Mar 06 07:01:59 <shbot>	ormaaj: ksh: let: (i -= 2) < 0 && i = 0: assignment requires lvalue
Mar 06 07:02:05 <ormaaj>	there is a fucking lvalue
Mar 06 07:02:20 <larryv>	&& has higher precedence than =
Mar 06 07:02:35 <ormaaj>	>:(
Mar 06 07:04:22 <ormaaj>	41# printf '%s\n' 0 match 2 3 4 match match {7..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ '(i -= 2) < 0 && (i = 0), 1' -ne 0 && ${a[i]} == *match* ]] || continue; unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 07:04:34 <ormaaj>	42# printf '%s\n' 0 match 2 3 4 match match {7..10} | { mapfile -t a; typeset -i i; for i in "${!a[@]}"; do [[ '(i -= 2) < 0 && (i = 0), 1' -ne 0 && ${a[i]} == *match* ]] || continue; unset -v -- 'a[i++]'{,,,}; done; printf '%s ' "${a[@]}"; echo; }
Mar 06 07:04:36 <shbot>	ormaaj: 0 9 10
Mar 06 07:04:39 <ormaaj>	yay!
Mar 06 07:04:41 <ormaaj>	>:(
Mar 06 07:05:04 <larryv>	lolol
Mar 06 07:13:51 <nightstrike>	ormaaj: what was the ultimate fix for "bad subscript" with older bash?
**** BEGIN LOGGING AT Wed Mar  6 07:16:32 2024

Mar 06 07:16:31 *	Now talking on #bash
Mar 06 07:16:31 *	Topic for #bash is: https://mywiki.wooledge.org/BashFAQ | https://mywiki.wooledge.org/BashGuide | https://gnu.org/s/bash/manual | https://mywiki.wooledge.org/Quotes | https://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel | bash-hackers.org is down
Mar 06 07:16:31 *	Topic for #bash set by ormaaj!~ormaaj@user/ormaaj (Fri Feb 16 23:57:24 2024)
Mar 06 07:17:26 <nightstrike>	but what individual change made that go away? there were quite a few changes you were working with
Mar 06 07:17:29 <ormaaj>	which is odd, because an empty arithmetic expression is valid and equals zero. And those expressions were not empty
Mar 06 07:17:51 <ormaaj>	that last one looks like it works
Mar 06 07:18:39 <nightstrike>	I was trying to keep it simpler since I didn't need those extra cases
Mar 06 07:18:43 <nightstrike>	but I'll try it all the same
Mar 06 07:20:40 <nightstrike>	it doesn't
Mar 06 07:24:59 <nightstrike>	oh, hm..
Mar 06 07:25:07 <nightstrike>	it's almsot working
Mar 06 07:25:51 <nightstrike>	hey, it worked
Mar 06 07:26:10 <nightstrike>	both your one from before the extra requirements and the one you ended with
Mar 06 07:26:47 <nightstrike>	I had accidentally switched terminals to one that was using an older input program (the thing providing this garbage output), and its formatting was significantly different
Mar 06 07:28:43 <nightstrike>	it's still kinda slow, but it wokrs
Mar 06 07:33:33 <nightstrike>	ormaaj: ty for all the help. I'm gonna run with this.
Mar 06 07:33:52 <nightstrike>	Time to head to bed.   goodnight all
Mar 06 07:41:58 <ormaaj>	How are you supposed to get the max index of an array anyway?
Mar 06 07:45:04 <ormaaj>	# typeset -a a=([10]=); typeset -n r=a[-1]; echo "${!r}"
Mar 06 07:45:07 <shbot>	ormaaj: a[-1]
Mar 06 07:45:10 <ormaaj>	k# typeset -a a=([10]=); typeset -n r=a[-1]; echo "${!r}"
Mar 06 07:45:12 <shbot>	ormaaj: a[10]
Mar 06 07:45:14 <ormaaj>	fuck you bash.
Mar 06 07:45:48 <JAA>	Is iteration over keys guaranteed to be in order?
Mar 06 07:45:55 <ormaaj>	yes
Mar 06 07:46:21 <ormaaj>	I mean like, if you expand "${!a[@]}",  that will be in order
Mar 06 07:46:51 <JAA>	Yeah
Mar 06 07:46:56 <JAA>	Hmm
Mar 06 07:47:31 <ormaaj>	so b=("${!a[@]}"); echo "${b[-1]}"; will do it, but damn. All because Chet doesn't know how a freaking list should work.
Mar 06 07:47:33 <JAA>	And you can't do something like ${!a[-1]}.
Mar 06 07:47:44 <JAA>	Heh
Mar 06 07:47:50 <JAA>	Yeah, Bash arrays are weird.
Mar 06 08:36:48 <xmb>	if arr is without holes , ${#arr[@]} will return its next elem
Mar 06 08:37:00 <xmb>	0 1 2 , = 3
Mar 06 08:37:14 <JAA>	Yeah, but the discussion above was about sparse arrays.
Mar 06 08:37:22 <xmb>	ah k
Mar 06 08:41:30 <emanuele6>	ack
